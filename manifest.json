{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v11.json", "dbt_version": "1.7.13", "generated_at": "2024-05-24T21:02:59.428141Z", "invocation_id": "f7149b11-332c-4d16-97c1-67f6dc6e49c1", "env": {}, "project_name": "aspects", "project_id": "9074d4992d118978696669561f06dfcc", "user_id": "a0b82699-6d12-48ac-b83c-7a5dfcdc52df", "send_anonymous_usage_stats": true, "adapter_type": "clickhouse"}, "nodes": {"model.aspects.xapi_events_all_parsed": {"database": "", "schema": "xapi", "name": "xapi_events_all_parsed", "resource_type": "model", "package_name": "aspects", "path": "base/xapi_events_all_parsed.sql", "original_file_path": "models/base/xapi_events_all_parsed.sql", "unique_id": "model.aspects.xapi_events_all_parsed", "fqn": ["aspects", "base", "xapi_events_all_parsed"], "alias": "xapi_events_all_parsed", "checksum": {"name": "sha256", "checksum": "8f4cf054861f9f9b33bb6c24e5d9a49019509046c112e3b1b94cabd96f4dd0fd"}, "config": {"enabled": true, "alias": null, "schema": "xapi", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "OPTIMIZE TABLE {{ this }} {{ on_cluster() }} FINAL", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    ReplacingMergeTree()", "order_by": "(org, course_id, verb_id, actor_id, emission_time, event_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": "", "primary_key": "(org, course_id, verb_id, actor_id, emission_time, event_id)"}, "tags": [], "description": "A materialized view for xAPI events", "columns": {"event_id": {"name": "event_id", "description": "The unique identifier for the event", "meta": {}, "data_type": "uuid", "constraints": [], "quote": null, "tags": []}, "verb_id": {"name": "verb_id", "description": "The xAPI verb identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "object_id": {"name": "object_id", "description": "The xAPI object identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_id": {"name": "course_id", "description": "The course identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "emission_time": {"name": "emission_time", "description": "The time the event was emitted", "meta": {}, "data_type": "datetime64(6)", "constraints": [], "quote": null, "tags": []}, "event": {"name": "event", "description": "The xAPI event as a string", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/base/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "schema": "xapi", "engine": "\n    ReplacingMergeTree()", "primary_key": "(org, course_id, verb_id, actor_id, emission_time, event_id)", "order_by": "(org, course_id, verb_id, actor_id, emission_time, event_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": "", "post-hook": ["OPTIMIZE TABLE {{ this }} {{ on_cluster() }} FINAL"]}, "created_at": 1716584567.2236767, "relation_name": "`xapi`.`xapi_events_all_parsed`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        schema=env_var(\"ASPECTS_XAPI_DATABASE\", \"xapi\"),\n        engine=get_engine(\"ReplacingMergeTree()\"),\n        primary_key=\"(org, course_id, verb_id, actor_id, emission_time, event_id)\",\n        order_by=\"(org, course_id, verb_id, actor_id, emission_time, event_id)\",\n        partition_by=\"(toYYYYMM(emission_time))\",\n        ttl=env_var(\"ASPECTS_DATA_TTL_EXPRESSION\", \"\"),\n        post_hook=\"OPTIMIZE TABLE {{ this }} {{ on_cluster() }} FINAL\",\n    )\n}}\n\nselect\n    event_id as event_id,\n    JSON_VALUE(event::String, '$.verb.id') as verb_id,\n    COALESCE(\n        NULLIF(JSON_VALUE(event::String, '$.actor.account.name'), ''),\n        NULLIF(JSON_VALUE(event::String, '$.actor.mbox'), ''),\n        JSON_VALUE(event::String, '$.actor.mbox_sha1sum')\n    ) as actor_id,\n    JSON_VALUE(event::String, '$.object.id') as object_id,\n    -- If the contextActivities parent is a course, use that. It can be a \"course\"\n    -- type, or a \"cmi.interaction\" type for multiple question problem submissions.\n    -- Otherwise use the object id for the course id.\n    multiIf(\n        -- If the contextActivities parent is a course, use that\n        JSON_VALUE(\n            event::String, '$.context.contextActivities.parent[0].definition.type'\n        )\n        = 'http://adlnet.gov/expapi/activities/course',\n        JSON_VALUE(event::String, '$.context.contextActivities.parent[0].id'),\n        -- Else if the contextActivities parent is a GroupActivity, it's a multi\n        -- question problem and we use the grouping id\n        JSON_VALUE(event::String, '$.context.contextActivities.parent[0].objectType')\n        in ('Activity', 'GroupActivity'),\n        JSON_VALUE(event::String, '$.context.contextActivities.grouping[0].id'),\n        -- Otherwise use the object id\n        JSON_VALUE(event::String, '$.object.id')\n    ) as course_id,\n    coalesce(\n        get_org_from_course_url(course_id), get_org_from_ccx_course_url(course_id), ''\n    ) as org,\n    emission_time as emission_time,\n    event::String as event\nfrom {{ source(\"xapi\", \"xapi_events_all\") }}", "language": "sql", "refs": [], "sources": [["xapi", "xapi_events_all"]], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine", "macro.aspects.on_cluster"], "nodes": ["source.aspects.xapi.xapi_events_all"]}, "compiled_path": "target/compiled/aspects/models/base/xapi_events_all_parsed.sql", "compiled": true, "compiled_code": "\n\nselect\n    event_id as event_id,\n    JSON_VALUE(event::String, '$.verb.id') as verb_id,\n    COALESCE(\n        NULLIF(JSON_VALUE(event::String, '$.actor.account.name'), ''),\n        NULLIF(JSON_VALUE(event::String, '$.actor.mbox'), ''),\n        JSON_VALUE(event::String, '$.actor.mbox_sha1sum')\n    ) as actor_id,\n    JSON_VALUE(event::String, '$.object.id') as object_id,\n    -- If the contextActivities parent is a course, use that. It can be a \"course\"\n    -- type, or a \"cmi.interaction\" type for multiple question problem submissions.\n    -- Otherwise use the object id for the course id.\n    multiIf(\n        -- If the contextActivities parent is a course, use that\n        JSON_VALUE(\n            event::String, '$.context.contextActivities.parent[0].definition.type'\n        )\n        = 'http://adlnet.gov/expapi/activities/course',\n        JSON_VALUE(event::String, '$.context.contextActivities.parent[0].id'),\n        -- Else if the contextActivities parent is a GroupActivity, it's a multi\n        -- question problem and we use the grouping id\n        JSON_VALUE(event::String, '$.context.contextActivities.parent[0].objectType')\n        in ('Activity', 'GroupActivity'),\n        JSON_VALUE(event::String, '$.context.contextActivities.grouping[0].id'),\n        -- Otherwise use the object id\n        JSON_VALUE(event::String, '$.object.id')\n    ) as course_id,\n    coalesce(\n        get_org_from_course_url(course_id), get_org_from_ccx_course_url(course_id), ''\n    ) as org,\n    emission_time as emission_time,\n    event::String as event\nfrom `xapi`.`xapi_events_all`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_enrollments": {"database": "", "schema": "xapi", "name": "fact_enrollments", "resource_type": "model", "package_name": "aspects", "path": "enrollment/fact_enrollments.sql", "original_file_path": "models/enrollment/fact_enrollments.sql", "unique_id": "model.aspects.fact_enrollments", "fqn": ["aspects", "enrollment", "fact_enrollments"], "alias": "fact_enrollments", "checksum": {"name": "sha256", "checksum": "9cf04dc27c049a785918a39f058a51bf2607b1134a7c8416a77309ac50b5db30"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A record for each enrollment event", "columns": {"emission_time": {"name": "emission_time", "description": "Timestamp, to the second, of when this event was emitted", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "enrollment_mode": {"name": "enrollment_mode", "description": "The mode of enrollment", "meta": {}, "data_type": "LowCardinality(String)", "constraints": [], "quote": null, "tags": []}, "enrollment_status": {"name": "enrollment_status", "description": "Whether a learner is actively enrolled in a course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/enrollment/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1716584567.3025587, "relation_name": "`xapi`.`fact_enrollments`", "raw_code": "with\n    enrollments as (\n        select\n            emission_time,\n            org,\n            course_key,\n            actor_id,\n            enrollment_mode,\n            splitByString('/', verb_id)[-1] as enrollment_status\n        from {{ ref(\"enrollment_events\") }}\n    )\n\nselect\n    enrollments.emission_time as emission_time,\n    enrollments.org as org,\n    enrollments.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    enrollments.actor_id as actor_id,\n    enrollments.enrollment_mode as enrollment_mode,\n    enrollments.enrollment_status as enrollment_status,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom enrollments\njoin {{ ref(\"course_names\") }} courses on enrollments.course_key = courses.course_key\nleft outer join\n    {{ ref(\"dim_user_pii\") }} users on toUUID(actor_id) = users.external_user_id", "language": "sql", "refs": [{"name": "enrollment_events", "package": null, "version": null}, {"name": "course_names", "package": null, "version": null}, {"name": "dim_user_pii", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.aspects.enrollment_events", "model.aspects.course_names", "model.aspects.dim_user_pii"]}, "compiled_path": "target/compiled/aspects/models/enrollment/fact_enrollments.sql", "compiled": true, "compiled_code": "with\n    enrollments as (\n        select\n            emission_time,\n            org,\n            course_key,\n            actor_id,\n            enrollment_mode,\n            splitByString('/', verb_id)[-1] as enrollment_status\n        from `xapi`.`enrollment_events`\n    )\n\nselect\n    enrollments.emission_time as emission_time,\n    enrollments.org as org,\n    enrollments.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    enrollments.actor_id as actor_id,\n    enrollments.enrollment_mode as enrollment_mode,\n    enrollments.enrollment_status as enrollment_status,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom enrollments\njoin `xapi`.`course_names` courses on enrollments.course_key = courses.course_key\nleft outer join\n    `xapi`.`dim_user_pii` users on toUUID(actor_id) = users.external_user_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.enrollment_events": {"database": "", "schema": "xapi", "name": "enrollment_events", "resource_type": "model", "package_name": "aspects", "path": "enrollment/enrollment_events.sql", "original_file_path": "models/enrollment/enrollment_events.sql", "unique_id": "model.aspects.enrollment_events", "fqn": ["aspects", "enrollment", "enrollment_events"], "alias": "enrollment_events", "checksum": {"name": "sha256", "checksum": "68e0089c2d0fd6f09809b1366b53887343fbf9f661ac6f163a10aea190cb9969"}, "config": {"enabled": true, "alias": null, "schema": "xapi", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    ReplacingMergeTree()", "order_by": "(org, course_key, emission_time, actor_id, enrollment_mode, event_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": "", "primary_key": "(org, course_key)"}, "tags": [], "description": "A materialized view for xAPI events related to course enrollment", "columns": {"event_id": {"name": "event_id", "description": "The unique identifier for the event", "meta": {}, "data_type": "uuid", "constraints": [], "quote": null, "tags": []}, "emission_time": {"name": "emission_time", "description": "The time the event was emitted", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "object_id": {"name": "object_id", "description": "The xAPI object identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "verb_id": {"name": "verb_id", "description": "The xAPI verb identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "enrollment_mode": {"name": "enrollment_mode", "description": "The mode of enrollment", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/enrollment/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "schema": "xapi", "engine": "\n    ReplacingMergeTree()", "primary_key": "(org, course_key)", "order_by": "(org, course_key, emission_time, actor_id, enrollment_mode, event_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": ""}, "created_at": 1716584567.3041544, "relation_name": "`xapi`.`enrollment_events`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        schema=env_var(\"ASPECTS_XAPI_DATABASE\", \"xapi\"),\n        engine=get_engine(\"ReplacingMergeTree()\"),\n        primary_key=\"(org, course_key)\",\n        order_by=\"(org, course_key, emission_time, actor_id, enrollment_mode, event_id)\",\n        partition_by=\"(toYYYYMM(emission_time))\",\n        ttl=env_var(\"ASPECTS_DATA_TTL_EXPRESSION\", \"\"),\n    )\n}}\n\nselect\n    event_id,\n    cast(emission_time as DateTime) as emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] as course_key,\n    org,\n    verb_id,\n    JSON_VALUE(\n        event,\n        '$.object.definition.extensions.\"https://w3id.org/xapi/acrossx/extensions/type\"'\n    ) as enrollment_mode\nfrom {{ ref(\"xapi_events_all_parsed\") }}\nwhere\n    verb_id in (\n        'http://adlnet.gov/expapi/verbs/registered',\n        'http://id.tincanapi.com/verb/unregistered'\n    )", "language": "sql", "refs": [{"name": "xapi_events_all_parsed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine"], "nodes": ["model.aspects.xapi_events_all_parsed"]}, "compiled_path": "target/compiled/aspects/models/enrollment/enrollment_events.sql", "compiled": true, "compiled_code": "\n\nselect\n    event_id,\n    cast(emission_time as DateTime) as emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] as course_key,\n    org,\n    verb_id,\n    JSON_VALUE(\n        event,\n        '$.object.definition.extensions.\"https://w3id.org/xapi/acrossx/extensions/type\"'\n    ) as enrollment_mode\nfrom `xapi`.`xapi_events_all_parsed`\nwhere\n    verb_id in (\n        'http://adlnet.gov/expapi/verbs/registered',\n        'http://id.tincanapi.com/verb/unregistered'\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_enrollment_status": {"database": "", "schema": "xapi", "name": "fact_enrollment_status", "resource_type": "model", "package_name": "aspects", "path": "enrollment/fact_enrollment_status.sql", "original_file_path": "models/enrollment/fact_enrollment_status.sql", "unique_id": "model.aspects.fact_enrollment_status", "fqn": ["aspects", "enrollment", "fact_enrollment_status"], "alias": "fact_enrollment_status", "checksum": {"name": "sha256", "checksum": "e77614db9ce84f1d643ada3263c531c8c3764d0808d7bc4633bd40fffac4d6b2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    ReplacingMergeTree()", "order_by": "(org, course_key, actor_id)", "primary_key": "(org, course_key, actor_id)"}, "tags": [], "description": "One record per learner per course for the most recent enrollment status", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "enrollment_status": {"name": "enrollment_status", "description": "Whether a learner is actively enrolled in a course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "enrollment_mode": {"name": "enrollment_mode", "description": "The mode of enrollment", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "emission_time": {"name": "emission_time", "description": "The time the enrollment status was emitted", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/enrollment/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "engine": "\n    ReplacingMergeTree()", "primary_key": "(org, course_key, actor_id)", "order_by": "(org, course_key, actor_id)"}, "created_at": 1716584567.30516, "relation_name": "`xapi`.`fact_enrollment_status`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        engine=get_engine(\"ReplacingMergeTree()\"),\n        primary_key=\"(org, course_key, actor_id)\",\n        order_by=\"(org, course_key, actor_id)\",\n    )\n}}\n\nwith\n    ranked_enrollments as (\n        select\n            emission_time,\n            org,\n            course_key,\n            actor_id,\n            enrollment_mode,\n            splitByString('/', verb_id)[-1] as enrollment_status,\n            row_number() over (\n                partition by org, course_key, actor_id order by emission_time desc\n            ) as rn\n        from {{ ref(\"enrollment_events\") }}\n    )\n\nselect org, course_key, actor_id, enrollment_status, enrollment_mode, emission_time\nfrom ranked_enrollments\nwhere rn = 1", "language": "sql", "refs": [{"name": "enrollment_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine"], "nodes": ["model.aspects.enrollment_events"]}, "compiled_path": "target/compiled/aspects/models/enrollment/fact_enrollment_status.sql", "compiled": true, "compiled_code": "\n\nwith\n    ranked_enrollments as (\n        select\n            emission_time,\n            org,\n            course_key,\n            actor_id,\n            enrollment_mode,\n            splitByString('/', verb_id)[-1] as enrollment_status,\n            row_number() over (\n                partition by org, course_key, actor_id order by emission_time desc\n            ) as rn\n        from `xapi`.`enrollment_events`\n    )\n\nselect org, course_key, actor_id, enrollment_status, enrollment_mode, emission_time\nfrom ranked_enrollments\nwhere rn = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_problem_responses_extended": {"database": "", "schema": "xapi", "name": "fact_problem_responses_extended", "resource_type": "model", "package_name": "aspects", "path": "problems/fact_problem_responses_extended.sql", "original_file_path": "models/problems/fact_problem_responses_extended.sql", "unique_id": "model.aspects.fact_problem_responses_extended", "fqn": ["aspects", "problems", "fact_problem_responses_extended"], "alias": "fact_problem_responses_extended", "checksum": {"name": "sha256", "checksum": "a15f87a178f5a2e910b7767fb707e273625737f892beaf45eb7bd7e83663bc82"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "int_problem_results with section and subsection names", "columns": {"emission_time": {"name": "emission_time", "description": "The time the event was emitted", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_with_name": {"name": "section_with_name", "description": "The name of the section this subsection belongs to, with section_number prepended", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "subsection_with_name": {"name": "subsection_with_name", "description": "The name of the subsection, with section_number prepended", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "problem_id": {"name": "problem_id", "description": "The problem's unique identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "problem_name": {"name": "problem_name", "description": "The problem's name", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "problem_name_with_location": {"name": "problem_name_with_location", "description": "The problem's display name with section, subsection, and unit prepended to the name. This provides additional context when looking at problem names and can help data consumers understand which problem they are analyzing", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "problem_link": {"name": "problem_link", "description": "An anchor tag with a link to the problem", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "responses": {"name": "responses", "description": "The responses for this submission. If a problem has multiple parts, values for all parts will be in this field", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "success": {"name": "success", "description": "Boolean indicating whether the responses were correct", "meta": {}, "data_type": "bool", "constraints": [], "quote": null, "tags": []}, "attempts": {"name": "attempts", "description": "Number indicating which attempt this was", "meta": {}, "data_type": "int16", "constraints": [], "quote": null, "tags": []}, "graded": {"name": "graded", "description": "Whether this subsection block is graded", "meta": {}, "data_type": "bool", "constraints": [], "quote": null, "tags": []}, "interaction_type": {"name": "interaction_type", "description": "The type of interaction", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_order": {"name": "course_order", "description": "The sort order of this block in the course across all course blocks", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/problems/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.4183905, "relation_name": "`xapi`.`fact_problem_responses_extended`", "raw_code": "with\n    problem_results as (\n        select\n            *,\n            {{ section_from_display(\"problem_name_with_location\") }} as section_number,\n            {{ subsection_from_display(\"problem_name_with_location\") }}\n            as subsection_number\n        from {{ ref(\"int_problem_results\") }}\n    )\nselect\n    results.emission_time as emission_time,\n    results.org as org,\n    results.course_key as course_key,\n    results.course_name as course_name,\n    results.course_run as course_run,\n    problems.section_with_name as section_with_name,\n    problems.subsection_with_name as subsection_with_name,\n    results.problem_id as problem_id,\n    results.problem_name as problem_name,\n    results.problem_name_with_location as problem_name_with_location,\n    results.problem_link as problem_link,\n    results.actor_id as actor_id,\n    results.responses as responses,\n    results.success as success,\n    results.attempts as attempts,\n    results.course_order as course_order,\n    results.graded as graded,\n    results.interaction_type as interaction_type,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom problem_results results\njoin\n    {{ ref(\"int_problems_per_subsection\") }} problems\n    on (\n        results.org = problems.org\n        and results.course_key = problems.course_key\n        and results.section_number = problems.section_number\n        and results.subsection_number = problems.subsection_number\n    )\nleft outer join\n    {{ ref(\"dim_user_pii\") }} users on toUUID(actor_id) = users.external_user_id", "language": "sql", "refs": [{"name": "int_problem_results", "package": null, "version": null}, {"name": "int_problems_per_subsection", "package": null, "version": null}, {"name": "dim_user_pii", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.section_from_display", "macro.aspects.subsection_from_display"], "nodes": ["model.aspects.int_problem_results", "model.aspects.int_problems_per_subsection", "model.aspects.dim_user_pii"]}, "compiled_path": "target/compiled/aspects/models/problems/fact_problem_responses_extended.sql", "compiled": true, "compiled_code": "with\n    problem_results as (\n        select\n            *,\n            \n    concat(\n        splitByString(\n            ':', splitByString(' - ', problem_name_with_location)[1], 1\n        )[1],\n        ':0:0'\n    )\n as section_number,\n            \n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', problem_name_with_location)[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n\n            as subsection_number\n        from `xapi`.`int_problem_results`\n    )\nselect\n    results.emission_time as emission_time,\n    results.org as org,\n    results.course_key as course_key,\n    results.course_name as course_name,\n    results.course_run as course_run,\n    problems.section_with_name as section_with_name,\n    problems.subsection_with_name as subsection_with_name,\n    results.problem_id as problem_id,\n    results.problem_name as problem_name,\n    results.problem_name_with_location as problem_name_with_location,\n    results.problem_link as problem_link,\n    results.actor_id as actor_id,\n    results.responses as responses,\n    results.success as success,\n    results.attempts as attempts,\n    results.course_order as course_order,\n    results.graded as graded,\n    results.interaction_type as interaction_type,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom problem_results results\njoin\n    `xapi`.`int_problems_per_subsection` problems\n    on (\n        results.org = problems.org\n        and results.course_key = problems.course_key\n        and results.section_number = problems.section_number\n        and results.subsection_number = problems.subsection_number\n    )\nleft outer join\n    `xapi`.`dim_user_pii` users on toUUID(actor_id) = users.external_user_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.section_problem_engagement": {"database": "", "schema": "xapi", "name": "section_problem_engagement", "resource_type": "model", "package_name": "aspects", "path": "problems/section_problem_engagement.sql", "original_file_path": "models/problems/section_problem_engagement.sql", "unique_id": "model.aspects.section_problem_engagement", "fqn": ["aspects", "problems", "section_problem_engagement"], "alias": "section_problem_engagement", "checksum": {"name": "sha256", "checksum": "524c2a33f7ce8786133b9cb05fe6ac139625a4acf4efe26a0173d4217096e0b8"}, "config": {"enabled": true, "alias": null, "schema": "xapi", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    ReplacingMergeTree()", "order_by": "(org, course_key, section_block_id, actor_id)", "primary_key": "(org, course_key)"}, "tags": [], "description": "A record per course per section per learner with their engagement level", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_block_id": {"name": "section_block_id", "description": "The unique identifier for the section block", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "engagement_level": {"name": "engagement_level", "description": "The engagement level of the learner with the section", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/problems/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "schema": "xapi", "engine": "\n    ReplacingMergeTree()", "primary_key": "(org, course_key)", "order_by": "(org, course_key, section_block_id, actor_id)"}, "created_at": 1716584567.4209793, "relation_name": "`xapi`.`section_problem_engagement`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        schema=env_var(\"ASPECTS_XAPI_DATABASE\", \"xapi\"),\n        engine=get_engine(\"ReplacingMergeTree()\"),\n        primary_key=\"(org, course_key)\",\n        order_by=\"(org, course_key, section_block_id, actor_id)\",\n    )\n}}\n\nwith\n    responses as (\n        select\n            emission_time,\n            org,\n            course_key,\n            object_id,\n            problem_id,\n            actor_id,\n            responses,\n            success,\n            attempts,\n            interaction_type\n        from {{ ref(\"problem_events\") }}\n        where verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated'\n    ),\n    fact_problem_responses as (\n        select\n            responses.emission_time as emission_time,\n            responses.org as org,\n            responses.course_key as course_key,\n            blocks.course_name as course_name,\n            responses.problem_id as problem_id,\n            blocks.block_name as problem_name,\n            blocks.display_name_with_location as problem_name_with_location,\n            {{ a_tag(\"responses.object_id\", \"blocks.block_name\") }} as problem_link,\n            blocks.graded as graded,\n            course_order as course_order,\n            responses.actor_id as actor_id,\n            responses.responses as responses,\n            responses.success as success,\n            responses.attempts as attempts,\n            responses.interaction_type as interaction_type\n        from responses\n        join\n            {{ ref(\"dim_course_blocks\") }} blocks\n            on (\n                responses.course_key = blocks.course_key\n                and responses.problem_id = blocks.block_id\n            )\n        group by\n            -- multi-part questions include an extra record for the response to the\n            -- first\n            -- part of the question. this group by clause eliminates the duplicate\n            -- record\n            emission_time,\n            org,\n            course_key,\n            course_name,\n            problem_id,\n            problem_name,\n            problem_name_with_location,\n            problem_link,\n            actor_id,\n            responses,\n            success,\n            attempts,\n            course_order,\n            graded,\n            interaction_type\n    ),\n    attempted_subsection_problems as (\n        select distinct\n            date(emission_time) as attempted_on,\n            org,\n            course_key,\n            {{ section_from_display(\"problem_name_with_location\") }} as section_number,\n            {{ subsection_from_display(\"problem_name_with_location\") }}\n            as subsection_number,\n            course_order as course_order,\n            graded,\n            actor_id,\n            problem_id\n        from fact_problem_responses\n    ),\n    fact_problem_engagement_per_subsection as (\n        select\n            attempts.org as org,\n            attempts.course_key as course_key,\n            problems.section_with_name as section_with_name,\n            problems.subsection_with_name as subsection_with_name,\n            problems.item_count as item_count,\n            attempts.actor_id as actor_id,\n            attempts.problem_id as problem_id,\n            problems.section_block_id as section_block_id\n        from attempted_subsection_problems attempts\n        join\n            {{ ref(\"int_problems_per_subsection\") }} problems\n            on (\n                attempts.org = problems.org\n                and attempts.course_key = problems.course_key\n                and attempts.section_number = problems.section_number\n                and attempts.subsection_number = problems.subsection_number\n            )\n    ),\n    subsection_counts as (\n        select\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            count(distinct problem_id) as problems_attempted,\n            case\n                when problems_attempted = 0\n                then 'No problems attempted yet'\n                when problems_attempted = item_count\n                then 'All problems attempted'\n                else 'At least one problem attempted'\n            end as engagement_level,\n            section_block_id\n        from fact_problem_engagement_per_subsection\n        group by\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            section_block_id\n    ),\n    section_counts as (\n        select\n            org,\n            course_key,\n            actor_id,\n            sum(item_count) as item_count,\n            sum(problems_attempted) as problems_attempted,\n            case\n                when problems_attempted = 0\n                then 'No problems attempted yet'\n                when problems_attempted = item_count\n                then 'All problems attempted'\n                else 'At least one problem attempted'\n            end as engagement_level,\n            section_block_id\n        from subsection_counts\n        group by org, course_key, section_block_id, actor_id\n    )\n\nselect org, course_key, actor_id, section_block_id, engagement_level\nfrom section_counts", "language": "sql", "refs": [{"name": "problem_events", "package": null, "version": null}, {"name": "dim_course_blocks", "package": null, "version": null}, {"name": "int_problems_per_subsection", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine", "macro.aspects.a_tag", "macro.aspects.section_from_display", "macro.aspects.subsection_from_display"], "nodes": ["model.aspects.problem_events", "model.aspects.dim_course_blocks", "model.aspects.int_problems_per_subsection"]}, "compiled_path": "target/compiled/aspects/models/problems/section_problem_engagement.sql", "compiled": true, "compiled_code": "\n\nwith\n    responses as (\n        select\n            emission_time,\n            org,\n            course_key,\n            object_id,\n            problem_id,\n            actor_id,\n            responses,\n            success,\n            attempts,\n            interaction_type\n        from `xapi`.`problem_events`\n        where verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated'\n    ),\n    fact_problem_responses as (\n        select\n            responses.emission_time as emission_time,\n            responses.org as org,\n            responses.course_key as course_key,\n            blocks.course_name as course_name,\n            responses.problem_id as problem_id,\n            blocks.block_name as problem_name,\n            blocks.display_name_with_location as problem_name_with_location,\n            \n    concat(\n        '<a href=\"', responses.object_id, '\" target=\"_blank\">', blocks.block_name, '</a>'\n    )\n as problem_link,\n            blocks.graded as graded,\n            course_order as course_order,\n            responses.actor_id as actor_id,\n            responses.responses as responses,\n            responses.success as success,\n            responses.attempts as attempts,\n            responses.interaction_type as interaction_type\n        from responses\n        join\n            `xapi`.`dim_course_blocks` blocks\n            on (\n                responses.course_key = blocks.course_key\n                and responses.problem_id = blocks.block_id\n            )\n        group by\n            -- multi-part questions include an extra record for the response to the\n            -- first\n            -- part of the question. this group by clause eliminates the duplicate\n            -- record\n            emission_time,\n            org,\n            course_key,\n            course_name,\n            problem_id,\n            problem_name,\n            problem_name_with_location,\n            problem_link,\n            actor_id,\n            responses,\n            success,\n            attempts,\n            course_order,\n            graded,\n            interaction_type\n    ),\n    attempted_subsection_problems as (\n        select distinct\n            date(emission_time) as attempted_on,\n            org,\n            course_key,\n            \n    concat(\n        splitByString(\n            ':', splitByString(' - ', problem_name_with_location)[1], 1\n        )[1],\n        ':0:0'\n    )\n as section_number,\n            \n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', problem_name_with_location)[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n\n            as subsection_number,\n            course_order as course_order,\n            graded,\n            actor_id,\n            problem_id\n        from fact_problem_responses\n    ),\n    fact_problem_engagement_per_subsection as (\n        select\n            attempts.org as org,\n            attempts.course_key as course_key,\n            problems.section_with_name as section_with_name,\n            problems.subsection_with_name as subsection_with_name,\n            problems.item_count as item_count,\n            attempts.actor_id as actor_id,\n            attempts.problem_id as problem_id,\n            problems.section_block_id as section_block_id\n        from attempted_subsection_problems attempts\n        join\n            `xapi`.`int_problems_per_subsection` problems\n            on (\n                attempts.org = problems.org\n                and attempts.course_key = problems.course_key\n                and attempts.section_number = problems.section_number\n                and attempts.subsection_number = problems.subsection_number\n            )\n    ),\n    subsection_counts as (\n        select\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            count(distinct problem_id) as problems_attempted,\n            case\n                when problems_attempted = 0\n                then 'No problems attempted yet'\n                when problems_attempted = item_count\n                then 'All problems attempted'\n                else 'At least one problem attempted'\n            end as engagement_level,\n            section_block_id\n        from fact_problem_engagement_per_subsection\n        group by\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            section_block_id\n    ),\n    section_counts as (\n        select\n            org,\n            course_key,\n            actor_id,\n            sum(item_count) as item_count,\n            sum(problems_attempted) as problems_attempted,\n            case\n                when problems_attempted = 0\n                then 'No problems attempted yet'\n                when problems_attempted = item_count\n                then 'All problems attempted'\n                else 'At least one problem attempted'\n            end as engagement_level,\n            section_block_id\n        from subsection_counts\n        group by org, course_key, section_block_id, actor_id\n    )\n\nselect org, course_key, actor_id, section_block_id, engagement_level\nfrom section_counts", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.problem_events": {"database": "", "schema": "xapi", "name": "problem_events", "resource_type": "model", "package_name": "aspects", "path": "problems/problem_events.sql", "original_file_path": "models/problems/problem_events.sql", "unique_id": "model.aspects.problem_events", "fqn": ["aspects", "problems", "problem_events"], "alias": "problem_events", "checksum": {"name": "sha256", "checksum": "9c48ce369c7cd1f99eac36ea9d9246a87622fc33ecd7304ff2c7585a1b60f470"}, "config": {"enabled": true, "alias": null, "schema": "xapi", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    ReplacingMergeTree()", "order_by": "(org, course_key, verb_id, emission_time, actor_id, object_id, responses, success, event_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": "", "primary_key": "(org, course_key, verb_id)"}, "tags": [], "description": "Problem events", "columns": {"event_id": {"name": "event_id", "description": "The unique identifier for the event", "meta": {}, "data_type": "uuid", "constraints": [], "quote": null, "tags": []}, "emission_time": {"name": "emission_time", "description": "The time the event was emitted", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "object_id": {"name": "object_id", "description": "The xAPI object identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "verb_id": {"name": "verb_id", "description": "The xAPI verb identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "responses": {"name": "responses", "description": "The responses for this submission. If a problem has multiple parts, values for all parts will be in this field", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "scaled_score": {"name": "scaled_score", "description": "A ratio between 0 and 1, inclusive, of the learner's grade", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "success": {"name": "success", "description": "Boolean indicating whether the responses were correct", "meta": {}, "data_type": "bool", "constraints": [], "quote": null, "tags": []}, "interaction_type": {"name": "interaction_type", "description": "The type of interaction", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "attempts": {"name": "attempts", "description": "Number indicating which attempt this was", "meta": {}, "data_type": "int16", "constraints": [], "quote": null, "tags": []}, "problem_id": {"name": "problem_id", "description": "The problem's unique identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/problems/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "schema": "xapi", "engine": "\n    ReplacingMergeTree()", "primary_key": "(org, course_key, verb_id)", "order_by": "(org, course_key, verb_id, emission_time, actor_id, object_id, responses, success, event_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": ""}, "created_at": 1716584567.4083068, "relation_name": "`xapi`.`problem_events`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        schema=env_var(\"ASPECTS_XAPI_DATABASE\", \"xapi\"),\n        engine=get_engine(\"ReplacingMergeTree()\"),\n        primary_key=\"(org, course_key, verb_id)\",\n        order_by=\"(org, course_key, verb_id, emission_time, actor_id, object_id, responses, success, event_id)\",\n        partition_by=\"(toYYYYMM(emission_time))\",\n        ttl=env_var(\"ASPECTS_DATA_TTL_EXPRESSION\", \"\"),\n    )\n}}\n\nselect\n    event_id,\n    cast(emission_time as DateTime) as emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] as course_key,\n    org,\n    verb_id,\n    JSON_VALUE(event, '$.result.response') as responses,\n    JSON_VALUE(event, '$.result.score.scaled') as scaled_score,\n    if(\n        verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated',\n        cast(JSON_VALUE(event, '$.result.success') as Bool),\n        false\n    ) as success,\n    JSON_VALUE(event, '$.object.definition.interactionType') as interaction_type,\n    if(\n        verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated',\n        cast(\n            JSON_VALUE(\n                event,\n                '$.object.definition.extensions.\"http://id.tincanapi.com/extension/attempt-id\"'\n            ) as Int16\n        ),\n        0\n    ) as attempts,\n    {{ get_problem_id(\"object_id\") }} as problem_id\nfrom {{ ref(\"xapi_events_all_parsed\") }}\nwhere\n    verb_id in (\n        'https://w3id.org/xapi/acrossx/verbs/evaluated',\n        'http://adlnet.gov/expapi/verbs/passed',\n        'http://adlnet.gov/expapi/verbs/asked'\n    )", "language": "sql", "refs": [{"name": "xapi_events_all_parsed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine", "macro.aspects.get_problem_id"], "nodes": ["model.aspects.xapi_events_all_parsed"]}, "compiled_path": "target/compiled/aspects/models/problems/problem_events.sql", "compiled": true, "compiled_code": "\n\nselect\n    event_id,\n    cast(emission_time as DateTime) as emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] as course_key,\n    org,\n    verb_id,\n    JSON_VALUE(event, '$.result.response') as responses,\n    JSON_VALUE(event, '$.result.score.scaled') as scaled_score,\n    if(\n        verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated',\n        cast(JSON_VALUE(event, '$.result.success') as Bool),\n        false\n    ) as success,\n    JSON_VALUE(event, '$.object.definition.interactionType') as interaction_type,\n    if(\n        verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated',\n        cast(\n            JSON_VALUE(\n                event,\n                '$.object.definition.extensions.\"http://id.tincanapi.com/extension/attempt-id\"'\n            ) as Int16\n        ),\n        0\n    ) as attempts,\n    \n    regexpExtract(\n        object_id, 'xblock/([\\w\\d-\\+:@]*@problem\\+block@[\\w\\d][^_]*)(_\\d_\\d)?', 1\n    )\n as problem_id\nfrom `xapi`.`xapi_events_all_parsed`\nwhere\n    verb_id in (\n        'https://w3id.org/xapi/acrossx/verbs/evaluated',\n        'http://adlnet.gov/expapi/verbs/passed',\n        'http://adlnet.gov/expapi/verbs/asked'\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.int_problem_results": {"database": "", "schema": "xapi", "name": "int_problem_results", "resource_type": "model", "package_name": "aspects", "path": "problems/int_problem_results.sql", "original_file_path": "models/problems/int_problem_results.sql", "unique_id": "model.aspects.int_problem_results", "fqn": ["aspects", "problems", "int_problem_results"], "alias": "int_problem_results", "checksum": {"name": "sha256", "checksum": "080cabcbd3bc22a8ddc77cd9134a0cd37c95b228f3adb3ee2eec208a65db7435"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Internal table for problem results", "columns": {"emission_time": {"name": "emission_time", "description": "Timestamp, to the second, of when this event was emitted", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "problem_id": {"name": "problem_id", "description": "The problem's unique identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "problem_name": {"name": "problem_name", "description": "The problem's name", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "problem_name_with_location": {"name": "problem_name_with_location", "description": "The problem's display name with section, subsection, and unit prepended to the name. This provides additional context when looking at problem names and can help data consumers understand which problem they are analyzing", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "problem_link": {"name": "problem_link", "description": "An anchor tag with a link to the problem", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "responses": {"name": "responses", "description": "The responses for this submission. If a problem has multiple parts, values for all parts will be in this field", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "success": {"name": "success", "description": "Boolean indicating whether the responses were correct", "meta": {}, "data_type": "bool", "constraints": [], "quote": null, "tags": []}, "attempts": {"name": "attempts", "description": "Number indicating which attempt this was", "meta": {}, "data_type": "int16", "constraints": [], "quote": null, "tags": []}, "graded": {"name": "graded", "description": "Boolean indicating this block is graded", "meta": {}, "data_type": "bool", "constraints": [], "quote": null, "tags": []}, "interaction_type": {"name": "interaction_type", "description": "The type of interaction - e.g. multiple choice", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_order": {"name": "course_order", "description": "The sort order of this block in the course across all course blocks", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/problems/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.406414, "relation_name": "`xapi`.`int_problem_results`", "raw_code": "-- select one record per (learner, problem, course, org) tuple\n-- contains either the first successful attempt\n-- or the most recent unsuccessful attempt\n-- find the timestamp of the earliest successful response\n-- this will be used to pick the xAPI event corresponding to that submission\nwith\n    successful_responses as (\n        select org, course_key, problem_id, actor_id, first_success_at\n        from {{ ref(\"responses\") }}\n        where isNotNull(first_success_at)\n    ),\n    -- for all learners who did not submit a successful response,\n    -- find the timestamp of the most recent unsuccessful response\n    unsuccessful_responses as (\n        select\n            org,\n            course_key,\n            problem_id,\n            actor_id,\n            max(last_attempt_at) as last_attempt_at\n        from {{ ref(\"responses\") }}\n        where actor_id not in (select distinct actor_id from successful_responses)\n        group by org, course_key, problem_id, actor_id\n    ),\n    -- combine result sets for successful and unsuccessful problem submissions\n    responses as (\n        select org, course_key, problem_id, actor_id, first_success_at as emission_time\n        from successful_responses\n        union all\n        select org, course_key, problem_id, actor_id, last_attempt_at as emission_time\n        from unsuccessful_responses\n    ),\n    full_responses as (\n        select\n            events.emission_time as emission_time,\n            events.org as org,\n            events.course_key as course_key,\n            events.problem_id as problem_id,\n            events.object_id as object_id,\n            events.actor_id as actor_id,\n            events.responses as responses,\n            events.success as success,\n            events.attempts as attempts,\n            events.interaction_type as interaction_type\n        from {{ ref(\"problem_events\") }} events\n        join responses using (org, course_key, problem_id, actor_id, emission_time)\n    )\n\nselect\n    full_responses.emission_time as emission_time,\n    full_responses.org as org,\n    full_responses.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    full_responses.problem_id as problem_id,\n    blocks.block_name as problem_name,\n    blocks.display_name_with_location as problem_name_with_location,\n    blocks.course_order as course_order,\n    {{ a_tag(\"full_responses.object_id\", \"blocks.block_name\") }} as problem_link,\n    full_responses.actor_id as actor_id,\n    full_responses.responses as responses,\n    full_responses.success as success,\n    full_responses.attempts as attempts,\n    full_responses.interaction_type as interaction_type,\n    blocks.graded\nfrom full_responses\njoin\n    {{ ref(\"dim_course_blocks\") }} blocks\n    on (\n        full_responses.course_key = blocks.course_key\n        and full_responses.problem_id = blocks.block_id\n    )", "language": "sql", "refs": [{"name": "responses", "package": null, "version": null}, {"name": "responses", "package": null, "version": null}, {"name": "problem_events", "package": null, "version": null}, {"name": "dim_course_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.a_tag"], "nodes": ["model.aspects.responses", "model.aspects.problem_events", "model.aspects.dim_course_blocks"]}, "compiled_path": "target/compiled/aspects/models/problems/int_problem_results.sql", "compiled": true, "compiled_code": "-- select one record per (learner, problem, course, org) tuple\n-- contains either the first successful attempt\n-- or the most recent unsuccessful attempt\n-- find the timestamp of the earliest successful response\n-- this will be used to pick the xAPI event corresponding to that submission\nwith\n    successful_responses as (\n        select org, course_key, problem_id, actor_id, first_success_at\n        from `xapi`.`responses`\n        where isNotNull(first_success_at)\n    ),\n    -- for all learners who did not submit a successful response,\n    -- find the timestamp of the most recent unsuccessful response\n    unsuccessful_responses as (\n        select\n            org,\n            course_key,\n            problem_id,\n            actor_id,\n            max(last_attempt_at) as last_attempt_at\n        from `xapi`.`responses`\n        where actor_id not in (select distinct actor_id from successful_responses)\n        group by org, course_key, problem_id, actor_id\n    ),\n    -- combine result sets for successful and unsuccessful problem submissions\n    responses as (\n        select org, course_key, problem_id, actor_id, first_success_at as emission_time\n        from successful_responses\n        union all\n        select org, course_key, problem_id, actor_id, last_attempt_at as emission_time\n        from unsuccessful_responses\n    ),\n    full_responses as (\n        select\n            events.emission_time as emission_time,\n            events.org as org,\n            events.course_key as course_key,\n            events.problem_id as problem_id,\n            events.object_id as object_id,\n            events.actor_id as actor_id,\n            events.responses as responses,\n            events.success as success,\n            events.attempts as attempts,\n            events.interaction_type as interaction_type\n        from `xapi`.`problem_events` events\n        join responses using (org, course_key, problem_id, actor_id, emission_time)\n    )\n\nselect\n    full_responses.emission_time as emission_time,\n    full_responses.org as org,\n    full_responses.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    full_responses.problem_id as problem_id,\n    blocks.block_name as problem_name,\n    blocks.display_name_with_location as problem_name_with_location,\n    blocks.course_order as course_order,\n    \n    concat(\n        '<a href=\"', full_responses.object_id, '\" target=\"_blank\">', blocks.block_name, '</a>'\n    )\n as problem_link,\n    full_responses.actor_id as actor_id,\n    full_responses.responses as responses,\n    full_responses.success as success,\n    full_responses.attempts as attempts,\n    full_responses.interaction_type as interaction_type,\n    blocks.graded\nfrom full_responses\njoin\n    `xapi`.`dim_course_blocks` blocks\n    on (\n        full_responses.course_key = blocks.course_key\n        and full_responses.problem_id = blocks.block_id\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_learner_problem_summary": {"database": "", "schema": "xapi", "name": "fact_learner_problem_summary", "resource_type": "model", "package_name": "aspects", "path": "problems/fact_learner_problem_summary.sql", "original_file_path": "models/problems/fact_learner_problem_summary.sql", "unique_id": "model.aspects.fact_learner_problem_summary", "fqn": ["aspects", "problems", "fact_learner_problem_summary"], "alias": "fact_learner_problem_summary", "checksum": {"name": "sha256", "checksum": "3ab4d03930e4ecc18ac9676a111c7f8eeeef9c7dc65f5c00cd21a9c7c8d9948f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "One record per learner per problem in a course", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "problem_id": {"name": "problem_id", "description": "The problem's unique identifier", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "problem_name": {"name": "problem_name", "description": "The problem's name", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "problem_name_with_location": {"name": "problem_name_with_location", "description": "The problem's display name with section, subsection, and unit prepended to the name. This provides additional context when looking at problem names and can help data consumers understand which problem they are analyzing", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "success": {"name": "success", "description": "The result of the last submission", "meta": {}, "data_type": "Bool", "constraints": [], "quote": null, "tags": []}, "attempts": {"name": "attempts", "description": "The number of attempts made", "meta": {}, "data_type": "Int16", "constraints": [], "quote": null, "tags": []}, "num_hints_displayed": {"name": "num_hints_displayed", "description": "The number of times a learner asked for a hint", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": []}, "num_answers_displayed": {"name": "num_answers_displayed", "description": "The number of times a learner requested the answers for the problem", "meta": {}, "data_type": "UInt64", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_order": {"name": "course_order", "description": "The sort order of this block in the course across all course blocks", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/problems/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.3991752, "relation_name": "`xapi`.`fact_learner_problem_summary`", "raw_code": "-- summary table for a learner's performance on and interactions with a\n-- particular problem\nwith\n    results_with_hints as (\n        select\n            org,\n            course_key,\n            course_name,\n            course_run,\n            problem_id,\n            problem_name,\n            problem_name_with_location,\n            course_order,\n            actor_id,\n            success,\n            attempts,\n            0 as num_hints_displayed,\n            0 as num_answers_displayed\n        from {{ ref(\"int_problem_results\") }}\n        union all\n        select\n            org,\n            course_key,\n            course_name,\n            course_run,\n            problem_id,\n            problem_name,\n            problem_name_with_location,\n            course_order,\n            actor_id,\n            null as success,\n            null as attempts,\n            case help_type when 'hint' then 1 else 0 end as num_hints_displayed,\n            case help_type when 'answer' then 1 else 0 end as num_answers_displayed\n        from {{ ref(\"int_problem_hints\") }}\n    )\n\n-- n.b.: there should only be one row per org, course, problem, and actor\n-- in problem_results, so any(success) and any(attempts) should return the\n-- values from that part of the union and not the null values used as\n-- placeholders in the problem_hints part of the union\nselect\n    org,\n    course_key,\n    course_name,\n    course_run,\n    problem_id,\n    problem_name,\n    problem_name_with_location,\n    course_order,\n    actor_id,\n    coalesce(any(success), false) as success,\n    coalesce(any(attempts), 0) as attempts,\n    sum(num_hints_displayed) as num_hints_displayed,\n    sum(num_answers_displayed) as num_answers_displayed,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom results_with_hints\nleft outer join\n    {{ ref(\"dim_user_pii\") }} users on toUUID(actor_id) = users.external_user_id\ngroup by\n    org,\n    course_key,\n    course_name,\n    course_run,\n    problem_id,\n    problem_name,\n    problem_name_with_location,\n    course_order,\n    actor_id,\n    username,\n    name,\n    email", "language": "sql", "refs": [{"name": "int_problem_results", "package": null, "version": null}, {"name": "int_problem_hints", "package": null, "version": null}, {"name": "dim_user_pii", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.aspects.int_problem_results", "model.aspects.int_problem_hints", "model.aspects.dim_user_pii"]}, "compiled_path": "target/compiled/aspects/models/problems/fact_learner_problem_summary.sql", "compiled": true, "compiled_code": "-- summary table for a learner's performance on and interactions with a\n-- particular problem\nwith\n    results_with_hints as (\n        select\n            org,\n            course_key,\n            course_name,\n            course_run,\n            problem_id,\n            problem_name,\n            problem_name_with_location,\n            course_order,\n            actor_id,\n            success,\n            attempts,\n            0 as num_hints_displayed,\n            0 as num_answers_displayed\n        from `xapi`.`int_problem_results`\n        union all\n        select\n            org,\n            course_key,\n            course_name,\n            course_run,\n            problem_id,\n            problem_name,\n            problem_name_with_location,\n            course_order,\n            actor_id,\n            null as success,\n            null as attempts,\n            case help_type when 'hint' then 1 else 0 end as num_hints_displayed,\n            case help_type when 'answer' then 1 else 0 end as num_answers_displayed\n        from `xapi`.`int_problem_hints`\n    )\n\n-- n.b.: there should only be one row per org, course, problem, and actor\n-- in problem_results, so any(success) and any(attempts) should return the\n-- values from that part of the union and not the null values used as\n-- placeholders in the problem_hints part of the union\nselect\n    org,\n    course_key,\n    course_name,\n    course_run,\n    problem_id,\n    problem_name,\n    problem_name_with_location,\n    course_order,\n    actor_id,\n    coalesce(any(success), false) as success,\n    coalesce(any(attempts), 0) as attempts,\n    sum(num_hints_displayed) as num_hints_displayed,\n    sum(num_answers_displayed) as num_answers_displayed,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom results_with_hints\nleft outer join\n    `xapi`.`dim_user_pii` users on toUUID(actor_id) = users.external_user_id\ngroup by\n    org,\n    course_key,\n    course_name,\n    course_run,\n    problem_id,\n    problem_name,\n    problem_name_with_location,\n    course_order,\n    actor_id,\n    username,\n    name,\n    email", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.subsection_problem_engagement": {"database": "", "schema": "xapi", "name": "subsection_problem_engagement", "resource_type": "model", "package_name": "aspects", "path": "problems/subsection_problem_engagement.sql", "original_file_path": "models/problems/subsection_problem_engagement.sql", "unique_id": "model.aspects.subsection_problem_engagement", "fqn": ["aspects", "problems", "subsection_problem_engagement"], "alias": "subsection_problem_engagement", "checksum": {"name": "sha256", "checksum": "e2921cd8b8b5150a9a22e1bedba8c9a0f3682449e1f39a07d5248ba61e16c322"}, "config": {"enabled": true, "alias": null, "schema": "xapi", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    ReplacingMergeTree()", "order_by": "(org, course_key, subsection_block_id, actor_id)", "primary_key": "(org, course_key)"}, "tags": [], "description": "A record per course per subsection per learner with their engagement level", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "subsection_block_id": {"name": "subsection_block_id", "description": "The unique identifier for the subsection block", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "engagement_level": {"name": "engagement_level", "description": "The engagement level of the learner with the subsection", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/problems/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "schema": "xapi", "engine": "\n    ReplacingMergeTree()", "primary_key": "(org, course_key)", "order_by": "(org, course_key, subsection_block_id, actor_id)"}, "created_at": 1716584567.4219031, "relation_name": "`xapi`.`subsection_problem_engagement`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        schema=env_var(\"ASPECTS_XAPI_DATABASE\", \"xapi\"),\n        engine=get_engine(\"ReplacingMergeTree()\"),\n        primary_key=\"(org, course_key)\",\n        order_by=\"(org, course_key, subsection_block_id, actor_id)\",\n    )\n}}\n\nwith\n    responses as (\n        select\n            emission_time,\n            org,\n            course_key,\n            object_id,\n            problem_id,\n            actor_id,\n            responses,\n            success,\n            attempts,\n            interaction_type\n        from {{ ref(\"problem_events\") }}\n        where verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated'\n    ),\n    fact_problem_responses as (\n        select\n            responses.emission_time as emission_time,\n            responses.org as org,\n            responses.course_key as course_key,\n            blocks.course_name as course_name,\n            responses.problem_id as problem_id,\n            blocks.block_name as problem_name,\n            blocks.display_name_with_location as problem_name_with_location,\n            {{ a_tag(\"responses.object_id\", \"blocks.block_name\") }} as problem_link,\n            blocks.graded as graded,\n            course_order as course_order,\n            responses.actor_id as actor_id,\n            responses.responses as responses,\n            responses.success as success,\n            responses.attempts as attempts,\n            responses.interaction_type as interaction_type\n        from responses\n        join\n            {{ ref(\"dim_course_blocks\") }} blocks\n            on (\n                responses.course_key = blocks.course_key\n                and responses.problem_id = blocks.block_id\n            )\n        group by\n            -- multi-part questions include an extra record for the response to the\n            -- first\n            -- part of the question. this group by clause eliminates the duplicate\n            -- record\n            emission_time,\n            org,\n            course_key,\n            course_name,\n            problem_id,\n            problem_name,\n            problem_name_with_location,\n            problem_link,\n            actor_id,\n            responses,\n            success,\n            attempts,\n            course_order,\n            graded,\n            interaction_type\n    ),\n    attempted_subsection_problems as (\n        select distinct\n            date(emission_time) as attempted_on,\n            org,\n            course_key,\n            {{ section_from_display(\"problem_name_with_location\") }} as section_number,\n            {{ subsection_from_display(\"problem_name_with_location\") }}\n            as subsection_number,\n            course_order as course_order,\n            graded,\n            actor_id,\n            problem_id\n        from fact_problem_responses\n    ),\n    fact_problem_engagement_per_subsection as (\n        select\n            attempts.org as org,\n            attempts.course_key as course_key,\n            problems.section_with_name as section_with_name,\n            problems.subsection_with_name as subsection_with_name,\n            problems.item_count as item_count,\n            attempts.actor_id as actor_id,\n            attempts.problem_id as problem_id,\n            problems.subsection_block_id as subsection_block_id\n        from attempted_subsection_problems attempts\n        join\n            {{ ref(\"int_problems_per_subsection\") }} problems\n            on (\n                attempts.org = problems.org\n                and attempts.course_key = problems.course_key\n                and attempts.section_number = problems.section_number\n                and attempts.subsection_number = problems.subsection_number\n            )\n    ),\n    subsection_counts as (\n        select\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            count(distinct problem_id) as problems_attempted,\n            case\n                when problems_attempted = 0\n                then 'No problems attempted yet'\n                when problems_attempted = item_count\n                then 'All problems attempted'\n                else 'At least one problem attempted'\n            end as engagement_level,\n            subsection_block_id\n        from fact_problem_engagement_per_subsection\n        group by\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            subsection_block_id\n    )\n\nselect org, course_key, actor_id, subsection_block_id, engagement_level\nfrom subsection_counts", "language": "sql", "refs": [{"name": "problem_events", "package": null, "version": null}, {"name": "dim_course_blocks", "package": null, "version": null}, {"name": "int_problems_per_subsection", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine", "macro.aspects.a_tag", "macro.aspects.section_from_display", "macro.aspects.subsection_from_display"], "nodes": ["model.aspects.problem_events", "model.aspects.dim_course_blocks", "model.aspects.int_problems_per_subsection"]}, "compiled_path": "target/compiled/aspects/models/problems/subsection_problem_engagement.sql", "compiled": true, "compiled_code": "\n\nwith\n    responses as (\n        select\n            emission_time,\n            org,\n            course_key,\n            object_id,\n            problem_id,\n            actor_id,\n            responses,\n            success,\n            attempts,\n            interaction_type\n        from `xapi`.`problem_events`\n        where verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated'\n    ),\n    fact_problem_responses as (\n        select\n            responses.emission_time as emission_time,\n            responses.org as org,\n            responses.course_key as course_key,\n            blocks.course_name as course_name,\n            responses.problem_id as problem_id,\n            blocks.block_name as problem_name,\n            blocks.display_name_with_location as problem_name_with_location,\n            \n    concat(\n        '<a href=\"', responses.object_id, '\" target=\"_blank\">', blocks.block_name, '</a>'\n    )\n as problem_link,\n            blocks.graded as graded,\n            course_order as course_order,\n            responses.actor_id as actor_id,\n            responses.responses as responses,\n            responses.success as success,\n            responses.attempts as attempts,\n            responses.interaction_type as interaction_type\n        from responses\n        join\n            `xapi`.`dim_course_blocks` blocks\n            on (\n                responses.course_key = blocks.course_key\n                and responses.problem_id = blocks.block_id\n            )\n        group by\n            -- multi-part questions include an extra record for the response to the\n            -- first\n            -- part of the question. this group by clause eliminates the duplicate\n            -- record\n            emission_time,\n            org,\n            course_key,\n            course_name,\n            problem_id,\n            problem_name,\n            problem_name_with_location,\n            problem_link,\n            actor_id,\n            responses,\n            success,\n            attempts,\n            course_order,\n            graded,\n            interaction_type\n    ),\n    attempted_subsection_problems as (\n        select distinct\n            date(emission_time) as attempted_on,\n            org,\n            course_key,\n            \n    concat(\n        splitByString(\n            ':', splitByString(' - ', problem_name_with_location)[1], 1\n        )[1],\n        ':0:0'\n    )\n as section_number,\n            \n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', problem_name_with_location)[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n\n            as subsection_number,\n            course_order as course_order,\n            graded,\n            actor_id,\n            problem_id\n        from fact_problem_responses\n    ),\n    fact_problem_engagement_per_subsection as (\n        select\n            attempts.org as org,\n            attempts.course_key as course_key,\n            problems.section_with_name as section_with_name,\n            problems.subsection_with_name as subsection_with_name,\n            problems.item_count as item_count,\n            attempts.actor_id as actor_id,\n            attempts.problem_id as problem_id,\n            problems.subsection_block_id as subsection_block_id\n        from attempted_subsection_problems attempts\n        join\n            `xapi`.`int_problems_per_subsection` problems\n            on (\n                attempts.org = problems.org\n                and attempts.course_key = problems.course_key\n                and attempts.section_number = problems.section_number\n                and attempts.subsection_number = problems.subsection_number\n            )\n    ),\n    subsection_counts as (\n        select\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            count(distinct problem_id) as problems_attempted,\n            case\n                when problems_attempted = 0\n                then 'No problems attempted yet'\n                when problems_attempted = item_count\n                then 'All problems attempted'\n                else 'At least one problem attempted'\n            end as engagement_level,\n            subsection_block_id\n        from fact_problem_engagement_per_subsection\n        group by\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            subsection_block_id\n    )\n\nselect org, course_key, actor_id, subsection_block_id, engagement_level\nfrom subsection_counts", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.int_problems_per_subsection": {"database": "", "schema": "xapi", "name": "int_problems_per_subsection", "resource_type": "model", "package_name": "aspects", "path": "problems/int_problems_per_subsection.sql", "original_file_path": "models/problems/int_problems_per_subsection.sql", "unique_id": "model.aspects.int_problems_per_subsection", "fqn": ["aspects", "problems", "int_problems_per_subsection"], "alias": "int_problems_per_subsection", "checksum": {"name": "sha256", "checksum": "8ef5aa318ccd2200d1cc3ecd3332004099cdb2050f6d8ff83e98124fdab1ee31"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A dimension table with the number of problems per subsection", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_number": {"name": "section_number", "description": "The location of this section in the course, represented as section:0:0", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_with_name": {"name": "section_with_name", "description": "The name of the section this subsection belongs to, with section_number prepended", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "subsection_number": {"name": "subsection_number", "description": "The location of this subsection in the course, represented as section:subsection:0", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "subsection_with_name": {"name": "subsection_with_name", "description": "The name of the subsection, with section_number prepended", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "graded": {"name": "graded", "description": "Whether this subsection block is graded", "meta": {}, "data_type": "bool", "constraints": [], "quote": null, "tags": []}, "item_count": {"name": "item_count", "description": "The number of problems in this subsection", "meta": {}, "data_type": "uint64", "constraints": [], "quote": null, "tags": []}, "course_order": {"name": "course_order", "description": "The sort order of this block in the course across all course blocks", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": []}, "subsection_block_id": {"name": "subsection_block_id", "description": "The unique identifier for the subsection block", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_block_id": {"name": "section_block_id", "description": "The unique identifier for the section block", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/problems/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.4120293, "relation_name": "`xapi`.`int_problems_per_subsection`", "raw_code": "select * from ({{ items_per_subsection(\"%@problem+block@%\") }})", "language": "sql", "refs": [{"name": "dim_course_blocks", "package": null, "version": null}, {"name": "dim_course_blocks", "package": null, "version": null}, {"name": "dim_course_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.items_per_subsection"], "nodes": ["model.aspects.dim_course_blocks"]}, "compiled_path": "target/compiled/aspects/models/problems/int_problems_per_subsection.sql", "compiled": true, "compiled_code": "select * from (\n    with\n        items_per_subsection as (\n            select\n                org,\n                course_key,\n                section_number,\n                subsection_number,\n                course_order,\n                graded,\n                count(*) as item_count\n            from `xapi`.`dim_course_blocks`\n            where block_id like '%@problem+block@%'\n            group by\n                org, course_key, section_number, subsection_number, course_order, graded\n        )\n\n    select\n        ips.org as org,\n        ips.course_key as course_key,\n        ips.section_number as section_number,\n        section_blocks.display_name_with_location as section_with_name,\n        ips.subsection_number as subsection_number,\n        subsection_blocks.display_name_with_location as subsection_with_name,\n        ips.course_order as course_order,\n        ips.graded as graded,\n        ips.item_count as item_count,\n        subsection_blocks.block_id as subsection_block_id,\n        section_blocks.block_id as section_block_id\n    from items_per_subsection ips\n    left join\n        `xapi`.`dim_course_blocks` section_blocks\n        on (\n            ips.section_number = section_blocks.hierarchy_location\n            and ips.org = section_blocks.org\n            and ips.course_key = section_blocks.course_key\n            and section_blocks.block_id like '%@chapter+block@%'\n        )\n    left join\n        `xapi`.`dim_course_blocks` subsection_blocks\n        on (\n            ips.subsection_number = subsection_blocks.hierarchy_location\n            and ips.org = subsection_blocks.org\n            and ips.course_key = subsection_blocks.course_key\n            and subsection_blocks.block_id like '%@sequential+block@%'\n        )\n)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.responses": {"database": "", "schema": "xapi", "name": "responses", "resource_type": "model", "package_name": "aspects", "path": "problems/responses.sql", "original_file_path": "models/problems/responses.sql", "unique_id": "model.aspects.responses", "fqn": ["aspects", "problems", "responses"], "alias": "responses", "checksum": {"name": "sha256", "checksum": "740ef52e23ba2baf158991a2637f2f6636cc82690de11ed734f8cbd536a411f3"}, "config": {"enabled": true, "alias": null, "schema": "xapi", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    ReplacingMergeTree()", "order_by": "(org, course_key, problem_id, actor_id)", "partition_by": "toYYYYMM(emission_time)", "ttl": "", "primary_key": "(org, course_key, problem_id)"}, "tags": [], "description": "A record per course per problem per learner with their last attempt and first success", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "problem_id": {"name": "problem_id", "description": "The problem's unique identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "first_success_at": {"name": "first_success_at", "description": "The timestamp of the first successful attempt", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "last_attempt_at": {"name": "last_attempt_at", "description": "The timestamp of the last attempt", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "emission_time": {"name": "emission_time", "description": "The timestamp of the last attempt or the first successful attempt", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/problems/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "schema": "xapi", "engine": "\n    ReplacingMergeTree()", "primary_key": "(org, course_key, problem_id)", "order_by": "(org, course_key, problem_id, actor_id)", "partition_by": "toYYYYMM(emission_time)", "ttl": ""}, "created_at": 1716584567.4197648, "relation_name": "`xapi`.`responses`", "raw_code": "-- select one record per (learner, problem, course, org) tuple\n-- contains either the first successful attempt\n-- or the most recent unsuccessful attempt\n-- find the timestamp of the earliest successful response\n-- this will be used to pick the xAPI event corresponding to that submission\n{{\n    config(\n        materialized=\"materialized_view\",\n        schema=env_var(\"ASPECTS_XAPI_DATABASE\", \"xapi\"),\n        engine=get_engine(\"ReplacingMergeTree()\"),\n        primary_key=\"(org, course_key, problem_id)\",\n        order_by=\"(org, course_key, problem_id, actor_id)\",\n        partition_by=\"toYYYYMM(emission_time)\",\n        ttl=env_var(\"ASPECTS_DATA_TTL_EXPRESSION\", \"\"),\n    )\n}}\n\nwith\n    responses as (\n        select emission_time, org, course_key, object_id, problem_id, actor_id, success\n        from {{ ref(\"problem_events\") }}\n        where verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated'\n    ),\n    response_status as (\n        select\n            org,\n            course_key,\n            problem_id,\n            actor_id,\n            MIN(case when success then emission_time else NULL end) as first_success_at,\n            MAX(emission_time) as last_attempt_at\n        from responses\n        group by org, course_key, problem_id, actor_id\n    )\nselect\n    org,\n    course_key,\n    problem_id,\n    actor_id,\n    first_success_at,\n    last_attempt_at,\n    coalesce(first_success_at, last_attempt_at) as emission_time\nfrom response_status", "language": "sql", "refs": [{"name": "problem_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine"], "nodes": ["model.aspects.problem_events"]}, "compiled_path": "target/compiled/aspects/models/problems/responses.sql", "compiled": true, "compiled_code": "-- select one record per (learner, problem, course, org) tuple\n-- contains either the first successful attempt\n-- or the most recent unsuccessful attempt\n-- find the timestamp of the earliest successful response\n-- this will be used to pick the xAPI event corresponding to that submission\n\n\nwith\n    responses as (\n        select emission_time, org, course_key, object_id, problem_id, actor_id, success\n        from `xapi`.`problem_events`\n        where verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated'\n    ),\n    response_status as (\n        select\n            org,\n            course_key,\n            problem_id,\n            actor_id,\n            MIN(case when success then emission_time else NULL end) as first_success_at,\n            MAX(emission_time) as last_attempt_at\n        from responses\n        group by org, course_key, problem_id, actor_id\n    )\nselect\n    org,\n    course_key,\n    problem_id,\n    actor_id,\n    first_success_at,\n    last_attempt_at,\n    coalesce(first_success_at, last_attempt_at) as emission_time\nfrom response_status", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_problem_engagement_per_subsection": {"database": "", "schema": "xapi", "name": "fact_problem_engagement_per_subsection", "resource_type": "model", "package_name": "aspects", "path": "problems/fact_problem_engagement_per_subsection.sql", "original_file_path": "models/problems/fact_problem_engagement_per_subsection.sql", "unique_id": "model.aspects.fact_problem_engagement_per_subsection", "fqn": ["aspects", "problems", "fact_problem_engagement_per_subsection"], "alias": "fact_problem_engagement_per_subsection", "checksum": {"name": "sha256", "checksum": "2baca9b3a243f08fe4a27fcb25703bf2a24fa6924379d70a804a298906c000fb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A dataset with one record representing a problem attempted by a learner and the section and subsection that problem belongs to", "columns": {"attempted_on": {"name": "attempted_on", "description": "The date on which the problem was attempted", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the problem belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_with_name": {"name": "section_with_name", "description": "The name of the section this subsection belongs to, with section_number prepended", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "subsection_with_name": {"name": "subsection_with_name", "description": "The name of the subsection, with section_number prepended", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "item_count": {"name": "item_count", "description": "The number of problems in this subsection", "meta": {}, "data_type": "uint64", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "problem_id": {"name": "problem_id", "description": "The xAPI object identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "graded": {"name": "graded", "description": "Whether the block is graded", "meta": {}, "data_type": "bool", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_order": {"name": "course_order", "description": "The sort order of this block in the course across all course blocks", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/problems/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.414172, "relation_name": "`xapi`.`fact_problem_engagement_per_subsection`", "raw_code": "with\n    attempted_subsection_problems as (\n        select distinct\n            date(emission_time) as attempted_on,\n            org,\n            course_key,\n            course_run,\n            {{ section_from_display(\"problem_name_with_location\") }} as section_number,\n            {{ subsection_from_display(\"problem_name_with_location\") }}\n            as subsection_number,\n            course_order as course_order,\n            graded,\n            actor_id,\n            problem_id,\n            username,\n            name,\n            email\n        from {{ ref(\"fact_problem_responses\") }}\n    )\n\nselect\n    attempts.org as org,\n    attempts.course_key as course_key,\n    attempts.course_run as course_run,\n    problems.section_with_name as section_with_name,\n    problems.subsection_with_name as subsection_with_name,\n    problems.item_count as item_count,\n    attempts.actor_id as actor_id,\n    attempts.problem_id as problem_id,\n    attempts.username as username,\n    attempts.name as name,\n    attempts.email as email\nfrom attempted_subsection_problems attempts\njoin\n    {{ ref(\"int_problems_per_subsection\") }} problems\n    on (\n        attempts.org = problems.org\n        and attempts.course_key = problems.course_key\n        and attempts.section_number = problems.section_number\n        and attempts.subsection_number = problems.subsection_number\n    )", "language": "sql", "refs": [{"name": "fact_problem_responses", "package": null, "version": null}, {"name": "int_problems_per_subsection", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.section_from_display", "macro.aspects.subsection_from_display"], "nodes": ["model.aspects.fact_problem_responses", "model.aspects.int_problems_per_subsection"]}, "compiled_path": "target/compiled/aspects/models/problems/fact_problem_engagement_per_subsection.sql", "compiled": true, "compiled_code": "with\n    attempted_subsection_problems as (\n        select distinct\n            date(emission_time) as attempted_on,\n            org,\n            course_key,\n            course_run,\n            \n    concat(\n        splitByString(\n            ':', splitByString(' - ', problem_name_with_location)[1], 1\n        )[1],\n        ':0:0'\n    )\n as section_number,\n            \n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', problem_name_with_location)[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n\n            as subsection_number,\n            course_order as course_order,\n            graded,\n            actor_id,\n            problem_id,\n            username,\n            name,\n            email\n        from `xapi`.`fact_problem_responses`\n    )\n\nselect\n    attempts.org as org,\n    attempts.course_key as course_key,\n    attempts.course_run as course_run,\n    problems.section_with_name as section_with_name,\n    problems.subsection_with_name as subsection_with_name,\n    problems.item_count as item_count,\n    attempts.actor_id as actor_id,\n    attempts.problem_id as problem_id,\n    attempts.username as username,\n    attempts.name as name,\n    attempts.email as email\nfrom attempted_subsection_problems attempts\njoin\n    `xapi`.`int_problems_per_subsection` problems\n    on (\n        attempts.org = problems.org\n        and attempts.course_key = problems.course_key\n        and attempts.section_number = problems.section_number\n        and attempts.subsection_number = problems.subsection_number\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_problem_responses": {"database": "", "schema": "xapi", "name": "fact_problem_responses", "resource_type": "model", "package_name": "aspects", "path": "problems/fact_problem_responses.sql", "original_file_path": "models/problems/fact_problem_responses.sql", "unique_id": "model.aspects.fact_problem_responses", "fqn": ["aspects", "problems", "fact_problem_responses"], "alias": "fact_problem_responses", "checksum": {"name": "sha256", "checksum": "eb6b76a7274cba5c47c75273374aa21e690b6c6f9ca335dd3db360c827f18b2a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "One record for each submitted response to a problem", "columns": {"emission_time": {"name": "emission_time", "description": "Timestamp, to the second, of when this event was emitted", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "problem_id": {"name": "problem_id", "description": "The problem's unique identifier", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "problem_name": {"name": "problem_name", "description": "The problem's name", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "problem_name_with_location": {"name": "problem_name_with_location", "description": "The problem's display name with section, subsection, and unit prepended to the name. This provides additional context when looking at problem names and can help data consumers understand which problem they are analyzing", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "problem_link": {"name": "problem_link", "description": "An anchor tag with a link to the problem", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "graded": {"name": "graded", "description": "Boolean indicating this block is graded", "meta": {}, "data_type": "bool", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "responses": {"name": "responses", "description": "The responses for this submission. If a problem has multiple parts, values for all parts will be in this field", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "success": {"name": "success", "description": "Boolean indicating whether the responses were correct", "meta": {}, "data_type": "Bool", "constraints": [], "quote": null, "tags": []}, "attempts": {"name": "attempts", "description": "Number indicating which attempt this was", "meta": {}, "data_type": "Int16", "constraints": [], "quote": null, "tags": []}, "interaction_type": {"name": "interaction_type", "description": "The type of interaction - e.g. multiple choice", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_order": {"name": "course_order", "description": "The sort order of this block in the course across all course blocks", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/problems/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.4027658, "relation_name": "`xapi`.`fact_problem_responses`", "raw_code": "with\n    responses as (\n        select\n            emission_time,\n            org,\n            course_key,\n            object_id,\n            problem_id,\n            actor_id,\n            responses,\n            success,\n            attempts,\n            interaction_type\n        from {{ ref(\"problem_events\") }}\n        where verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated'\n    )\n\nselect\n    responses.emission_time as emission_time,\n    responses.org as org,\n    responses.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    responses.problem_id as problem_id,\n    blocks.block_name as problem_name,\n    blocks.display_name_with_location as problem_name_with_location,\n    {{ a_tag(\"responses.object_id\", \"blocks.block_name\") }} as problem_link,\n    blocks.graded as graded,\n    course_order as course_order,\n    responses.actor_id as actor_id,\n    responses.responses as responses,\n    responses.success as success,\n    responses.attempts as attempts,\n    responses.interaction_type as interaction_type,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom responses\njoin\n    {{ ref(\"dim_course_blocks\") }} blocks\n    on (\n        responses.course_key = blocks.course_key\n        and responses.problem_id = blocks.block_id\n    )\nleft outer join\n    {{ ref(\"dim_user_pii\") }} users on toUUID(actor_id) = users.external_user_id\ngroup by\n    -- multi-part questions include an extra record for the response to the first\n    -- part of the question. this group by clause eliminates the duplicate record\n    emission_time,\n    org,\n    course_key,\n    course_name,\n    course_run,\n    problem_id,\n    problem_name,\n    problem_name_with_location,\n    problem_link,\n    actor_id,\n    responses,\n    success,\n    attempts,\n    course_order,\n    graded,\n    interaction_type,\n    username,\n    name,\n    email", "language": "sql", "refs": [{"name": "problem_events", "package": null, "version": null}, {"name": "dim_course_blocks", "package": null, "version": null}, {"name": "dim_user_pii", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.a_tag"], "nodes": ["model.aspects.problem_events", "model.aspects.dim_course_blocks", "model.aspects.dim_user_pii"]}, "compiled_path": "target/compiled/aspects/models/problems/fact_problem_responses.sql", "compiled": true, "compiled_code": "with\n    responses as (\n        select\n            emission_time,\n            org,\n            course_key,\n            object_id,\n            problem_id,\n            actor_id,\n            responses,\n            success,\n            attempts,\n            interaction_type\n        from `xapi`.`problem_events`\n        where verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated'\n    )\n\nselect\n    responses.emission_time as emission_time,\n    responses.org as org,\n    responses.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    responses.problem_id as problem_id,\n    blocks.block_name as problem_name,\n    blocks.display_name_with_location as problem_name_with_location,\n    \n    concat(\n        '<a href=\"', responses.object_id, '\" target=\"_blank\">', blocks.block_name, '</a>'\n    )\n as problem_link,\n    blocks.graded as graded,\n    course_order as course_order,\n    responses.actor_id as actor_id,\n    responses.responses as responses,\n    responses.success as success,\n    responses.attempts as attempts,\n    responses.interaction_type as interaction_type,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom responses\njoin\n    `xapi`.`dim_course_blocks` blocks\n    on (\n        responses.course_key = blocks.course_key\n        and responses.problem_id = blocks.block_id\n    )\nleft outer join\n    `xapi`.`dim_user_pii` users on toUUID(actor_id) = users.external_user_id\ngroup by\n    -- multi-part questions include an extra record for the response to the first\n    -- part of the question. this group by clause eliminates the duplicate record\n    emission_time,\n    org,\n    course_key,\n    course_name,\n    course_run,\n    problem_id,\n    problem_name,\n    problem_name_with_location,\n    problem_link,\n    actor_id,\n    responses,\n    success,\n    attempts,\n    course_order,\n    graded,\n    interaction_type,\n    username,\n    name,\n    email", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.int_problem_hints": {"database": "", "schema": "xapi", "name": "int_problem_hints", "resource_type": "model", "package_name": "aspects", "path": "problems/int_problem_hints.sql", "original_file_path": "models/problems/int_problem_hints.sql", "unique_id": "model.aspects.int_problem_hints", "fqn": ["aspects", "problems", "int_problem_hints"], "alias": "int_problem_hints", "checksum": {"name": "sha256", "checksum": "4c77d1d17128bfe3f033aedd32977c54f03fb141af58589715fd1efb1b7dec25"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Internal table for problem hints", "columns": {"emission_time": {"name": "emission_time", "description": "Timestamp, to the second, of when this event was emitted", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "problem_id": {"name": "problem_id", "description": "The problem's unique identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "problem_name": {"name": "problem_name", "description": "The problem's name", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "problem_name_with_location": {"name": "problem_name_with_location", "description": "The problem's display name with section, subsection, and unit prepended to the name. This provides additional context when looking at problem names and can help data consumers understand which problem they are analyzing", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "help_type": {"name": "help_type", "description": "The type of help requested", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_order": {"name": "course_order", "description": "The sort order of this block in the course across all course blocks", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/problems/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.4043767, "relation_name": "`xapi`.`int_problem_hints`", "raw_code": "with\n    hints as (\n        select\n            emission_time,\n            org,\n            course_key,\n            problem_id,\n            actor_id,\n            case\n                when object_id like '%/hint%'\n                then 'hint'\n                when object_id like '%/answer%'\n                then 'answer'\n                else 'N/A'\n            end as help_type\n        from {{ ref(\"problem_events\") }}\n        where verb_id = 'http://adlnet.gov/expapi/verbs/asked'\n    )\n\nselect\n    hints.emission_time as emission_time,\n    hints.org as org,\n    hints.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    hints.problem_id as problem_id,\n    blocks.block_name as problem_name,\n    blocks.display_name_with_location as problem_name_with_location,\n    blocks.course_order as course_order,\n    hints.actor_id as actor_id,\n    hints.help_type as help_type\nfrom hints\njoin\n    {{ ref(\"dim_course_blocks\") }} blocks\n    on (hints.course_key = blocks.course_key and hints.problem_id = blocks.block_id)", "language": "sql", "refs": [{"name": "problem_events", "package": null, "version": null}, {"name": "dim_course_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.aspects.problem_events", "model.aspects.dim_course_blocks"]}, "compiled_path": "target/compiled/aspects/models/problems/int_problem_hints.sql", "compiled": true, "compiled_code": "with\n    hints as (\n        select\n            emission_time,\n            org,\n            course_key,\n            problem_id,\n            actor_id,\n            case\n                when object_id like '%/hint%'\n                then 'hint'\n                when object_id like '%/answer%'\n                then 'answer'\n                else 'N/A'\n            end as help_type\n        from `xapi`.`problem_events`\n        where verb_id = 'http://adlnet.gov/expapi/verbs/asked'\n    )\n\nselect\n    hints.emission_time as emission_time,\n    hints.org as org,\n    hints.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    hints.problem_id as problem_id,\n    blocks.block_name as problem_name,\n    blocks.display_name_with_location as problem_name_with_location,\n    blocks.course_order as course_order,\n    hints.actor_id as actor_id,\n    hints.help_type as help_type\nfrom hints\njoin\n    `xapi`.`dim_course_blocks` blocks\n    on (hints.course_key = blocks.course_key and hints.problem_id = blocks.block_id)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_problem_engagement": {"database": "", "schema": "xapi", "name": "fact_problem_engagement", "resource_type": "model", "package_name": "aspects", "path": "problems/fact_problem_engagement.sql", "original_file_path": "models/problems/fact_problem_engagement.sql", "unique_id": "model.aspects.fact_problem_engagement", "fqn": ["aspects", "problems", "fact_problem_engagement"], "alias": "fact_problem_engagement", "checksum": {"name": "sha256", "checksum": "d04c3cd8ffcdc8140ae70796519100fc3d13fbf334c70efd1b3f9f610a9d4665"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_subsection_name": {"name": "section_subsection_name", "description": "The name of the section this subsection belongs to, with section_number prepended", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "content_level": {"name": "content_level", "description": "The name of the subsection, with section_number prepended", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_subsection_problem_engagement": {"name": "section_subsection_problem_engagement", "description": "The engagement level of the learner with the section/subsection", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the learner", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the learner", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the learner", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/problems/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.4163692, "relation_name": "`xapi`.`fact_problem_engagement`", "raw_code": "with\n    subsection_engagement as (\n        select\n            org,\n            course_key,\n            'subsection' as content_level,\n            actor_id,\n            subsection_block_id as block_id,\n            engagement_level as section_subsection_problem_engagement\n        from {{ ref(\"subsection_problem_engagement\") }}\n    ),\n    section_engagement as (\n        select\n            org,\n            course_key,\n            'section' as content_level,\n            actor_id,\n            section_block_id as block_id,\n            engagement_level as section_subsection_problem_engagement\n        from {{ ref(\"section_problem_engagement\") }}\n    ),\n    problem_engagement as (\n        select *\n        from subsection_engagement\n        union all\n        select *\n        from section_engagement\n    )\nselect\n    pe.org as org,\n    pe.course_key as course_key,\n    course_blocks.course_run as course_run,\n    course_blocks.display_name_with_location as section_subsection_name,\n    pe.content_level as content_level,\n    pe.actor_id as actor_id,\n    pe.section_subsection_problem_engagement as section_subsection_problem_engagement,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom problem_engagement pe\njoin\n    {{ ref(\"dim_course_blocks\") }} course_blocks\n    on (\n        pe.org = course_blocks.org\n        and pe.course_key = course_blocks.course_key\n        and pe.block_id = course_blocks.block_id\n    )\nleft outer join\n    {{ ref(\"dim_user_pii\") }} users on toUUID(pe.actor_id) = users.external_user_id", "language": "sql", "refs": [{"name": "subsection_problem_engagement", "package": null, "version": null}, {"name": "section_problem_engagement", "package": null, "version": null}, {"name": "dim_course_blocks", "package": null, "version": null}, {"name": "dim_user_pii", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.aspects.subsection_problem_engagement", "model.aspects.section_problem_engagement", "model.aspects.dim_course_blocks", "model.aspects.dim_user_pii"]}, "compiled_path": "target/compiled/aspects/models/problems/fact_problem_engagement.sql", "compiled": true, "compiled_code": "with\n    subsection_engagement as (\n        select\n            org,\n            course_key,\n            'subsection' as content_level,\n            actor_id,\n            subsection_block_id as block_id,\n            engagement_level as section_subsection_problem_engagement\n        from `xapi`.`subsection_problem_engagement`\n    ),\n    section_engagement as (\n        select\n            org,\n            course_key,\n            'section' as content_level,\n            actor_id,\n            section_block_id as block_id,\n            engagement_level as section_subsection_problem_engagement\n        from `xapi`.`section_problem_engagement`\n    ),\n    problem_engagement as (\n        select *\n        from subsection_engagement\n        union all\n        select *\n        from section_engagement\n    )\nselect\n    pe.org as org,\n    pe.course_key as course_key,\n    course_blocks.course_run as course_run,\n    course_blocks.display_name_with_location as section_subsection_name,\n    pe.content_level as content_level,\n    pe.actor_id as actor_id,\n    pe.section_subsection_problem_engagement as section_subsection_problem_engagement,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom problem_engagement pe\njoin\n    `xapi`.`dim_course_blocks` course_blocks\n    on (\n        pe.org = course_blocks.org\n        and pe.course_key = course_blocks.course_key\n        and pe.block_id = course_blocks.block_id\n    )\nleft outer join\n    `xapi`.`dim_user_pii` users on toUUID(pe.actor_id) = users.external_user_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_forum_interactions": {"database": "", "schema": "xapi", "name": "fact_forum_interactions", "resource_type": "model", "package_name": "aspects", "path": "forum/fact_forum_interactions.sql", "original_file_path": "models/forum/fact_forum_interactions.sql", "unique_id": "model.aspects.fact_forum_interactions", "fqn": ["aspects", "forum", "fact_forum_interactions"], "alias": "fact_forum_interactions", "checksum": {"name": "sha256", "checksum": "8b040a2d35b25e1fe5d4c0241e04a495c49720e0969766cfe829e04ca4a64d74"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "One record per forum interaction", "columns": {"event_id": {"name": "event_id", "description": "The unique identifier for the event", "meta": {}, "data_type": "UUID", "constraints": [], "quote": null, "tags": []}, "emission_time": {"name": "emission_time", "description": "Timestamp, to the second, of when this event was emitted", "meta": {}, "data_type": "DateTime64(3)", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "object_id": {"name": "object_id", "description": "The xAPI object identifier", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "verb_id": {"name": "verb_id", "description": "The xAPI verb identifier", "meta": {}, "data_type": "LowCardinality(String)", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/forum/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.445688, "relation_name": "`xapi`.`fact_forum_interactions`", "raw_code": "select\n    forum.event_id as event_id,\n    forum.emission_time as emission_time,\n    forum.org as org,\n    forum.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    forum.object_id as object_id,\n    forum.actor_id as actor_id,\n    forum.verb_id as verb_id,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom {{ ref(\"forum_events\") }} forum\njoin {{ ref(\"course_names\") }} courses on (forum.course_key = courses.course_key)\nleft outer join\n    {{ ref(\"dim_user_pii\") }} users on toUUID(actor_id) = users.external_user_id", "language": "sql", "refs": [{"name": "forum_events", "package": null, "version": null}, {"name": "course_names", "package": null, "version": null}, {"name": "dim_user_pii", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.aspects.forum_events", "model.aspects.course_names", "model.aspects.dim_user_pii"]}, "compiled_path": "target/compiled/aspects/models/forum/fact_forum_interactions.sql", "compiled": true, "compiled_code": "select\n    forum.event_id as event_id,\n    forum.emission_time as emission_time,\n    forum.org as org,\n    forum.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    forum.object_id as object_id,\n    forum.actor_id as actor_id,\n    forum.verb_id as verb_id,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom `xapi`.`forum_events` forum\njoin `xapi`.`course_names` courses on (forum.course_key = courses.course_key)\nleft outer join\n    `xapi`.`dim_user_pii` users on toUUID(actor_id) = users.external_user_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.forum_events": {"database": "", "schema": "xapi", "name": "forum_events", "resource_type": "model", "package_name": "aspects", "path": "forum/forum_events.sql", "original_file_path": "models/forum/forum_events.sql", "unique_id": "model.aspects.forum_events", "fqn": ["aspects", "forum", "forum_events"], "alias": "forum_events", "checksum": {"name": "sha256", "checksum": "0093a425a5331e9736aa810a1dc14e3e8533c23b656cfeed21efe81ba4637e52"}, "config": {"enabled": true, "alias": null, "schema": "xapi", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    ReplacingMergeTree()", "order_by": "(org, course_key, verb_id, emission_time, actor_id, object_id, event_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": "", "primary_key": "(org, course_key, verb_id)"}, "tags": [], "description": "One record per forum event", "columns": {"event_id": {"name": "event_id", "description": "The unique identifier for the event", "meta": {}, "data_type": "uuid", "constraints": [], "quote": null, "tags": []}, "emission_time": {"name": "emission_time", "description": "The time the event was emitted", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "object_id": {"name": "object_id", "description": "The xAPI object identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "verb_id": {"name": "verb_id", "description": "The xAPI verb identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/forum/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "schema": "xapi", "engine": "\n    ReplacingMergeTree()", "primary_key": "(org, course_key, verb_id)", "order_by": "(org, course_key, verb_id, emission_time, actor_id, object_id, event_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": ""}, "created_at": 1716584567.446731, "relation_name": "`xapi`.`forum_events`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        schema=env_var(\"ASPECTS_XAPI_DATABASE\", \"xapi\"),\n        engine=get_engine(\"ReplacingMergeTree()\"),\n        primary_key=\"(org, course_key, verb_id)\",\n        order_by=\"(org, course_key, verb_id, emission_time, actor_id, object_id, event_id)\",\n        partition_by=\"(toYYYYMM(emission_time))\",\n        ttl=env_var(\"ASPECTS_DATA_TTL_EXPRESSION\", \"\"),\n    )\n}}\n\nselect\n    event_id,\n    CAST(emission_time, 'DateTime') as emission_time,\n    org,\n    splitByString('/', course_id)[-1] as course_key,\n    object_id,\n    actor_id,\n    verb_id\nfrom {{ ref(\"xapi_events_all_parsed\") }}\nwhere\n    JSON_VALUE(event, '$.object.definition.type')\n    = 'http://id.tincanapi.com/activitytype/discussion'", "language": "sql", "refs": [{"name": "xapi_events_all_parsed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine"], "nodes": ["model.aspects.xapi_events_all_parsed"]}, "compiled_path": "target/compiled/aspects/models/forum/forum_events.sql", "compiled": true, "compiled_code": "\n\nselect\n    event_id,\n    CAST(emission_time, 'DateTime') as emission_time,\n    org,\n    splitByString('/', course_id)[-1] as course_key,\n    object_id,\n    actor_id,\n    verb_id\nfrom `xapi`.`xapi_events_all_parsed`\nwhere\n    JSON_VALUE(event, '$.object.definition.type')\n    = 'http://id.tincanapi.com/activitytype/discussion'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.dim_at_risk_learners": {"database": "", "schema": "xapi", "name": "dim_at_risk_learners", "resource_type": "model", "package_name": "aspects", "path": "users/dim_at_risk_learners.sql", "original_file_path": "models/users/dim_at_risk_learners.sql", "unique_id": "model.aspects.dim_at_risk_learners", "fqn": ["aspects", "users", "dim_at_risk_learners"], "alias": "dim_at_risk_learners", "checksum": {"name": "sha256", "checksum": "0d9db40f1d51f38090d674b3f1e0a19504424067713200e40a65535e7e7b0a9a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A record for each learner determined to be at risk of dropping out of a given course", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the user", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the user", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email of the user", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "enrollment_mode": {"name": "enrollment_mode", "description": "The mode of enrollment", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_grade": {"name": "course_grade", "description": "The most recent grade for the learner", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "enrolled_at": {"name": "enrolled_at", "description": "The timestamp, to the second, of the most recent enrollment action for this learner and course.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": []}, "grade_bucket": {"name": "grade_bucket", "description": "A displayable value of grades sorted into 10% buckets. Useful for grouping grades together to show high-level learner performance", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "last_visited": {"name": "last_visited", "description": "The last time the learner visited a page for this course", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/users/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.4523146, "relation_name": "`xapi`.`dim_at_risk_learners`", "raw_code": "with\n    page_visits as (\n        select org, course_key, actor_id, max(emission_time) as last_visited\n        from {{ ref(\"navigation_events\") }}\n        group by org, course_key, actor_id\n    )\n\nselect\n    learners.org as org,\n    learners.course_key as course_key,\n    learners.course_name as course_name,\n    learners.course_run as course_run,\n    learners.actor_id as actor_id,\n    learners.username as username,\n    learners.name as name,\n    learners.email as email,\n    learners.enrollment_mode as enrollment_mode,\n    learners.course_grade as course_grade,\n    learners.enrolled_at as enrolled_at,\n    learners.grade_bucket as grade_bucket,\n    page_visits.last_visited as last_visited\nfrom {{ ref(\"fact_student_status\") }} learners\njoin page_visits using (org, course_key, actor_id)\nwhere\n    approving_state = 'failed'\n    and enrollment_status = 'registered'\n    and page_visits.last_visited < subtractDays(now(), 7)", "language": "sql", "refs": [{"name": "navigation_events", "package": null, "version": null}, {"name": "fact_student_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.aspects.navigation_events", "model.aspects.fact_student_status"]}, "compiled_path": "target/compiled/aspects/models/users/dim_at_risk_learners.sql", "compiled": true, "compiled_code": "with\n    page_visits as (\n        select org, course_key, actor_id, max(emission_time) as last_visited\n        from `xapi`.`navigation_events`\n        group by org, course_key, actor_id\n    )\n\nselect\n    learners.org as org,\n    learners.course_key as course_key,\n    learners.course_name as course_name,\n    learners.course_run as course_run,\n    learners.actor_id as actor_id,\n    learners.username as username,\n    learners.name as name,\n    learners.email as email,\n    learners.enrollment_mode as enrollment_mode,\n    learners.course_grade as course_grade,\n    learners.enrolled_at as enrolled_at,\n    learners.grade_bucket as grade_bucket,\n    page_visits.last_visited as last_visited\nfrom `xapi`.`fact_student_status` learners\njoin page_visits using (org, course_key, actor_id)\nwhere\n    approving_state = 'failed'\n    and enrollment_status = 'registered'\n    and page_visits.last_visited < subtractDays(now(), 7)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.dim_user_pii": {"database": "", "schema": "xapi", "name": "dim_user_pii", "resource_type": "model", "package_name": "aspects", "path": "users/dim_user_pii.sql", "original_file_path": "models/users/dim_user_pii.sql", "unique_id": "model.aspects.dim_user_pii", "fqn": ["aspects", "users", "dim_user_pii"], "alias": "dim_user_pii", "checksum": {"name": "sha256", "checksum": "ff3243c8cf092b7ca0122d07ef2ef5cf937b44af60f7980ce0a29ab2c9e1d224"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A denormalized table of user PII information", "columns": {"external_user_id": {"name": "external_user_id", "description": "The external user id", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the user", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email of the user", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/users/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.4492025, "relation_name": "`xapi`.`dim_user_pii`", "raw_code": "select external_user_id, username, name, email from {{ ref(\"user_pii\") }} user_pii", "language": "sql", "refs": [{"name": "user_pii", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.aspects.user_pii"]}, "compiled_path": "target/compiled/aspects/models/users/dim_user_pii.sql", "compiled": true, "compiled_code": "select external_user_id, username, name, email from `xapi`.`user_pii` user_pii", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.user_pii": {"database": "", "schema": "xapi", "name": "user_pii", "resource_type": "model", "package_name": "aspects", "path": "users/user_pii.sql", "original_file_path": "models/users/user_pii.sql", "unique_id": "model.aspects.user_pii", "fqn": ["aspects", "users", "user_pii"], "alias": "user_pii", "checksum": {"name": "sha256", "checksum": "319960c9b45d5f4d0838e5912a7d6abf1e5387c49cb4c8a3e802ea9a440c40c9"}, "config": {"enabled": true, "alias": null, "schema": "event_sink", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "dictionary", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "fields": [["user_id", "Int32"], ["external_user_id", "UUID"], ["username", "String"], ["name", "String"], ["email", "String"]], "primary_key": "(user_id, external_user_id)", "layout": "COMPLEX_KEY_SPARSE_HASHED()", "lifetime": "120", "source_type": "clickhouse", "connection_overrides": {"host": "localhost"}}, "tags": [], "description": "The user PII table for reports.", "columns": {"user_id": {"name": "user_id", "description": "The user id", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "external_user_id": {"name": "external_user_id", "description": "The external user id", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the user", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the user", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email of the user", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/users/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "dictionary", "schema": "event_sink", "fields": [["user_id", "Int32"], ["external_user_id", "UUID"], ["username", "String"], ["name", "String"], ["email", "String"]], "primary_key": "(user_id, external_user_id)", "layout": "COMPLEX_KEY_SPARSE_HASHED()", "lifetime": "120", "source_type": "clickhouse", "connection_overrides": {"host": "localhost"}}, "created_at": 1716584567.4483833, "relation_name": "`xapi`.`user_pii`", "raw_code": "{{\n    config(\n        materialized=\"dictionary\",\n        schema=env_var(\"ASPECTS_EVENT_SINK_DATABASE\", \"event_sink\"),\n        fields=[\n            (\"user_id\", \"Int32\"),\n            (\"external_user_id\", \"UUID\"),\n            (\"username\", \"String\"),\n            (\"name\", \"String\"),\n            (\"email\", \"String\"),\n        ],\n        primary_key=\"(user_id, external_user_id)\",\n        layout=\"COMPLEX_KEY_SPARSE_HASHED()\",\n        lifetime=env_var(\"ASPECTS_PII_CACHE_LIFETIME\", \"120\"),\n        source_type=\"clickhouse\",\n        connection_overrides={\n            \"host\": \"localhost\",\n        },\n    )\n}}\n\nwith\n    most_recent_user_profile as (\n        select\n            user_id,\n            name,\n            email,\n            ROW_NUMBER() over (\n                partition by user_id order by (id, time_last_dumped) DESC\n            ) as rn\n        from {{ source(\"event_sink\", \"user_profile\") }}\n    )\nselect mrup.user_id as user_id, external_user_id, username, name, email\nfrom {{ source(\"event_sink\", \"external_id\") }} ex\nleft outer join most_recent_user_profile mrup on mrup.user_id = ex.user_id\nwhere mrup.rn = 1", "language": "sql", "refs": [], "sources": [["event_sink", "user_profile"], ["event_sink", "external_id"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.aspects.event_sink.user_profile", "source.aspects.event_sink.external_id"]}, "compiled_path": "target/compiled/aspects/models/users/user_pii.sql", "compiled": true, "compiled_code": "\n\nwith\n    most_recent_user_profile as (\n        select\n            user_id,\n            name,\n            email,\n            ROW_NUMBER() over (\n                partition by user_id order by (id, time_last_dumped) DESC\n            ) as rn\n        from `event_sink`.`user_profile`\n    )\nselect mrup.user_id as user_id, external_user_id, username, name, email\nfrom `event_sink`.`external_id` ex\nleft outer join most_recent_user_profile mrup on mrup.user_id = ex.user_id\nwhere mrup.rn = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.grading_events": {"database": "", "schema": "xapi", "name": "grading_events", "resource_type": "model", "package_name": "aspects", "path": "grading/grading_events.sql", "original_file_path": "models/grading/grading_events.sql", "unique_id": "model.aspects.grading_events", "fqn": ["aspects", "grading", "grading_events"], "alias": "grading_events", "checksum": {"name": "sha256", "checksum": "d32efdcf3eb565523b90252e98069012125694b8c86dc244c9cdab1bddb2804a"}, "config": {"enabled": true, "alias": null, "schema": "xapi", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    ReplacingMergeTree()", "order_by": "(org, course_key, verb_id, emission_time, actor_id, object_id, scaled_score, event_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": "", "primary_key": "(org, course_key, verb_id)"}, "tags": [], "description": "Events related to grading", "columns": {"event_id": {"name": "event_id", "description": "The unique identifier for the event", "meta": {}, "data_type": "uuid", "constraints": [], "quote": null, "tags": []}, "emission_time": {"name": "emission_time", "description": "The time the event was emitted", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "object_id": {"name": "object_id", "description": "The xAPI object identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "verb_id": {"name": "verb_id", "description": "The xAPI verb identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "scaled_score": {"name": "scaled_score", "description": "A ratio between 0 and 1, inclusive, of the learner's grade", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/grading/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "schema": "xapi", "engine": "\n    ReplacingMergeTree()", "primary_key": "(org, course_key, verb_id)", "order_by": "(org, course_key, verb_id, emission_time, actor_id, object_id, scaled_score, event_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": ""}, "created_at": 1716584567.4686975, "relation_name": "`xapi`.`grading_events`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        schema=env_var(\"ASPECTS_XAPI_DATABASE\", \"xapi\"),\n        engine=get_engine(\"ReplacingMergeTree()\"),\n        primary_key=\"(org, course_key, verb_id)\",\n        order_by=\"(org, course_key, verb_id, emission_time, actor_id, object_id, scaled_score, event_id)\",\n        partition_by=\"(toYYYYMM(emission_time))\",\n        ttl=env_var(\"ASPECTS_DATA_TTL_EXPRESSION\", \"\"),\n    )\n}}\n\n\nselect\n    event_id,\n    CAST(emission_time, 'DateTime') as emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] as course_key,\n    org,\n    verb_id,\n    JSONExtractFloat(event, 'result', 'score', 'scaled') as scaled_score\nfrom {{ ref(\"xapi_events_all_parsed\") }}\nwhere\n    verb_id in (\n        'http://id.tincanapi.com/verb/earned',\n        'https://w3id.org/xapi/acrossx/verbs/evaluated'\n    )\n    or (\n        verb_id in (\n            'http://adlnet.gov/expapi/verbs/passed',\n            'http://adlnet.gov/expapi/verbs/failed'\n        )\n        and JSON_VALUE(event::String, '$.object.definition.type')\n        = 'http://adlnet.gov/expapi/activities/course'\n    )", "language": "sql", "refs": [{"name": "xapi_events_all_parsed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine"], "nodes": ["model.aspects.xapi_events_all_parsed"]}, "compiled_path": "target/compiled/aspects/models/grading/grading_events.sql", "compiled": true, "compiled_code": "\n\n\nselect\n    event_id,\n    CAST(emission_time, 'DateTime') as emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] as course_key,\n    org,\n    verb_id,\n    JSONExtractFloat(event, 'result', 'score', 'scaled') as scaled_score\nfrom `xapi`.`xapi_events_all_parsed`\nwhere\n    verb_id in (\n        'http://id.tincanapi.com/verb/earned',\n        'https://w3id.org/xapi/acrossx/verbs/evaluated'\n    )\n    or (\n        verb_id in (\n            'http://adlnet.gov/expapi/verbs/passed',\n            'http://adlnet.gov/expapi/verbs/failed'\n        )\n        and JSON_VALUE(event::String, '$.object.definition.type')\n        = 'http://adlnet.gov/expapi/activities/course'\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_grades": {"database": "", "schema": "xapi", "name": "fact_grades", "resource_type": "model", "package_name": "aspects", "path": "grading/fact_grades.sql", "original_file_path": "models/grading/fact_grades.sql", "unique_id": "model.aspects.fact_grades", "fqn": ["aspects", "grading", "fact_grades"], "alias": "fact_grades", "checksum": {"name": "sha256", "checksum": "2dc043ffe7cf294ac91766f307931efc031763009e723ab87173535904af1c18"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "One record per grading event for courses, subsections, and problems", "columns": {"emission_time": {"name": "emission_time", "description": "Timestamp, to the second, of when this event was emitted", "meta": {}, "data_type": "DateTime64(3)", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "entity_id": {"name": "entity_id", "description": "The block ID or course key for the graded entity", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "entity_name": {"name": "entity_name", "description": "The name of the graded entity (course or block)", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "entity_name_with_location": {"name": "entity_name_with_location", "description": "The entity's display name with section, subsection, and unit prepended to the name. This provides additional context when looking at block names and can help data consumers understand which block they are analyzing", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": []}, "grade_type": {"name": "grade_type", "description": "The type of object graded", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "scaled_score": {"name": "scaled_score", "description": "A ratio between 0 and 1, inclusive, of the learner's grade", "meta": {}, "data_type": "Float32", "constraints": [], "quote": null, "tags": []}, "grade_bucket": {"name": "grade_bucket", "description": "A displayable value of grades sorted into 10% buckets. Useful for grouping grades together to show high-level learner performance", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/grading/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.465457, "relation_name": "`xapi`.`fact_grades`", "raw_code": "with\n    grades as (\n        select\n            emission_time,\n            org,\n            course_key,\n            case\n                when object_id like '%/course/%'\n                then 'course'\n                when object_id like '%@sequential+block@%'\n                then 'subsection'\n                when object_id like '%@problem+block@%'\n                then 'problem'\n            end as grade_type,\n            if(\n                grade_type = 'course',\n                splitByString('/course/', object_id)[-1],\n                splitByString('/xblock/', object_id)[-1]\n            ) as entity_id,\n            actor_id,\n            scaled_score\n        from {{ ref(\"grading_events\") }}\n        where\n            verb_id in (\n                'http://id.tincanapi.com/verb/earned',\n                'https://w3id.org/xapi/acrossx/verbs/evaluated'\n            )\n    )\n\nselect\n    grades.emission_time as emission_time,\n    grades.org as org,\n    grades.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    grades.entity_id as entity_id,\n    if(blocks.block_name != '', blocks.block_name, courses.course_name) as entity_name,\n    if(\n        blocks.block_name != '', blocks.display_name_with_location, null\n    ) as entity_name_with_location,\n    grades.grade_type as grade_type,\n    grades.actor_id as actor_id,\n    grades.scaled_score as scaled_score,\n    {{ get_bucket(\"scaled_score\") }} as grade_bucket,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom grades\njoin {{ ref(\"course_names\") }} courses on grades.course_key = courses.course_key\nleft join {{ ref(\"course_block_names\") }} blocks on grades.entity_id = blocks.location\nleft outer join\n    {{ ref(\"dim_user_pii\") }} users on toUUID(actor_id) = users.external_user_id", "language": "sql", "refs": [{"name": "grading_events", "package": null, "version": null}, {"name": "course_names", "package": null, "version": null}, {"name": "course_block_names", "package": null, "version": null}, {"name": "dim_user_pii", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_bucket"], "nodes": ["model.aspects.grading_events", "model.aspects.course_names", "model.aspects.course_block_names", "model.aspects.dim_user_pii"]}, "compiled_path": "target/compiled/aspects/models/grading/fact_grades.sql", "compiled": true, "compiled_code": "with\n    grades as (\n        select\n            emission_time,\n            org,\n            course_key,\n            case\n                when object_id like '%/course/%'\n                then 'course'\n                when object_id like '%@sequential+block@%'\n                then 'subsection'\n                when object_id like '%@problem+block@%'\n                then 'problem'\n            end as grade_type,\n            if(\n                grade_type = 'course',\n                splitByString('/course/', object_id)[-1],\n                splitByString('/xblock/', object_id)[-1]\n            ) as entity_id,\n            actor_id,\n            scaled_score\n        from `xapi`.`grading_events`\n        where\n            verb_id in (\n                'http://id.tincanapi.com/verb/earned',\n                'https://w3id.org/xapi/acrossx/verbs/evaluated'\n            )\n    )\n\nselect\n    grades.emission_time as emission_time,\n    grades.org as org,\n    grades.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    grades.entity_id as entity_id,\n    if(blocks.block_name != '', blocks.block_name, courses.course_name) as entity_name,\n    if(\n        blocks.block_name != '', blocks.display_name_with_location, null\n    ) as entity_name_with_location,\n    grades.grade_type as grade_type,\n    grades.actor_id as actor_id,\n    grades.scaled_score as scaled_score,\n    case\n        when scaled_score >= 0.9\n        then '90-100%'\n        when scaled_score >= 0.8 and scaled_score < 0.9\n        then '80-89%'\n        when scaled_score >= 0.7 and scaled_score < 0.8\n        then '70-79%'\n        when scaled_score >= 0.6 and scaled_score < 0.7\n        then '60-69%'\n        when scaled_score >= 0.5 and scaled_score < 0.6\n        then '50-59%'\n        when scaled_score >= 0.4 and scaled_score < 0.5\n        then '40-49%'\n        when scaled_score >= 0.3 and scaled_score < 0.4\n        then '30-39%'\n        when scaled_score >= 0.2 and scaled_score < 0.3\n        then '20-29%'\n        when scaled_score >= 0.1 and scaled_score < 0.2\n        then '10-19%'\n        else '0-9%'\n    end as grade_bucket,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom grades\njoin `xapi`.`course_names` courses on grades.course_key = courses.course_key\nleft join `xapi`.`course_block_names` blocks on grades.entity_id = blocks.location\nleft outer join\n    `xapi`.`dim_user_pii` users on toUUID(actor_id) = users.external_user_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_learner_course_grade": {"database": "", "schema": "xapi", "name": "fact_learner_course_grade", "resource_type": "model", "package_name": "aspects", "path": "grading/fact_learner_course_grade.sql", "original_file_path": "models/grading/fact_learner_course_grade.sql", "unique_id": "model.aspects.fact_learner_course_grade", "fqn": ["aspects", "grading", "fact_learner_course_grade"], "alias": "fact_learner_course_grade", "checksum": {"name": "sha256", "checksum": "65bd38f1afb16919483eff0217b13bc2f58d64041c1a5034457d45e461de4340"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    ReplacingMergeTree()", "order_by": "(org, course_key, actor_id)", "primary_key": "(org, course_key, actor_id)"}, "tags": [], "description": "One record per learner per course for the most recent grade", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_grade": {"name": "course_grade", "description": "The most recent grade for the learner", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "emission_time": {"name": "emission_time", "description": "The time the event was emitted", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/grading/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "engine": "\n    ReplacingMergeTree()", "primary_key": "(org, course_key, actor_id)", "order_by": "(org, course_key, actor_id)"}, "created_at": 1716584567.4663541, "relation_name": "`xapi`.`fact_learner_course_grade`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        engine=get_engine(\"ReplacingMergeTree()\"),\n        primary_key=\"(org, course_key, actor_id)\",\n        order_by=\"(org, course_key, actor_id)\",\n    )\n}}\n\nwith\n    ranked_grades as (\n        select\n            emission_time,\n            org,\n            course_key,\n            actor_id,\n            scaled_score as course_grade,\n            row_number() over (\n                partition by org, course_key, actor_id order by emission_time desc\n            ) as rn\n        from {{ ref(\"grading_events\") }}\n        where object_id like '%/course/%'\n    )\n\nselect org, course_key, actor_id, course_grade, emission_time\nfrom ranked_grades\nwhere rn = 1", "language": "sql", "refs": [{"name": "grading_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine"], "nodes": ["model.aspects.grading_events"]}, "compiled_path": "target/compiled/aspects/models/grading/fact_learner_course_grade.sql", "compiled": true, "compiled_code": "\n\nwith\n    ranked_grades as (\n        select\n            emission_time,\n            org,\n            course_key,\n            actor_id,\n            scaled_score as course_grade,\n            row_number() over (\n                partition by org, course_key, actor_id order by emission_time desc\n            ) as rn\n        from `xapi`.`grading_events`\n        where object_id like '%/course/%'\n    )\n\nselect org, course_key, actor_id, course_grade, emission_time\nfrom ranked_grades\nwhere rn = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_student_status": {"database": "", "schema": "xapi", "name": "fact_student_status", "resource_type": "model", "package_name": "aspects", "path": "grading/fact_student_status.sql", "original_file_path": "models/grading/fact_student_status.sql", "unique_id": "model.aspects.fact_student_status", "fqn": ["aspects", "grading", "fact_student_status"], "alias": "fact_student_status", "checksum": {"name": "sha256", "checksum": "023da3128261d2c8d46965e499a67cf962afb6ef1948c78eb8fb19b592c46470"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "One record per learner per course for the most recent grade and enrollment status", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "approving_state": {"name": "approving_state", "description": "The most recent approving state for the learner", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "enrollment_mode": {"name": "enrollment_mode", "description": "The mode of enrollment", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "enrollment_status": {"name": "enrollment_status", "description": "Whether a learner is actively enrolled in a course", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "course_grade": {"name": "course_grade", "description": "The most recent grade for the learner", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "grade_bucket": {"name": "grade_bucket", "description": "A displayable value of grades sorted into 10% buckets. Useful for grouping grades together to show high-level learner performance", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "enrolled_at": {"name": "enrolled_at", "description": "The timestamp, to the second, of the most recent enrollment action for this learner and course.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/grading/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.4702, "relation_name": "`xapi`.`fact_student_status`", "raw_code": "select\n    fes.org as org,\n    fes.course_key as course_key,\n    fes.actor_id as actor_id,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    if(empty(approving_state), 'failed', approving_state) as approving_state,\n    enrollment_mode,\n    enrollment_status,\n    course_grade as course_grade,\n    {{ get_bucket(\"course_grade\") }} as grade_bucket,\n    users.username as username,\n    users.name as name,\n    users.email as email,\n    fes.emission_time as enrolled_at\nfrom {{ ref(\"fact_enrollment_status\") }} fes\nleft join\n    {{ ref(\"fact_learner_course_status\") }} lg\n    on fes.org = lg.org\n    and fes.course_key = lg.course_key\n    and fes.actor_id = lg.actor_id\nleft join\n    {{ ref(\"fact_learner_course_grade\") }} ls\n    on fes.org = ls.org\n    and fes.course_key = ls.course_key\n    and fes.actor_id = ls.actor_id\njoin\n    {{ ref(\"course_names\") }} courses\n    on fes.org = courses.org\n    and fes.course_key = courses.course_key\nleft outer join\n    {{ ref(\"dim_user_pii\") }} users on toUUID(actor_id) = users.external_user_id", "language": "sql", "refs": [{"name": "fact_enrollment_status", "package": null, "version": null}, {"name": "fact_learner_course_status", "package": null, "version": null}, {"name": "fact_learner_course_grade", "package": null, "version": null}, {"name": "course_names", "package": null, "version": null}, {"name": "dim_user_pii", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_bucket"], "nodes": ["model.aspects.fact_enrollment_status", "model.aspects.fact_learner_course_status", "model.aspects.fact_learner_course_grade", "model.aspects.course_names", "model.aspects.dim_user_pii"]}, "compiled_path": "target/compiled/aspects/models/grading/fact_student_status.sql", "compiled": true, "compiled_code": "select\n    fes.org as org,\n    fes.course_key as course_key,\n    fes.actor_id as actor_id,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    if(empty(approving_state), 'failed', approving_state) as approving_state,\n    enrollment_mode,\n    enrollment_status,\n    course_grade as course_grade,\n    case\n        when course_grade >= 0.9\n        then '90-100%'\n        when course_grade >= 0.8 and course_grade < 0.9\n        then '80-89%'\n        when course_grade >= 0.7 and course_grade < 0.8\n        then '70-79%'\n        when course_grade >= 0.6 and course_grade < 0.7\n        then '60-69%'\n        when course_grade >= 0.5 and course_grade < 0.6\n        then '50-59%'\n        when course_grade >= 0.4 and course_grade < 0.5\n        then '40-49%'\n        when course_grade >= 0.3 and course_grade < 0.4\n        then '30-39%'\n        when course_grade >= 0.2 and course_grade < 0.3\n        then '20-29%'\n        when course_grade >= 0.1 and course_grade < 0.2\n        then '10-19%'\n        else '0-9%'\n    end as grade_bucket,\n    users.username as username,\n    users.name as name,\n    users.email as email,\n    fes.emission_time as enrolled_at\nfrom `xapi`.`fact_enrollment_status` fes\nleft join\n    `xapi`.`fact_learner_course_status` lg\n    on fes.org = lg.org\n    and fes.course_key = lg.course_key\n    and fes.actor_id = lg.actor_id\nleft join\n    `xapi`.`fact_learner_course_grade` ls\n    on fes.org = ls.org\n    and fes.course_key = ls.course_key\n    and fes.actor_id = ls.actor_id\njoin\n    `xapi`.`course_names` courses\n    on fes.org = courses.org\n    and fes.course_key = courses.course_key\nleft outer join\n    `xapi`.`dim_user_pii` users on toUUID(actor_id) = users.external_user_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_learner_course_status": {"database": "", "schema": "xapi", "name": "fact_learner_course_status", "resource_type": "model", "package_name": "aspects", "path": "grading/fact_learner_course_status.sql", "original_file_path": "models/grading/fact_learner_course_status.sql", "unique_id": "model.aspects.fact_learner_course_status", "fqn": ["aspects", "grading", "fact_learner_course_status"], "alias": "fact_learner_course_status", "checksum": {"name": "sha256", "checksum": "b222a83595d291ea6410e32e2c9c55afff79efe3c0268c415edf3154f4b60ee4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    ReplacingMergeTree()", "order_by": "(org, course_key, actor_id)", "primary_key": "(org, course_key, actor_id)"}, "tags": [], "description": "One record per learner per course for the most recent approving status", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "emission_time": {"name": "emission_time", "description": "The time the event was emitted", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "approving_state": {"name": "approving_state", "description": "The most recent approving_state of the learner's grade", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/grading/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "engine": "\n    ReplacingMergeTree()", "primary_key": "(org, course_key, actor_id)", "order_by": "(org, course_key, actor_id)"}, "created_at": 1716584567.4676147, "relation_name": "`xapi`.`fact_learner_course_status`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        engine=get_engine(\"ReplacingMergeTree()\"),\n        primary_key=\"(org, course_key, actor_id)\",\n        order_by=\"(org, course_key, actor_id)\",\n    )\n}}\n\nwith\n    ranked_status as (\n        select\n            org,\n            course_key,\n            actor_id,\n            splitByString('/', verb_id)[-1] as approving_state,\n            emission_time,\n            row_number() over (\n                partition by org, course_key, actor_id order by emission_time desc\n            ) as rn\n        from {{ ref(\"grading_events\") }}\n        where\n            verb_id in (\n                'http://adlnet.gov/expapi/verbs/passed',\n                'http://adlnet.gov/expapi/verbs/failed'\n            )\n    )\n\nselect org, course_key, actor_id, approving_state, emission_time\nfrom ranked_status\nwhere rn = 1", "language": "sql", "refs": [{"name": "grading_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine"], "nodes": ["model.aspects.grading_events"]}, "compiled_path": "target/compiled/aspects/models/grading/fact_learner_course_status.sql", "compiled": true, "compiled_code": "\n\nwith\n    ranked_status as (\n        select\n            org,\n            course_key,\n            actor_id,\n            splitByString('/', verb_id)[-1] as approving_state,\n            emission_time,\n            row_number() over (\n                partition by org, course_key, actor_id order by emission_time desc\n            ) as rn\n        from `xapi`.`grading_events`\n        where\n            verb_id in (\n                'http://adlnet.gov/expapi/verbs/passed',\n                'http://adlnet.gov/expapi/verbs/failed'\n            )\n    )\n\nselect org, course_key, actor_id, approving_state, emission_time\nfrom ranked_status\nwhere rn = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_instance_enrollments": {"database": "", "schema": "xapi", "name": "fact_instance_enrollments", "resource_type": "model", "package_name": "aspects", "path": "instance/fact_instance_enrollments.sql", "original_file_path": "models/instance/fact_instance_enrollments.sql", "unique_id": "model.aspects.fact_instance_enrollments", "fqn": ["aspects", "instance", "fact_instance_enrollments"], "alias": "fact_instance_enrollments", "checksum": {"name": "sha256", "checksum": "c206cc6a6894dc5a195055b5c5b69a20587b0715f050643c21877e277df9b6ca"}, "config": {"enabled": true, "alias": null, "schema": "xapi", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    SummingMergeTree()", "order_by": "(emission_hour)", "partition_by": "(toYYYYMM(emission_hour))"}, "tags": [], "description": "A materialized view for summarizing site-wide enrollment activity", "columns": {"emission_hour": {"name": "emission_hour", "description": "Time of summary, rounded to the nearest hour", "meta": {}, "data_type": "datetime(64)", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "enrollment_mode": {"name": "enrollment_mode", "description": "The name of the enrollment mode (ex: audit, honor)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "enrollment_status": {"name": "enrollment_status", "description": "The type of enrollment event  (ex: registered, unregistered)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_enrollment_mode_status_cnt": {"name": "course_enrollment_mode_status_cnt", "description": "The number of enrollment events for this mode that occurred in the given hour", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/instance/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "schema": "xapi", "engine": "\n    SummingMergeTree()", "order_by": "(emission_hour)", "partition_by": "(toYYYYMM(emission_hour))"}, "created_at": 1716584567.493307, "relation_name": "`xapi`.`fact_instance_enrollments`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        schema=env_var(\"ASPECTS_XAPI_DATABASE\", \"xapi\"),\n        engine=get_engine(\"SummingMergeTree()\"),\n        order_by=\"(emission_hour)\",\n        partition_by=\"(toYYYYMM(emission_hour))\",\n    )\n}}\n\nwith\n    enrollments as (\n        select\n            emission_time,\n            course_key,\n            enrollment_mode,\n            splitByString('/', verb_id)[-1] as enrollment_status\n        from {{ ref(\"enrollment_events\") }}\n    )\n\nselect\n    date_trunc('hour', emission_time) as emission_hour,\n    courses.course_name as course_name,\n    enrollments.enrollment_mode as enrollment_mode,\n    enrollments.enrollment_status as enrollment_status,\n    count() as course_enrollment_mode_status_cnt\nfrom enrollments\njoin {{ ref(\"course_names\") }} courses on enrollments.course_key = courses.course_key\ngroup by emission_hour, course_name, enrollment_mode, enrollment_status", "language": "sql", "refs": [{"name": "enrollment_events", "package": null, "version": null}, {"name": "course_names", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine"], "nodes": ["model.aspects.enrollment_events", "model.aspects.course_names"]}, "compiled_path": "target/compiled/aspects/models/instance/fact_instance_enrollments.sql", "compiled": true, "compiled_code": "\n\nwith\n    enrollments as (\n        select\n            emission_time,\n            course_key,\n            enrollment_mode,\n            splitByString('/', verb_id)[-1] as enrollment_status\n        from `xapi`.`enrollment_events`\n    )\n\nselect\n    date_trunc('hour', emission_time) as emission_hour,\n    courses.course_name as course_name,\n    enrollments.enrollment_mode as enrollment_mode,\n    enrollments.enrollment_status as enrollment_status,\n    count() as course_enrollment_mode_status_cnt\nfrom enrollments\njoin `xapi`.`course_names` courses on enrollments.course_key = courses.course_key\ngroup by emission_hour, course_name, enrollment_mode, enrollment_status", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_instance_courses": {"database": "", "schema": "xapi", "name": "fact_instance_courses", "resource_type": "model", "package_name": "aspects", "path": "instance/fact_instance_courses.sql", "original_file_path": "models/instance/fact_instance_courses.sql", "unique_id": "model.aspects.fact_instance_courses", "fqn": ["aspects", "instance", "fact_instance_courses"], "alias": "fact_instance_courses", "checksum": {"name": "sha256", "checksum": "f4ad165686c10a3ff85f8cdd6e6a32e970e1d1503612995e1f4fadb7a87b5a4f"}, "config": {"enabled": true, "alias": null, "schema": "xapi", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    AggregatingMergeTree()", "order_by": "(emission_hour)", "partition_by": "(toYYYYMM(emission_hour))"}, "tags": [], "description": "A materialized view summarizing site-wide course activity", "columns": {"emission_hour": {"name": "emission_hour", "description": "Time of summary, rounded to the nearest hour", "meta": {}, "data_type": "datetime(64)", "constraints": [], "quote": null, "tags": []}, "courses_cnt": {"name": "courses_cnt", "description": "The number of xAPI courses active in the given hour", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/instance/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "schema": "xapi", "engine": "\n    AggregatingMergeTree()", "order_by": "(emission_hour)", "partition_by": "(toYYYYMM(emission_hour))"}, "created_at": 1716584567.4901276, "relation_name": "`xapi`.`fact_instance_courses`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        schema=env_var(\"ASPECTS_XAPI_DATABASE\", \"xapi\"),\n        engine=get_engine(\"AggregatingMergeTree()\"),\n        order_by=\"(emission_hour)\",\n        partition_by=\"(toYYYYMM(emission_hour))\",\n    )\n}}\n\nselect\n    date_trunc('hour', emission_time) as emission_hour,\n    uniqCombinedState(course_id) as courses_cnt\nfrom {{ ref(\"xapi_events_all_parsed\") }}\ngroup by emission_hour", "language": "sql", "refs": [{"name": "xapi_events_all_parsed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine"], "nodes": ["model.aspects.xapi_events_all_parsed"]}, "compiled_path": "target/compiled/aspects/models/instance/fact_instance_courses.sql", "compiled": true, "compiled_code": "\n\nselect\n    date_trunc('hour', emission_time) as emission_hour,\n    uniqCombinedState(course_id) as courses_cnt\nfrom `xapi`.`xapi_events_all_parsed`\ngroup by emission_hour", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_instance_events": {"database": "", "schema": "xapi", "name": "fact_instance_events", "resource_type": "model", "package_name": "aspects", "path": "instance/fact_instance_events.sql", "original_file_path": "models/instance/fact_instance_events.sql", "unique_id": "model.aspects.fact_instance_events", "fqn": ["aspects", "instance", "fact_instance_events"], "alias": "fact_instance_events", "checksum": {"name": "sha256", "checksum": "8bdf928ebb874940d50d3582187e24c226086b66b7a234072cadd896a91f28b8"}, "config": {"enabled": true, "alias": null, "schema": "xapi", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    AggregatingMergeTree()", "order_by": "(emission_hour)", "partition_by": "(toYYYYMM(emission_hour))"}, "tags": [], "description": "A materialized view summarizing site-wide xAPI event activity", "columns": {"emission_hour": {"name": "emission_hour", "description": "Time of summary, rounded to the nearest hour", "meta": {}, "data_type": "datetime(64)", "constraints": [], "quote": null, "tags": []}, "events_cnt": {"name": "events_cnt", "description": "The number of xAPI events that occurred in the given hour", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/instance/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "schema": "xapi", "engine": "\n    AggregatingMergeTree()", "order_by": "(emission_hour)", "partition_by": "(toYYYYMM(emission_hour))"}, "created_at": 1716584567.4911637, "relation_name": "`xapi`.`fact_instance_events`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        schema=env_var(\"ASPECTS_XAPI_DATABASE\", \"xapi\"),\n        engine=get_engine(\"AggregatingMergeTree()\"),\n        order_by=\"(emission_hour)\",\n        partition_by=\"(toYYYYMM(emission_hour))\",\n    )\n}}\n\nselect\n    date_trunc('hour', emission_time) as emission_hour,\n    uniqCombinedState(event_id) as events_cnt\nfrom {{ ref(\"xapi_events_all_parsed\") }}\ngroup by emission_hour", "language": "sql", "refs": [{"name": "xapi_events_all_parsed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine"], "nodes": ["model.aspects.xapi_events_all_parsed"]}, "compiled_path": "target/compiled/aspects/models/instance/fact_instance_events.sql", "compiled": true, "compiled_code": "\n\nselect\n    date_trunc('hour', emission_time) as emission_hour,\n    uniqCombinedState(event_id) as events_cnt\nfrom `xapi`.`xapi_events_all_parsed`\ngroup by emission_hour", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_instance_actors": {"database": "", "schema": "xapi", "name": "fact_instance_actors", "resource_type": "model", "package_name": "aspects", "path": "instance/fact_instance_actors.sql", "original_file_path": "models/instance/fact_instance_actors.sql", "unique_id": "model.aspects.fact_instance_actors", "fqn": ["aspects", "instance", "fact_instance_actors"], "alias": "fact_instance_actors", "checksum": {"name": "sha256", "checksum": "7e4203f0d8175c942f9da262eebda9453ec98b35df5661f0bfc87a49a056d200"}, "config": {"enabled": true, "alias": null, "schema": "xapi", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    AggregatingMergeTree()", "order_by": "(emission_hour)", "partition_by": "(toYYYYMM(emission_hour))"}, "tags": [], "description": "A materialized view summarizing site-wide user activity", "columns": {"emission_hour": {"name": "emission_hour", "description": "Time of summary, rounded to the nearest hour", "meta": {}, "data_type": "datetime(64)", "constraints": [], "quote": null, "tags": []}, "actors_cnt": {"name": "actors_cnt", "description": "The number of xAPI actors active in the given hour", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/instance/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "schema": "xapi", "engine": "\n    AggregatingMergeTree()", "order_by": "(emission_hour)", "partition_by": "(toYYYYMM(emission_hour))"}, "created_at": 1716584567.4921238, "relation_name": "`xapi`.`fact_instance_actors`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        schema=env_var(\"ASPECTS_XAPI_DATABASE\", \"xapi\"),\n        engine=get_engine(\"AggregatingMergeTree()\"),\n        order_by=\"(emission_hour)\",\n        partition_by=\"(toYYYYMM(emission_hour))\",\n    )\n}}\n\nselect\n    date_trunc('hour', emission_time) as emission_hour,\n    uniqCombinedState(actor_id) as actors_cnt\nfrom {{ ref(\"xapi_events_all_parsed\") }}\ngroup by emission_hour", "language": "sql", "refs": [{"name": "xapi_events_all_parsed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine"], "nodes": ["model.aspects.xapi_events_all_parsed"]}, "compiled_path": "target/compiled/aspects/models/instance/fact_instance_actors.sql", "compiled": true, "compiled_code": "\n\nselect\n    date_trunc('hour', emission_time) as emission_hour,\n    uniqCombinedState(actor_id) as actors_cnt\nfrom `xapi`.`xapi_events_all_parsed`\ngroup by emission_hour", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.subsection_video_engagement": {"database": "", "schema": "xapi", "name": "subsection_video_engagement", "resource_type": "model", "package_name": "aspects", "path": "video/subsection_video_engagement.sql", "original_file_path": "models/video/subsection_video_engagement.sql", "unique_id": "model.aspects.subsection_video_engagement", "fqn": ["aspects", "video", "subsection_video_engagement"], "alias": "subsection_video_engagement", "checksum": {"name": "sha256", "checksum": "b1852a5536b3b6570a1f67f70630dc2fbc9577ce1936d2fb7e11bb64308c03e9"}, "config": {"enabled": true, "alias": null, "schema": "xapi", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    ReplacingMergeTree()", "order_by": "(org, course_key, subsection_block_id, actor_id)", "primary_key": "(org, course_key)"}, "tags": [], "description": "A record per course per subsection per learner with their engagement level", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "subsection_block_id": {"name": "subsection_block_id", "description": "The unique identifier for the subsection block", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "engagement_level": {"name": "engagement_level", "description": "The engagement level of the learner with the subsection", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/video/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "schema": "xapi", "engine": "\n    ReplacingMergeTree()", "primary_key": "(org, course_key)", "order_by": "(org, course_key, subsection_block_id, actor_id)"}, "created_at": 1716584567.515581, "relation_name": "`xapi`.`subsection_video_engagement`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        schema=env_var(\"ASPECTS_XAPI_DATABASE\", \"xapi\"),\n        engine=get_engine(\"ReplacingMergeTree()\"),\n        primary_key=\"(org, course_key)\",\n        order_by=\"(org, course_key, subsection_block_id, actor_id)\",\n    )\n}}\n\nwith\n    viewed_subsection_videos as (\n        select distinct\n            date(emission_time) as viewed_on,\n            org,\n            course_key,\n            {{ section_from_display(\"video_name_with_location\") }} as section_number,\n            {{ subsection_from_display(\"video_name_with_location\") }}\n            as subsection_number,\n            actor_id,\n            video_id\n        from {{ ref(\"fact_video_plays\") }}\n    ),\n    fact_video_engagement_per_subsection as (\n        select\n            views.org as org,\n            views.course_key as course_key,\n            videos.section_with_name as section_with_name,\n            videos.subsection_with_name as subsection_with_name,\n            videos.item_count as item_count,\n            views.actor_id as actor_id,\n            views.video_id as video_id,\n            videos.subsection_block_id as subsection_block_id\n        from viewed_subsection_videos views\n        join\n            {{ ref(\"int_videos_per_subsection\") }} videos\n            on (\n                views.org = videos.org\n                and views.course_key = videos.course_key\n                and views.section_number = videos.section_number\n                and views.subsection_number = videos.subsection_number\n            )\n    ),\n    subsection_counts as (\n        select\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            count(distinct video_id) as videos_viewed,\n            case\n                when videos_viewed = 0\n                then 'No videos viewed yet'\n                when videos_viewed = item_count\n                then 'All videos viewed'\n                else 'At least one video viewed'\n            end as engagement_level,\n            subsection_block_id\n        from fact_video_engagement_per_subsection\n        group by\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            subsection_block_id\n    )\nselect org, course_key, actor_id, subsection_block_id, engagement_level\nfrom subsection_counts", "language": "sql", "refs": [{"name": "fact_video_plays", "package": null, "version": null}, {"name": "int_videos_per_subsection", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine", "macro.aspects.section_from_display", "macro.aspects.subsection_from_display"], "nodes": ["model.aspects.fact_video_plays", "model.aspects.int_videos_per_subsection"]}, "compiled_path": "target/compiled/aspects/models/video/subsection_video_engagement.sql", "compiled": true, "compiled_code": "\n\nwith\n    viewed_subsection_videos as (\n        select distinct\n            date(emission_time) as viewed_on,\n            org,\n            course_key,\n            \n    concat(\n        splitByString(\n            ':', splitByString(' - ', video_name_with_location)[1], 1\n        )[1],\n        ':0:0'\n    )\n as section_number,\n            \n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', video_name_with_location)[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n\n            as subsection_number,\n            actor_id,\n            video_id\n        from `xapi`.`fact_video_plays`\n    ),\n    fact_video_engagement_per_subsection as (\n        select\n            views.org as org,\n            views.course_key as course_key,\n            videos.section_with_name as section_with_name,\n            videos.subsection_with_name as subsection_with_name,\n            videos.item_count as item_count,\n            views.actor_id as actor_id,\n            views.video_id as video_id,\n            videos.subsection_block_id as subsection_block_id\n        from viewed_subsection_videos views\n        join\n            `xapi`.`int_videos_per_subsection` videos\n            on (\n                views.org = videos.org\n                and views.course_key = videos.course_key\n                and views.section_number = videos.section_number\n                and views.subsection_number = videos.subsection_number\n            )\n    ),\n    subsection_counts as (\n        select\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            count(distinct video_id) as videos_viewed,\n            case\n                when videos_viewed = 0\n                then 'No videos viewed yet'\n                when videos_viewed = item_count\n                then 'All videos viewed'\n                else 'At least one video viewed'\n            end as engagement_level,\n            subsection_block_id\n        from fact_video_engagement_per_subsection\n        group by\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            subsection_block_id\n    )\nselect org, course_key, actor_id, subsection_block_id, engagement_level\nfrom subsection_counts", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.int_videos_per_subsection": {"database": "", "schema": "xapi", "name": "int_videos_per_subsection", "resource_type": "model", "package_name": "aspects", "path": "video/int_videos_per_subsection.sql", "original_file_path": "models/video/int_videos_per_subsection.sql", "unique_id": "model.aspects.int_videos_per_subsection", "fqn": ["aspects", "video", "int_videos_per_subsection"], "alias": "int_videos_per_subsection", "checksum": {"name": "sha256", "checksum": "b95fb8fbe257ae83e6a3dd859730de95ede0685e04ff98bd10c94eba8134807e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A dimension table with the number of videos per subsection", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_number": {"name": "section_number", "description": "The location of this section in the course, represented as section:0:0", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_with_name": {"name": "section_with_name", "description": "The name of the section this subsection belongs to, with section_number prepended", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "subsection_number": {"name": "subsection_number", "description": "The location of this subsection in the course, represented as section:subsection:0", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "subsection_with_name": {"name": "subsection_with_name", "description": "The name of the subsection, with section_number prepended", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "graded": {"name": "graded", "description": "Whether the block is graded", "meta": {}, "data_type": "Boolean", "constraints": [], "quote": null, "tags": []}, "item_count": {"name": "item_count", "description": "The number of videos in this subsection", "meta": {}, "data_type": "uint64", "constraints": [], "quote": null, "tags": []}, "course_order": {"name": "course_order", "description": "The sort order of this block in the course across all course blocks", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": []}, "subsection_block_id": {"name": "subsection_block_id", "description": "The unique identifier for the subsection block", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_block_id": {"name": "section_block_id", "description": "The unique identifier for the section block", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/video/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.5090873, "relation_name": "`xapi`.`int_videos_per_subsection`", "raw_code": "select * from ({{ items_per_subsection(\"%@video+block@%\") }})", "language": "sql", "refs": [{"name": "dim_course_blocks", "package": null, "version": null}, {"name": "dim_course_blocks", "package": null, "version": null}, {"name": "dim_course_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.items_per_subsection"], "nodes": ["model.aspects.dim_course_blocks"]}, "compiled_path": "target/compiled/aspects/models/video/int_videos_per_subsection.sql", "compiled": true, "compiled_code": "select * from (\n    with\n        items_per_subsection as (\n            select\n                org,\n                course_key,\n                section_number,\n                subsection_number,\n                course_order,\n                graded,\n                count(*) as item_count\n            from `xapi`.`dim_course_blocks`\n            where block_id like '%@video+block@%'\n            group by\n                org, course_key, section_number, subsection_number, course_order, graded\n        )\n\n    select\n        ips.org as org,\n        ips.course_key as course_key,\n        ips.section_number as section_number,\n        section_blocks.display_name_with_location as section_with_name,\n        ips.subsection_number as subsection_number,\n        subsection_blocks.display_name_with_location as subsection_with_name,\n        ips.course_order as course_order,\n        ips.graded as graded,\n        ips.item_count as item_count,\n        subsection_blocks.block_id as subsection_block_id,\n        section_blocks.block_id as section_block_id\n    from items_per_subsection ips\n    left join\n        `xapi`.`dim_course_blocks` section_blocks\n        on (\n            ips.section_number = section_blocks.hierarchy_location\n            and ips.org = section_blocks.org\n            and ips.course_key = section_blocks.course_key\n            and section_blocks.block_id like '%@chapter+block@%'\n        )\n    left join\n        `xapi`.`dim_course_blocks` subsection_blocks\n        on (\n            ips.subsection_number = subsection_blocks.hierarchy_location\n            and ips.org = subsection_blocks.org\n            and ips.course_key = subsection_blocks.course_key\n            and subsection_blocks.block_id like '%@sequential+block@%'\n        )\n)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_video_engagement": {"database": "", "schema": "xapi", "name": "fact_video_engagement", "resource_type": "model", "package_name": "aspects", "path": "video/fact_video_engagement.sql", "original_file_path": "models/video/fact_video_engagement.sql", "unique_id": "model.aspects.fact_video_engagement", "fqn": ["aspects", "video", "fact_video_engagement"], "alias": "fact_video_engagement", "checksum": {"name": "sha256", "checksum": "8e4f4f8c49b7970ae89b05b8dfccf909507c9c93ced2c4e10a4683f7e54257d0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A dataset with one record representing the engagement of a learner with a video", "columns": {"org": {"name": "org", "description": "The organization that the video belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "section_with_name": {"name": "section_with_name", "description": "The name of the section this subsection belongs to, with section_number prepended", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "subsection_with_name": {"name": "subsection_with_name", "description": "The name of the subsection, with section_number prepended", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_subsection_name": {"name": "section_subsection_name", "description": "The name of the section or the subsection", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "content_level": {"name": "content_level", "description": "The content level of the video", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_subsection_video_engagement": {"name": "section_subsection_video_engagement", "description": "The engagement level of the learner with the video", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/video/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.5109317, "relation_name": "`xapi`.`fact_video_engagement`", "raw_code": "with\n    subsection_engagement as (\n        select\n            org,\n            course_key,\n            'subsection' as content_level,\n            actor_id,\n            subsection_block_id as block_id,\n            engagement_level as section_subsection_video_engagement\n        from {{ ref(\"subsection_video_engagement\") }}\n    ),\n    section_engagement as (\n        select\n            org,\n            course_key,\n            'section' as content_level,\n            actor_id,\n            section_block_id as block_id,\n            engagement_level as section_subsection_video_engagement\n        from {{ ref(\"section_video_engagement\") }}\n    ),\n    video_engagement as (\n        select *\n        from subsection_engagement\n        union all\n        select *\n        from section_engagement\n    )\nselect\n    ve.org as org,\n    ve.course_key as course_key,\n    course_blocks.course_run as course_run,\n    course_blocks.display_name_with_location as section_subsection_name,\n    ve.content_level as content_level,\n    ve.actor_id as actor_id,\n    ve.section_subsection_video_engagement as section_subsection_video_engagement,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom video_engagement ve\njoin\n    {{ ref(\"dim_course_blocks\") }} course_blocks\n    on (\n        ve.org = course_blocks.org\n        and ve.course_key = course_blocks.course_key\n        and ve.block_id = course_blocks.block_id\n    )\nleft outer join\n    {{ ref(\"dim_user_pii\") }} users on toUUID(ve.actor_id) = users.external_user_id", "language": "sql", "refs": [{"name": "subsection_video_engagement", "package": null, "version": null}, {"name": "section_video_engagement", "package": null, "version": null}, {"name": "dim_course_blocks", "package": null, "version": null}, {"name": "dim_user_pii", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.aspects.subsection_video_engagement", "model.aspects.section_video_engagement", "model.aspects.dim_course_blocks", "model.aspects.dim_user_pii"]}, "compiled_path": "target/compiled/aspects/models/video/fact_video_engagement.sql", "compiled": true, "compiled_code": "with\n    subsection_engagement as (\n        select\n            org,\n            course_key,\n            'subsection' as content_level,\n            actor_id,\n            subsection_block_id as block_id,\n            engagement_level as section_subsection_video_engagement\n        from `xapi`.`subsection_video_engagement`\n    ),\n    section_engagement as (\n        select\n            org,\n            course_key,\n            'section' as content_level,\n            actor_id,\n            section_block_id as block_id,\n            engagement_level as section_subsection_video_engagement\n        from `xapi`.`section_video_engagement`\n    ),\n    video_engagement as (\n        select *\n        from subsection_engagement\n        union all\n        select *\n        from section_engagement\n    )\nselect\n    ve.org as org,\n    ve.course_key as course_key,\n    course_blocks.course_run as course_run,\n    course_blocks.display_name_with_location as section_subsection_name,\n    ve.content_level as content_level,\n    ve.actor_id as actor_id,\n    ve.section_subsection_video_engagement as section_subsection_video_engagement,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom video_engagement ve\njoin\n    `xapi`.`dim_course_blocks` course_blocks\n    on (\n        ve.org = course_blocks.org\n        and ve.course_key = course_blocks.course_key\n        and ve.block_id = course_blocks.block_id\n    )\nleft outer join\n    `xapi`.`dim_user_pii` users on toUUID(ve.actor_id) = users.external_user_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_video_plays": {"database": "", "schema": "xapi", "name": "fact_video_plays", "resource_type": "model", "package_name": "aspects", "path": "video/fact_video_plays.sql", "original_file_path": "models/video/fact_video_plays.sql", "unique_id": "model.aspects.fact_video_plays", "fqn": ["aspects", "video", "fact_video_plays"], "alias": "fact_video_plays", "checksum": {"name": "sha256", "checksum": "318b681ff711047f401c5cef658d3782a098b690c0e36314dcd40c0f4450e197"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "One record for each time a learner played a video", "columns": {"emission_time": {"name": "emission_time", "description": "Timestamp, to the second, of when this event was emitted", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "video_id": {"name": "video_id", "description": "The xAPI object identifier", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "video_name": {"name": "video_name", "description": "The name of the video", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "video_name_with_location": {"name": "video_name_with_location", "description": "The name of the video with the section and subsection", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "video_link": {"name": "video_link", "description": "An anchor tag with a link to the video", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "graded": {"name": "graded", "description": "Whether the block is graded", "meta": {}, "data_type": "Boolean", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "video_duration": {"name": "video_duration", "description": "The duration of the video in seconds", "meta": {}, "data_type": "Int64", "constraints": [], "quote": null, "tags": []}, "video_position": {"name": "video_position", "description": "The seconds into the video where the play event occurred", "meta": {}, "data_type": "Int64", "constraints": [], "quote": null, "tags": []}, "visualization_bucket": {"name": "visualization_bucket", "description": "The percentile bucket for the video play event", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "section_with_name": {"name": "section_with_name", "description": "The name of the section this video belongs to, with section_number prepended", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "subsection_with_name": {"name": "subsection_with_name", "description": "The name of the subsection this video belongs to, with subsection_number prepended", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_order": {"name": "course_order", "description": "The sort order of this block in the course across all course blocks", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/video/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.5029337, "relation_name": "`xapi`.`fact_video_plays`", "raw_code": "-- model to support number of watches per video\n-- ref:\n-- https://edx.readthedocs.io/projects/edx-insights/en/latest/Reference.html#engagement-computations\nwith\n    plays as (\n        select\n            emission_time,\n            org,\n            course_key,\n            object_id,\n            video_duration,\n            video_position,\n            splitByString('/xblock/', object_id)[-1] as video_id,\n            actor_id\n        from {{ ref(\"video_playback_events\") }}\n        where verb_id = 'https://w3id.org/xapi/video/verbs/played'\n    )\n\nselect\n    plays.emission_time as emission_time,\n    plays.org as org,\n    plays.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    plays.video_id as video_id,\n    blocks.block_name as video_name,\n    blocks.display_name_with_location as video_name_with_location,\n    {{ a_tag(\"plays.object_id\", \"blocks.block_name\") }} as video_link,\n    blocks.graded as graded,\n    plays.video_position as video_position,\n    plays.video_duration as video_duration,\n    {{ get_bucket(\"video_position/video_duration\") }} as visualization_bucket,\n    plays.actor_id as actor_id,\n    users.username as username,\n    users.name as name,\n    users.email as email,\n    blocks.section_with_name as section_with_name,\n    blocks.subsection_with_name as subsection_with_name,\n    blocks.course_order as course_order\nfrom plays\njoin\n    {{ ref(\"dim_course_blocks_extended\") }} blocks\n    on (plays.course_key = blocks.course_key and plays.video_id = blocks.block_id)\nleft outer join\n    {{ ref(\"dim_user_pii\") }} users on toUUID(actor_id) = users.external_user_id", "language": "sql", "refs": [{"name": "video_playback_events", "package": null, "version": null}, {"name": "dim_course_blocks_extended", "package": null, "version": null}, {"name": "dim_user_pii", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.a_tag", "macro.aspects.get_bucket"], "nodes": ["model.aspects.video_playback_events", "model.aspects.dim_course_blocks_extended", "model.aspects.dim_user_pii"]}, "compiled_path": "target/compiled/aspects/models/video/fact_video_plays.sql", "compiled": true, "compiled_code": "-- model to support number of watches per video\n-- ref:\n-- https://edx.readthedocs.io/projects/edx-insights/en/latest/Reference.html#engagement-computations\nwith\n    plays as (\n        select\n            emission_time,\n            org,\n            course_key,\n            object_id,\n            video_duration,\n            video_position,\n            splitByString('/xblock/', object_id)[-1] as video_id,\n            actor_id\n        from `xapi`.`video_playback_events`\n        where verb_id = 'https://w3id.org/xapi/video/verbs/played'\n    )\n\nselect\n    plays.emission_time as emission_time,\n    plays.org as org,\n    plays.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    plays.video_id as video_id,\n    blocks.block_name as video_name,\n    blocks.display_name_with_location as video_name_with_location,\n    \n    concat(\n        '<a href=\"', plays.object_id, '\" target=\"_blank\">', blocks.block_name, '</a>'\n    )\n as video_link,\n    blocks.graded as graded,\n    plays.video_position as video_position,\n    plays.video_duration as video_duration,\n    case\n        when video_position/video_duration >= 0.9\n        then '90-100%'\n        when video_position/video_duration >= 0.8 and video_position/video_duration < 0.9\n        then '80-89%'\n        when video_position/video_duration >= 0.7 and video_position/video_duration < 0.8\n        then '70-79%'\n        when video_position/video_duration >= 0.6 and video_position/video_duration < 0.7\n        then '60-69%'\n        when video_position/video_duration >= 0.5 and video_position/video_duration < 0.6\n        then '50-59%'\n        when video_position/video_duration >= 0.4 and video_position/video_duration < 0.5\n        then '40-49%'\n        when video_position/video_duration >= 0.3 and video_position/video_duration < 0.4\n        then '30-39%'\n        when video_position/video_duration >= 0.2 and video_position/video_duration < 0.3\n        then '20-29%'\n        when video_position/video_duration >= 0.1 and video_position/video_duration < 0.2\n        then '10-19%'\n        else '0-9%'\n    end as visualization_bucket,\n    plays.actor_id as actor_id,\n    users.username as username,\n    users.name as name,\n    users.email as email,\n    blocks.section_with_name as section_with_name,\n    blocks.subsection_with_name as subsection_with_name,\n    blocks.course_order as course_order\nfrom plays\njoin\n    `xapi`.`dim_course_blocks_extended` blocks\n    on (plays.course_key = blocks.course_key and plays.video_id = blocks.block_id)\nleft outer join\n    `xapi`.`dim_user_pii` users on toUUID(actor_id) = users.external_user_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.video_playback_events": {"database": "", "schema": "xapi", "name": "video_playback_events", "resource_type": "model", "package_name": "aspects", "path": "video/video_playback_events.sql", "original_file_path": "models/video/video_playback_events.sql", "unique_id": "model.aspects.video_playback_events", "fqn": ["aspects", "video", "video_playback_events"], "alias": "video_playback_events", "checksum": {"name": "sha256", "checksum": "0722cfcb069c77f7b573981e7d8306ad482ef03c773401dc1e050ed3411a8f4c"}, "config": {"enabled": true, "alias": null, "schema": "xapi", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    ReplacingMergeTree()", "order_by": "(org, course_key, verb_id, emission_time, actor_id, video_position, event_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": "", "primary_key": "(org, course_key, verb_id)"}, "tags": [], "description": "Events related to video playback", "columns": {"event_id": {"name": "event_id", "description": "The unique identifier for the event", "meta": {}, "data_type": "uuid", "constraints": [], "quote": null, "tags": []}, "emission_time": {"name": "emission_time", "description": "The time the event was emitted", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "object_id": {"name": "object_id", "description": "The xAPI object identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "verb_id": {"name": "verb_id", "description": "The xAPI verb identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "video_position": {"name": "video_position", "description": "The position in the video where the event occurred", "meta": {}, "data_type": "decimal(9, 2)", "constraints": [], "quote": null, "tags": []}, "video_duration": {"name": "video_duration", "description": "The duration of the video in seconds", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/video/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "schema": "xapi", "engine": "\n    ReplacingMergeTree()", "primary_key": "(org, course_key, verb_id)", "order_by": "(org, course_key, verb_id, emission_time, actor_id, video_position, event_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": ""}, "created_at": 1716584567.5062182, "relation_name": "`xapi`.`video_playback_events`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        schema=env_var(\"ASPECTS_XAPI_DATABASE\", \"xapi\"),\n        engine=get_engine(\"ReplacingMergeTree()\"),\n        primary_key=\"(org, course_key, verb_id)\",\n        order_by=\"(org, course_key, verb_id, emission_time, actor_id, video_position, event_id)\",\n        partition_by=\"(toYYYYMM(emission_time))\",\n        ttl=env_var(\"ASPECTS_DATA_TTL_EXPRESSION\", \"\"),\n    )\n}}\n\nselect\n    event_id,\n    CAST(emission_time, 'DateTime') as emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] as course_key,\n    org,\n    verb_id,\n    ceil(\n        CAST(\n            coalesce(\n                nullIf(\n                    JSON_VALUE(\n                        event,\n                        '$.result.extensions.\"https://w3id.org/xapi/video/extensions/time\"'\n                    ),\n                    ''\n                ),\n                nullIf(\n                    JSON_VALUE(\n                        event,\n                        '$.result.extensions.\"https://w3id.org/xapi/video/extensions/time-from\"'\n                    ),\n                    ''\n                ),\n                '0.0'\n            ),\n            'Decimal32(2)'\n        )\n    ) as video_position,\n    JSONExtractInt(\n        event, 'context', 'extensions', 'https://w3id.org/xapi/video/extensions/length'\n    ) as video_duration\nfrom {{ ref(\"xapi_events_all_parsed\") }}\nwhere\n    (\n        verb_id in (\n            'http://adlnet.gov/expapi/verbs/completed',\n            'http://adlnet.gov/expapi/verbs/initialized',\n            'http://adlnet.gov/expapi/verbs/terminated',\n            'https://w3id.org/xapi/video/verbs/paused',\n            'https://w3id.org/xapi/video/verbs/played',\n            'https://w3id.org/xapi/video/verbs/seeked'\n        )\n    )\n    and (object_id like '%video+block%')", "language": "sql", "refs": [{"name": "xapi_events_all_parsed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine"], "nodes": ["model.aspects.xapi_events_all_parsed"]}, "compiled_path": "target/compiled/aspects/models/video/video_playback_events.sql", "compiled": true, "compiled_code": "\n\nselect\n    event_id,\n    CAST(emission_time, 'DateTime') as emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] as course_key,\n    org,\n    verb_id,\n    ceil(\n        CAST(\n            coalesce(\n                nullIf(\n                    JSON_VALUE(\n                        event,\n                        '$.result.extensions.\"https://w3id.org/xapi/video/extensions/time\"'\n                    ),\n                    ''\n                ),\n                nullIf(\n                    JSON_VALUE(\n                        event,\n                        '$.result.extensions.\"https://w3id.org/xapi/video/extensions/time-from\"'\n                    ),\n                    ''\n                ),\n                '0.0'\n            ),\n            'Decimal32(2)'\n        )\n    ) as video_position,\n    JSONExtractInt(\n        event, 'context', 'extensions', 'https://w3id.org/xapi/video/extensions/length'\n    ) as video_duration\nfrom `xapi`.`xapi_events_all_parsed`\nwhere\n    (\n        verb_id in (\n            'http://adlnet.gov/expapi/verbs/completed',\n            'http://adlnet.gov/expapi/verbs/initialized',\n            'http://adlnet.gov/expapi/verbs/terminated',\n            'https://w3id.org/xapi/video/verbs/paused',\n            'https://w3id.org/xapi/video/verbs/played',\n            'https://w3id.org/xapi/video/verbs/seeked'\n        )\n    )\n    and (object_id like '%video+block%')", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.video_transcript_events": {"database": "", "schema": "xapi", "name": "video_transcript_events", "resource_type": "model", "package_name": "aspects", "path": "video/video_transcript_events.sql", "original_file_path": "models/video/video_transcript_events.sql", "unique_id": "model.aspects.video_transcript_events", "fqn": ["aspects", "video", "video_transcript_events"], "alias": "video_transcript_events", "checksum": {"name": "sha256", "checksum": "b603f13b983b11799c64d8357a5c442a1bfc856d0e788b7b421f1bc3ee536a7e"}, "config": {"enabled": true, "alias": null, "schema": "xapi", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    ReplacingMergeTree()", "order_by": "(org, course_key, video_id, emission_time, actor_id, cc_enabled, event_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": "", "primary_key": "(org, course_key, video_id)"}, "tags": [], "description": "Events related to video transcripts", "columns": {"event_id": {"name": "event_id", "description": "The unique identifier for the event", "meta": {}, "data_type": "uuid", "constraints": [], "quote": null, "tags": []}, "emission_time": {"name": "emission_time", "description": "The time the event was emitted", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "video_id": {"name": "video_id", "description": "The video identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "cc_enabled": {"name": "cc_enabled", "description": "Whether closed captions were enabled", "meta": {}, "data_type": "uint8", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/video/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "schema": "xapi", "engine": "\n    ReplacingMergeTree()", "primary_key": "(org, course_key, video_id)", "order_by": "(org, course_key, video_id, emission_time, actor_id, cc_enabled, event_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": ""}, "created_at": 1716584567.507829, "relation_name": "`xapi`.`video_transcript_events`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        schema=env_var(\"ASPECTS_XAPI_DATABASE\", \"xapi\"),\n        engine=get_engine(\"ReplacingMergeTree()\"),\n        primary_key=\"(org, course_key, video_id)\",\n        order_by=\"(org, course_key, video_id, emission_time, actor_id, cc_enabled, event_id)\",\n        partition_by=\"(toYYYYMM(emission_time))\",\n        ttl=env_var(\"ASPECTS_DATA_TTL_EXPRESSION\", \"\"),\n    )\n}}\n\nselect\n    event_id,\n    CAST(emission_time, 'DateTime') as emission_time,\n    org,\n    splitByString('/', course_id)[-1] as course_key,\n    splitByString('/xblock/', object_id)[2] as video_id,\n    actor_id,\n    JSONExtractBool(\n        event,\n        'result',\n        'extensions',\n        'https://w3id.org/xapi/video/extensions/cc-enabled'\n    ) as cc_enabled\nfrom {{ ref(\"xapi_events_all_parsed\") }}\nwhere\n    verb_id in ('http://adlnet.gov/expapi/verbs/interacted')\n    and JSONHas(\n        event,\n        'result',\n        'extensions',\n        'https://w3id.org/xapi/video/extensions/cc-enabled'\n    )", "language": "sql", "refs": [{"name": "xapi_events_all_parsed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine"], "nodes": ["model.aspects.xapi_events_all_parsed"]}, "compiled_path": "target/compiled/aspects/models/video/video_transcript_events.sql", "compiled": true, "compiled_code": "\n\nselect\n    event_id,\n    CAST(emission_time, 'DateTime') as emission_time,\n    org,\n    splitByString('/', course_id)[-1] as course_key,\n    splitByString('/xblock/', object_id)[2] as video_id,\n    actor_id,\n    JSONExtractBool(\n        event,\n        'result',\n        'extensions',\n        'https://w3id.org/xapi/video/extensions/cc-enabled'\n    ) as cc_enabled\nfrom `xapi`.`xapi_events_all_parsed`\nwhere\n    verb_id in ('http://adlnet.gov/expapi/verbs/interacted')\n    and JSONHas(\n        event,\n        'result',\n        'extensions',\n        'https://w3id.org/xapi/video/extensions/cc-enabled'\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_transcript_usage": {"database": "", "schema": "xapi", "name": "fact_transcript_usage", "resource_type": "model", "package_name": "aspects", "path": "video/fact_transcript_usage.sql", "original_file_path": "models/video/fact_transcript_usage.sql", "unique_id": "model.aspects.fact_transcript_usage", "fqn": ["aspects", "video", "fact_transcript_usage"], "alias": "fact_transcript_usage", "checksum": {"name": "sha256", "checksum": "8be606ad1f1a2e84e448037da57a8ff9b9220bb7eff45537e738f93d59b9fc60"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "One record for each time a transcript or closed caption was enabled", "columns": {"emission_time": {"name": "emission_time", "description": "Timestamp, to the second, of when this event was emitted", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "video_id": {"name": "video_id", "description": "The xAPI object identifier", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "video_name": {"name": "video_name", "description": "The name of the video", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "video_name_with_location": {"name": "video_name_with_location", "description": "The name of the video with the section and subsection", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_order": {"name": "course_order", "description": "The sort order of this block in the course across all course blocks", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/video/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.5045402, "relation_name": "`xapi`.`fact_transcript_usage`", "raw_code": "select\n    transcripts.emission_time as emission_time,\n    transcripts.org as org,\n    transcripts.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    transcripts.video_id as video_id,\n    blocks.block_name as video_name,\n    blocks.display_name_with_location as video_name_with_location,\n    blocks.course_order as course_order,\n    transcripts.actor_id as actor_id,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom {{ ref(\"video_transcript_events\") }} transcripts\njoin\n    {{ ref(\"dim_course_blocks\") }} blocks\n    on (\n        transcripts.course_key = blocks.course_key\n        and transcripts.video_id = blocks.block_id\n    )\nleft outer join\n    {{ ref(\"dim_user_pii\") }} users on toUUID(actor_id) = users.external_user_id\nwhere transcripts.cc_enabled", "language": "sql", "refs": [{"name": "video_transcript_events", "package": null, "version": null}, {"name": "dim_course_blocks", "package": null, "version": null}, {"name": "dim_user_pii", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.aspects.video_transcript_events", "model.aspects.dim_course_blocks", "model.aspects.dim_user_pii"]}, "compiled_path": "target/compiled/aspects/models/video/fact_transcript_usage.sql", "compiled": true, "compiled_code": "select\n    transcripts.emission_time as emission_time,\n    transcripts.org as org,\n    transcripts.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    transcripts.video_id as video_id,\n    blocks.block_name as video_name,\n    blocks.display_name_with_location as video_name_with_location,\n    blocks.course_order as course_order,\n    transcripts.actor_id as actor_id,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom `xapi`.`video_transcript_events` transcripts\njoin\n    `xapi`.`dim_course_blocks` blocks\n    on (\n        transcripts.course_key = blocks.course_key\n        and transcripts.video_id = blocks.block_id\n    )\nleft outer join\n    `xapi`.`dim_user_pii` users on toUUID(actor_id) = users.external_user_id\nwhere transcripts.cc_enabled", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.section_video_engagement": {"database": "", "schema": "xapi", "name": "section_video_engagement", "resource_type": "model", "package_name": "aspects", "path": "video/section_video_engagement.sql", "original_file_path": "models/video/section_video_engagement.sql", "unique_id": "model.aspects.section_video_engagement", "fqn": ["aspects", "video", "section_video_engagement"], "alias": "section_video_engagement", "checksum": {"name": "sha256", "checksum": "e1faecd8052346a0a55780f549f68d57b386ebdb31c0bcb9a9b98083a3466560"}, "config": {"enabled": true, "alias": null, "schema": "xapi", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    ReplacingMergeTree()", "order_by": "(org, course_key, section_block_id, actor_id)", "primary_key": "(org, course_key)"}, "tags": [], "description": "A record per course per section per learner with their engagement level", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_block_id": {"name": "section_block_id", "description": "The unique identifier for the section block", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "engagement_level": {"name": "engagement_level", "description": "The engagement level of the learner with the section", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/video/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "schema": "xapi", "engine": "\n    ReplacingMergeTree()", "primary_key": "(org, course_key)", "order_by": "(org, course_key, section_block_id, actor_id)"}, "created_at": 1716584567.514602, "relation_name": "`xapi`.`section_video_engagement`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        schema=env_var(\"ASPECTS_XAPI_DATABASE\", \"xapi\"),\n        engine=get_engine(\"ReplacingMergeTree()\"),\n        primary_key=\"(org, course_key)\",\n        order_by=\"(org, course_key, section_block_id, actor_id)\",\n    )\n}}\n\nwith\n    viewed_subsection_videos as (\n        select distinct\n            date(emission_time) as viewed_on,\n            org,\n            course_key,\n            {{ section_from_display(\"video_name_with_location\") }} as section_number,\n            {{ subsection_from_display(\"video_name_with_location\") }}\n            as subsection_number,\n            actor_id,\n            video_id\n        from {{ ref(\"fact_video_plays\") }}\n    ),\n    fact_video_engagement_per_subsection as (\n        select\n            views.org as org,\n            views.course_key as course_key,\n            videos.section_with_name as section_with_name,\n            videos.subsection_with_name as subsection_with_name,\n            videos.item_count as item_count,\n            views.actor_id as actor_id,\n            views.video_id as video_id,\n            videos.section_block_id as section_block_id\n        from viewed_subsection_videos views\n        join\n            {{ ref(\"int_videos_per_subsection\") }} videos\n            on (\n                views.org = videos.org\n                and views.course_key = videos.course_key\n                and views.section_number = videos.section_number\n                and views.subsection_number = videos.subsection_number\n            )\n    ),\n    subsection_counts as (\n        select\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            count(distinct video_id) as videos_viewed,\n            case\n                when videos_viewed = 0\n                then 'No videos viewed yet'\n                when videos_viewed = item_count\n                then 'All videos viewed'\n                else 'At least one video viewed'\n            end as engagement_level,\n            section_block_id\n        from fact_video_engagement_per_subsection\n        group by\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            section_block_id\n    ),\n    section_counts as (\n        select\n            org,\n            course_key,\n            actor_id,\n            sum(item_count) as item_count,\n            sum(videos_viewed) as videos_viewed,\n            case\n                when videos_viewed = 0\n                then 'No videos viewed yet'\n                when videos_viewed = item_count\n                then 'All videos viewed'\n                else 'At least one video viewed'\n            end as engagement_level,\n            section_block_id\n        from subsection_counts\n        group by org, course_key, section_block_id, actor_id\n    )\nselect org, course_key, actor_id, section_block_id, engagement_level\nfrom section_counts", "language": "sql", "refs": [{"name": "fact_video_plays", "package": null, "version": null}, {"name": "int_videos_per_subsection", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine", "macro.aspects.section_from_display", "macro.aspects.subsection_from_display"], "nodes": ["model.aspects.fact_video_plays", "model.aspects.int_videos_per_subsection"]}, "compiled_path": "target/compiled/aspects/models/video/section_video_engagement.sql", "compiled": true, "compiled_code": "\n\nwith\n    viewed_subsection_videos as (\n        select distinct\n            date(emission_time) as viewed_on,\n            org,\n            course_key,\n            \n    concat(\n        splitByString(\n            ':', splitByString(' - ', video_name_with_location)[1], 1\n        )[1],\n        ':0:0'\n    )\n as section_number,\n            \n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', video_name_with_location)[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n\n            as subsection_number,\n            actor_id,\n            video_id\n        from `xapi`.`fact_video_plays`\n    ),\n    fact_video_engagement_per_subsection as (\n        select\n            views.org as org,\n            views.course_key as course_key,\n            videos.section_with_name as section_with_name,\n            videos.subsection_with_name as subsection_with_name,\n            videos.item_count as item_count,\n            views.actor_id as actor_id,\n            views.video_id as video_id,\n            videos.section_block_id as section_block_id\n        from viewed_subsection_videos views\n        join\n            `xapi`.`int_videos_per_subsection` videos\n            on (\n                views.org = videos.org\n                and views.course_key = videos.course_key\n                and views.section_number = videos.section_number\n                and views.subsection_number = videos.subsection_number\n            )\n    ),\n    subsection_counts as (\n        select\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            count(distinct video_id) as videos_viewed,\n            case\n                when videos_viewed = 0\n                then 'No videos viewed yet'\n                when videos_viewed = item_count\n                then 'All videos viewed'\n                else 'At least one video viewed'\n            end as engagement_level,\n            section_block_id\n        from fact_video_engagement_per_subsection\n        group by\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            section_block_id\n    ),\n    section_counts as (\n        select\n            org,\n            course_key,\n            actor_id,\n            sum(item_count) as item_count,\n            sum(videos_viewed) as videos_viewed,\n            case\n                when videos_viewed = 0\n                then 'No videos viewed yet'\n                when videos_viewed = item_count\n                then 'All videos viewed'\n                else 'At least one video viewed'\n            end as engagement_level,\n            section_block_id\n        from subsection_counts\n        group by org, course_key, section_block_id, actor_id\n    )\nselect org, course_key, actor_id, section_block_id, engagement_level\nfrom section_counts", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_watched_video_segments": {"database": "", "schema": "xapi", "name": "fact_watched_video_segments", "resource_type": "model", "package_name": "aspects", "path": "video/fact_watched_video_segments.sql", "original_file_path": "models/video/fact_watched_video_segments.sql", "unique_id": "model.aspects.fact_watched_video_segments", "fqn": ["aspects", "video", "fact_watched_video_segments"], "alias": "fact_watched_video_segments", "checksum": {"name": "sha256", "checksum": "35b6e1b56277a723b15fd4e085c20e27f285aa7dfe452c188e68ee3a3be10c42"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A dataset with one record per learner per video segment watched in a course", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_with_name": {"name": "section_with_name", "description": "The name of the section this subsection belongs to, with section_number prepended", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "subsection_with_name": {"name": "subsection_with_name", "description": "The name of the subsection, with section_number prepended", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "video_name": {"name": "video_name", "description": "The name of the video", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "video_name_with_location": {"name": "video_name_with_location", "description": "The name of the video with the section and subsection", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "started_at": {"name": "started_at", "description": "The time the video segment was started", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "segment_start": {"name": "segment_start", "description": "The start position of the segment", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "segment_range": {"name": "segment_range", "description": "An string representing the interval of the watched segment", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "video_duration": {"name": "video_duration", "description": "The duration of the video in seconds", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "start_position": {"name": "start_position", "description": "The start position of the segment", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the learner", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the learner", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the learner", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/video/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.5137038, "relation_name": "`xapi`.`fact_watched_video_segments`", "raw_code": "with\n    video_events as (\n        select\n            emission_time,\n            org,\n            course_key,\n            splitByString('/xblock/', object_id)[-1] as video_id,\n            actor_id,\n            verb_id,\n            video_position,\n            video_duration\n        from {{ ref(\"video_playback_events\") }}\n    ),\n    starts as (\n        select *\n        from video_events\n        where verb_id = 'https://w3id.org/xapi/video/verbs/played'\n    ),\n    ends as (\n        select *\n        from video_events\n        where\n            verb_id in (\n                'http://adlnet.gov/expapi/verbs/completed',\n                'https://w3id.org/xapi/video/verbs/seeked',\n                'https://w3id.org/xapi/video/verbs/paused',\n                'http://adlnet.gov/expapi/verbs/terminated'\n            )\n    ),\n    segments as (\n        select\n            starts.org as org,\n            starts.course_key as course_key,\n            starts.video_id as video_id,\n            starts.actor_id,\n            cast(starts.video_position as Int32) as start_position,\n            cast(ends.video_position as Int32) as end_position,\n            starts.emission_time as started_at,\n            ends.emission_time as ended_at,\n            ends.verb_id as end_type,\n            starts.video_duration as video_duration\n        from starts left\n        asof join\n            ends\n            on (\n                starts.org = ends.org\n                and starts.course_key = ends.course_key\n                and starts.video_id = ends.video_id\n                and starts.actor_id = ends.actor_id\n                and starts.emission_time < ends.emission_time\n            )\n    ),\n    enriched_segments as (\n        select\n            segments.org as org,\n            segments.course_key as course_key,\n            blocks.course_name as course_name,\n            blocks.course_run as course_run,\n            blocks.section_with_name as section_with_name,\n            blocks.subsection_with_name as subsection_with_name,\n            blocks.block_name as video_name,\n            blocks.display_name_with_location as video_name_with_location,\n            segments.actor_id as actor_id,\n            segments.started_at as started_at,\n            segments.start_position - (segments.start_position % 5) as start_position,\n            segments.end_position - (segments.end_position % 5) as end_position,\n            segments.video_duration as video_duration\n        from segments\n        join\n            {{ ref(\"dim_course_blocks_extended\") }} blocks\n            on (\n                segments.course_key = blocks.course_key\n                and segments.video_id = blocks.block_id\n            )\n    )\n\nselect\n    org,\n    course_key,\n    course_name,\n    course_run,\n    section_with_name,\n    subsection_with_name,\n    video_name,\n    video_name_with_location,\n    actor_id,\n    started_at,\n    arrayJoin(range(start_position, end_position, 5)) as segment_start,\n    video_duration,\n    CONCAT(toString(segment_start), '-', toString(segment_start + 4)) as segment_range,\n    start_position,\n    username,\n    name,\n    email\nfrom enriched_segments\nleft outer join\n    {{ ref(\"dim_user_pii\") }} users on toUUID(actor_id) = users.external_user_id\norder by start_position", "language": "sql", "refs": [{"name": "video_playback_events", "package": null, "version": null}, {"name": "dim_course_blocks_extended", "package": null, "version": null}, {"name": "dim_user_pii", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.aspects.video_playback_events", "model.aspects.dim_course_blocks_extended", "model.aspects.dim_user_pii"]}, "compiled_path": "target/compiled/aspects/models/video/fact_watched_video_segments.sql", "compiled": true, "compiled_code": "with\n    video_events as (\n        select\n            emission_time,\n            org,\n            course_key,\n            splitByString('/xblock/', object_id)[-1] as video_id,\n            actor_id,\n            verb_id,\n            video_position,\n            video_duration\n        from `xapi`.`video_playback_events`\n    ),\n    starts as (\n        select *\n        from video_events\n        where verb_id = 'https://w3id.org/xapi/video/verbs/played'\n    ),\n    ends as (\n        select *\n        from video_events\n        where\n            verb_id in (\n                'http://adlnet.gov/expapi/verbs/completed',\n                'https://w3id.org/xapi/video/verbs/seeked',\n                'https://w3id.org/xapi/video/verbs/paused',\n                'http://adlnet.gov/expapi/verbs/terminated'\n            )\n    ),\n    segments as (\n        select\n            starts.org as org,\n            starts.course_key as course_key,\n            starts.video_id as video_id,\n            starts.actor_id,\n            cast(starts.video_position as Int32) as start_position,\n            cast(ends.video_position as Int32) as end_position,\n            starts.emission_time as started_at,\n            ends.emission_time as ended_at,\n            ends.verb_id as end_type,\n            starts.video_duration as video_duration\n        from starts left\n        asof join\n            ends\n            on (\n                starts.org = ends.org\n                and starts.course_key = ends.course_key\n                and starts.video_id = ends.video_id\n                and starts.actor_id = ends.actor_id\n                and starts.emission_time < ends.emission_time\n            )\n    ),\n    enriched_segments as (\n        select\n            segments.org as org,\n            segments.course_key as course_key,\n            blocks.course_name as course_name,\n            blocks.course_run as course_run,\n            blocks.section_with_name as section_with_name,\n            blocks.subsection_with_name as subsection_with_name,\n            blocks.block_name as video_name,\n            blocks.display_name_with_location as video_name_with_location,\n            segments.actor_id as actor_id,\n            segments.started_at as started_at,\n            segments.start_position - (segments.start_position % 5) as start_position,\n            segments.end_position - (segments.end_position % 5) as end_position,\n            segments.video_duration as video_duration\n        from segments\n        join\n            `xapi`.`dim_course_blocks_extended` blocks\n            on (\n                segments.course_key = blocks.course_key\n                and segments.video_id = blocks.block_id\n            )\n    )\n\nselect\n    org,\n    course_key,\n    course_name,\n    course_run,\n    section_with_name,\n    subsection_with_name,\n    video_name,\n    video_name_with_location,\n    actor_id,\n    started_at,\n    arrayJoin(range(start_position, end_position, 5)) as segment_start,\n    video_duration,\n    CONCAT(toString(segment_start), '-', toString(segment_start + 4)) as segment_range,\n    start_position,\n    username,\n    name,\n    email\nfrom enriched_segments\nleft outer join\n    `xapi`.`dim_user_pii` users on toUUID(actor_id) = users.external_user_id\norder by start_position", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.learner_summary": {"database": "", "schema": "xapi", "name": "learner_summary", "resource_type": "model", "package_name": "aspects", "path": "learners/learner_summary.sql", "original_file_path": "models/learners/learner_summary.sql", "unique_id": "model.aspects.learner_summary", "fqn": ["aspects", "learners", "learner_summary"], "alias": "learner_summary", "checksum": {"name": "sha256", "checksum": "f3d2129d676f5f791598303e8986706794a494aaa33e6c2760f9c8d69f8eb345"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Summary of a learner with their grade and enrollment status", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "approving_state": {"name": "approving_state", "description": "The most recent approving state for the learner", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "enrollment_mode": {"name": "enrollment_mode", "description": "The mode of enrollment", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "enrollment_status": {"name": "enrollment_status", "description": "Whether a learner is actively enrolled in a course", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "course_grade": {"name": "course_grade", "description": "The most recent grade for the learner", "meta": {}, "data_type": "float64", "constraints": [], "quote": null, "tags": []}, "grade_bucket": {"name": "grade_bucket", "description": "A displayable value of grades sorted into 10% buckets. Useful for grouping grades together to show high-level learner performance", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "emission_time": {"name": "emission_time", "description": "The timestamp, to the second, of the most recent enrollment action for this learner and course.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": []}, "last_visited": {"name": "last_visited", "description": "The timestamp, to the second, of the most recent time the learner visited the course.", "meta": {}, "data_type": "DateTime", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/learners/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.542382, "relation_name": "`xapi`.`learner_summary`", "raw_code": "with\n    latest_emission_time as (\n        select course_key, actor_id, MAX(emission_time) as last_visited\n        from {{ ref(\"fact_navigation\") }}\n        group by course_key, actor_id\n    ),\n    enrollment_status as (\n        select course_key, actor_id, MAX(emission_time) as max_emission_time\n        from {{ ref(\"fact_enrollment_status\") }}\n        group by course_key, actor_id\n    )\nselect\n    fss.org as org,\n    fss.course_key as course_key,\n    fss.actor_id as actor_id,\n    fss.course_name as course_name,\n    fss.course_run as course_run,\n    fss.approving_state as approving_state,\n    fss.enrollment_mode as enrollment_mode,\n    fss.enrollment_status as enrollment_status,\n    fss.course_grade as course_grade,\n    fss.grade_bucket as grade_bucket,\n    fss.username as username,\n    fss.name as name,\n    fss.email as email,\n    fes.max_emission_time as emission_time,\n    let.last_visited as last_visited\nfrom {{ ref(\"fact_student_status\") }} fss\nleft join\n    enrollment_status fes\n    on fss.course_key = fes.course_key\n    and fss.actor_id = fes.actor_id\nleft join\n    latest_emission_time let\n    on fss.course_key = let.course_key\n    and fss.actor_id = let.actor_id", "language": "sql", "refs": [{"name": "fact_navigation", "package": null, "version": null}, {"name": "fact_enrollment_status", "package": null, "version": null}, {"name": "fact_student_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.aspects.fact_navigation", "model.aspects.fact_enrollment_status", "model.aspects.fact_student_status"]}, "compiled_path": "target/compiled/aspects/models/learners/learner_summary.sql", "compiled": true, "compiled_code": "with\n    latest_emission_time as (\n        select course_key, actor_id, MAX(emission_time) as last_visited\n        from `xapi`.`fact_navigation`\n        group by course_key, actor_id\n    ),\n    enrollment_status as (\n        select course_key, actor_id, MAX(emission_time) as max_emission_time\n        from `xapi`.`fact_enrollment_status`\n        group by course_key, actor_id\n    )\nselect\n    fss.org as org,\n    fss.course_key as course_key,\n    fss.actor_id as actor_id,\n    fss.course_name as course_name,\n    fss.course_run as course_run,\n    fss.approving_state as approving_state,\n    fss.enrollment_mode as enrollment_mode,\n    fss.enrollment_status as enrollment_status,\n    fss.course_grade as course_grade,\n    fss.grade_bucket as grade_bucket,\n    fss.username as username,\n    fss.name as name,\n    fss.email as email,\n    fes.max_emission_time as emission_time,\n    let.last_visited as last_visited\nfrom `xapi`.`fact_student_status` fss\nleft join\n    enrollment_status fes\n    on fss.course_key = fes.course_key\n    and fss.actor_id = fes.actor_id\nleft join\n    latest_emission_time let\n    on fss.course_key = let.course_key\n    and fss.actor_id = let.actor_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_pageview_engagement": {"database": "", "schema": "xapi", "name": "fact_pageview_engagement", "resource_type": "model", "package_name": "aspects", "path": "navigation/fact_pageview_engagement.sql", "original_file_path": "models/navigation/fact_pageview_engagement.sql", "unique_id": "model.aspects.fact_pageview_engagement", "fqn": ["aspects", "navigation", "fact_pageview_engagement"], "alias": "fact_pageview_engagement", "checksum": {"name": "sha256", "checksum": "800b948642e7a7d764a3a5991e7f4a5bf37e97d49a18ecb6baac61d9869a7bd0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A view for analyzing the number of page views per learner per section and subsection", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_with_name": {"name": "section_with_name", "description": "The name of the section", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "subsection_with_name": {"name": "subsection_with_name", "description": "The name of the subsection", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_subsection_name": {"name": "section_subsection_name", "description": "The name of the section or subsection", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "content_level": {"name": "content_level", "description": "The level at which page views are counted", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_subsection_page_engagement": {"name": "section_subsection_page_engagement", "description": "The total number of times a learner viewed pages in this section or subsection", "meta": {}, "data_type": "uint64", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/navigation/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.5597913, "relation_name": "`xapi`.`fact_pageview_engagement`", "raw_code": "with\n    subsection_counts as (\n        select\n            org,\n            course_key,\n            course_run,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            page_count,\n            count(distinct block_id) as pages_visited,\n            case\n                when pages_visited = 0\n                then 'No pages viewed yet'\n                when pages_visited = page_count\n                then 'All pages viewed'\n                else 'At least one page viewed'\n            end as engagement_level\n        from {{ ref(\"fact_navigation_completion\") }}\n        group by\n            org,\n            course_key,\n            course_run,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            page_count\n    ),\n    section_counts as (\n        select\n            org,\n            course_key,\n            course_run,\n            section_with_name,\n            '' as subsection_with_name,\n            actor_id,\n            sum(page_count) as page_count,\n            sum(pages_visited) as pages_visited,\n            case\n                when pages_visited = 0\n                then 'No pages viewed yet'\n                when pages_visited = page_count\n                then 'All pages viewed'\n                else 'At least one page viewed'\n            end as engagement_level\n        from subsection_counts\n        group by\n            org,\n            course_key,\n            course_run,\n            section_with_name,\n            subsection_with_name,\n            actor_id\n    ),\n    pageview_counts as (\n        select\n            org,\n            course_key,\n            course_run,\n            section_with_name as section_with_name,\n            subsection_with_name as subsection_with_name,\n            subsection_with_name as section_subsection_name,\n            'subsection' as content_level,\n            actor_id as actor_id,\n            engagement_level as section_subsection_page_engagement\n        from subsection_counts\n        union all\n        select\n            org,\n            course_key,\n            course_run,\n            section_with_name as section_with_name,\n            subsection_with_name as subsection_with_name,\n            section_with_name as section_subsection_name,\n            'section' as content_level,\n            actor_id as actor_id,\n            engagement_level as section_subsection_page_engagement\n        from section_counts\n\n    )\n\nselect\n    pv.org as org,\n    pv.course_key as course_key,\n    pv.course_run as course_run,\n    pv.section_with_name as section_with_name,\n    pv.subsection_with_name as subsection_with_name,\n    pv.section_subsection_name as section_subsection_name,\n    pv.content_level as content_level,\n    pv.actor_id as actor_id,\n    pv.section_subsection_page_engagement as section_subsection_page_engagement,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom pageview_counts pv\nleft outer join\n    {{ ref(\"dim_user_pii\") }} users on toUUID(actor_id) = users.external_user_id", "language": "sql", "refs": [{"name": "fact_navigation_completion", "package": null, "version": null}, {"name": "dim_user_pii", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.aspects.fact_navigation_completion", "model.aspects.dim_user_pii"]}, "compiled_path": "target/compiled/aspects/models/navigation/fact_pageview_engagement.sql", "compiled": true, "compiled_code": "with\n    subsection_counts as (\n        select\n            org,\n            course_key,\n            course_run,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            page_count,\n            count(distinct block_id) as pages_visited,\n            case\n                when pages_visited = 0\n                then 'No pages viewed yet'\n                when pages_visited = page_count\n                then 'All pages viewed'\n                else 'At least one page viewed'\n            end as engagement_level\n        from `xapi`.`fact_navigation_completion`\n        group by\n            org,\n            course_key,\n            course_run,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            page_count\n    ),\n    section_counts as (\n        select\n            org,\n            course_key,\n            course_run,\n            section_with_name,\n            '' as subsection_with_name,\n            actor_id,\n            sum(page_count) as page_count,\n            sum(pages_visited) as pages_visited,\n            case\n                when pages_visited = 0\n                then 'No pages viewed yet'\n                when pages_visited = page_count\n                then 'All pages viewed'\n                else 'At least one page viewed'\n            end as engagement_level\n        from subsection_counts\n        group by\n            org,\n            course_key,\n            course_run,\n            section_with_name,\n            subsection_with_name,\n            actor_id\n    ),\n    pageview_counts as (\n        select\n            org,\n            course_key,\n            course_run,\n            section_with_name as section_with_name,\n            subsection_with_name as subsection_with_name,\n            subsection_with_name as section_subsection_name,\n            'subsection' as content_level,\n            actor_id as actor_id,\n            engagement_level as section_subsection_page_engagement\n        from subsection_counts\n        union all\n        select\n            org,\n            course_key,\n            course_run,\n            section_with_name as section_with_name,\n            subsection_with_name as subsection_with_name,\n            section_with_name as section_subsection_name,\n            'section' as content_level,\n            actor_id as actor_id,\n            engagement_level as section_subsection_page_engagement\n        from section_counts\n\n    )\n\nselect\n    pv.org as org,\n    pv.course_key as course_key,\n    pv.course_run as course_run,\n    pv.section_with_name as section_with_name,\n    pv.subsection_with_name as subsection_with_name,\n    pv.section_subsection_name as section_subsection_name,\n    pv.content_level as content_level,\n    pv.actor_id as actor_id,\n    pv.section_subsection_page_engagement as section_subsection_page_engagement,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom pageview_counts pv\nleft outer join\n    `xapi`.`dim_user_pii` users on toUUID(actor_id) = users.external_user_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_navigation_completion": {"database": "", "schema": "xapi", "name": "fact_navigation_completion", "resource_type": "model", "package_name": "aspects", "path": "navigation/fact_navigation_completion.sql", "original_file_path": "models/navigation/fact_navigation_completion.sql", "unique_id": "model.aspects.fact_navigation_completion", "fqn": ["aspects", "navigation", "fact_navigation_completion"], "alias": "fact_navigation_completion", "checksum": {"name": "sha256", "checksum": "049e622b90e6af181cc65c6e53e0a7150aac1d0103de56eb33bedc2729f8dc26"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A view for analyzing how many pages a learner has visited in a section or subsection", "columns": {"visited_on": {"name": "visited_on", "description": "The date the page was visited", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The course name", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_with_name": {"name": "section_with_name", "description": "The name of the section", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "subsection_with_name": {"name": "subsection_with_name", "description": "The name of the subsection", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "page_count": {"name": "page_count", "description": "The number of pages in the associated subsection", "meta": {}, "data_type": "uint64", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The ID of the specific page visited", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_order": {"name": "course_order", "description": "The sort order of this block in the course across all course blocks", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/navigation/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.5569408, "relation_name": "`xapi`.`fact_navigation_completion`", "raw_code": "-- number of learners who've viewed all pages in a section/subsection\nwith\n    visited_subsection_pages as (\n        select distinct\n            date(emission_time) as visited_on,\n            org,\n            course_key,\n            course_name,\n            course_run,\n            {{ section_from_display(\"block_name_with_location\") }} as section_number,\n            {{ subsection_from_display(\"block_name_with_location\") }}\n            as subsection_number,\n            actor_id,\n            block_id\n        from {{ ref(\"fact_navigation\") }}\n    )\n\nselect\n    visits.visited_on as visited_on,\n    visits.org as org,\n    visits.course_key as course_key,\n    visits.course_name as course_name,\n    visits.course_run as course_run,\n    pages.section_with_name as section_with_name,\n    pages.subsection_with_name as subsection_with_name,\n    pages.course_order as course_order,\n    pages.page_count as page_count,\n    visits.actor_id as actor_id,\n    visits.block_id as block_id,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom visited_subsection_pages visits\njoin\n    {{ ref(\"int_pages_per_subsection\") }} pages\n    on (\n        visits.org = pages.org\n        and visits.course_key = pages.course_key\n        and visits.section_number = pages.section_number\n        and visits.subsection_number = pages.subsection_number\n    )\nleft outer join\n    {{ ref(\"dim_user_pii\") }} users on toUUID(actor_id) = users.external_user_id", "language": "sql", "refs": [{"name": "fact_navigation", "package": null, "version": null}, {"name": "int_pages_per_subsection", "package": null, "version": null}, {"name": "dim_user_pii", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.section_from_display", "macro.aspects.subsection_from_display"], "nodes": ["model.aspects.fact_navigation", "model.aspects.int_pages_per_subsection", "model.aspects.dim_user_pii"]}, "compiled_path": "target/compiled/aspects/models/navigation/fact_navigation_completion.sql", "compiled": true, "compiled_code": "-- number of learners who've viewed all pages in a section/subsection\nwith\n    visited_subsection_pages as (\n        select distinct\n            date(emission_time) as visited_on,\n            org,\n            course_key,\n            course_name,\n            course_run,\n            \n    concat(\n        splitByString(\n            ':', splitByString(' - ', block_name_with_location)[1], 1\n        )[1],\n        ':0:0'\n    )\n as section_number,\n            \n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', block_name_with_location)[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n\n            as subsection_number,\n            actor_id,\n            block_id\n        from `xapi`.`fact_navigation`\n    )\n\nselect\n    visits.visited_on as visited_on,\n    visits.org as org,\n    visits.course_key as course_key,\n    visits.course_name as course_name,\n    visits.course_run as course_run,\n    pages.section_with_name as section_with_name,\n    pages.subsection_with_name as subsection_with_name,\n    pages.course_order as course_order,\n    pages.page_count as page_count,\n    visits.actor_id as actor_id,\n    visits.block_id as block_id,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom visited_subsection_pages visits\njoin\n    `xapi`.`int_pages_per_subsection` pages\n    on (\n        visits.org = pages.org\n        and visits.course_key = pages.course_key\n        and visits.section_number = pages.section_number\n        and visits.subsection_number = pages.subsection_number\n    )\nleft outer join\n    `xapi`.`dim_user_pii` users on toUUID(actor_id) = users.external_user_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_navigation_dropoff": {"database": "", "schema": "xapi", "name": "fact_navigation_dropoff", "resource_type": "model", "package_name": "aspects", "path": "navigation/fact_navigation_dropoff.sql", "original_file_path": "models/navigation/fact_navigation_dropoff.sql", "unique_id": "model.aspects.fact_navigation_dropoff", "fqn": ["aspects", "navigation", "fact_navigation_dropoff"], "alias": "fact_navigation_dropoff", "checksum": {"name": "sha256", "checksum": "88f4e60f9a1e26bb796986f68e268e6871d91cc9fd778cfba2d4c22278c1a519"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A view for analyzing the number of page visits per learner per section and subsection", "columns": {"emission_date": {"name": "emission_date", "description": "The date the event was emitted", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "rollup_name": {"name": "rollup_name", "description": "The level at which page views are counted", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "block_name": {"name": "block_name", "description": "The name of the section or subsection", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "total_views": {"name": "total_views", "description": "The total number of times a learner viewed pages in this section or subsection on a given day", "meta": {}, "data_type": "uint64", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_order": {"name": "course_order", "description": "The sort order of this block in the course across all course blocks", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/navigation/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.5548587, "relation_name": "`xapi`.`fact_navigation_dropoff`", "raw_code": "with\n    blocks as (\n        select\n            org,\n            course_key,\n            display_name_with_location,\n            hierarchy_location,\n            course_order\n        from {{ ref(\"dim_course_blocks\") }}\n        where block_id like '%@chapter+block@%' or block_id like '%@sequential+block@%'\n    ),\n    page_views_by_section as (\n        -- section: x:0:0\n        -- take just the first number from the hierarchy location\n        select\n            date(emission_time) as emission_date,\n            org,\n            course_key,\n            {{ section_from_display(\"block_name_with_location\") }} as section_number,\n            actor_id,\n            count(*) as total_views\n        from {{ ref(\"fact_navigation\") }}\n        group by emission_date, org, course_key, section_number, actor_id\n    ),\n    page_views_by_subsection as (\n        -- subsection: x:y:0\n        -- take the first two numbers from the hierarchy location\n        select\n            date(emission_time) as emission_date,\n            org,\n            course_key,\n            {{ subsection_from_display(\"block_name_with_location\") }}\n            as subsection_number,\n            actor_id,\n            count(*) as total_views\n        from {{ ref(\"fact_navigation\") }}\n        group by emission_date, org, course_key, subsection_number, actor_id\n    ),\n    page_views as (\n        select\n            emission_date,\n            org,\n            course_key,\n            'section' as rollup_name,\n            section_number as hierarchy_location,\n            actor_id,\n            sum(total_views) as total_views\n        from page_views_by_section\n        group by\n            emission_date, org, course_key, rollup_name, hierarchy_location, actor_id\n        union all\n        select\n            emission_date,\n            org,\n            course_key,\n            'subsection' as rollup_name,\n            subsection_number as hierarchy_location,\n            actor_id,\n            sum(total_views) as total_views\n        from page_views_by_subsection\n        group by\n            emission_date, org, course_key, rollup_name, hierarchy_location, actor_id\n    )\n\nselect\n    page_views.emission_date as emission_date,\n    page_views.org as org,\n    page_views.course_key as course_key,\n    page_views.rollup_name as rollup_name,\n    blocks.display_name_with_location as block_name,\n    blocks.course_order as course_order,\n    page_views.actor_id as actor_id,\n    page_views.total_views as total_views,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom page_views\njoin\n    blocks\n    on (\n        page_views.org = blocks.org\n        and page_views.course_key = blocks.course_key\n        and page_views.hierarchy_location = blocks.hierarchy_location\n    )\nleft outer join\n    {{ ref(\"dim_user_pii\") }} users on toUUID(actor_id) = users.external_user_id", "language": "sql", "refs": [{"name": "dim_course_blocks", "package": null, "version": null}, {"name": "fact_navigation", "package": null, "version": null}, {"name": "fact_navigation", "package": null, "version": null}, {"name": "dim_user_pii", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.section_from_display", "macro.aspects.subsection_from_display"], "nodes": ["model.aspects.dim_course_blocks", "model.aspects.fact_navigation", "model.aspects.dim_user_pii"]}, "compiled_path": "target/compiled/aspects/models/navigation/fact_navigation_dropoff.sql", "compiled": true, "compiled_code": "with\n    blocks as (\n        select\n            org,\n            course_key,\n            display_name_with_location,\n            hierarchy_location,\n            course_order\n        from `xapi`.`dim_course_blocks`\n        where block_id like '%@chapter+block@%' or block_id like '%@sequential+block@%'\n    ),\n    page_views_by_section as (\n        -- section: x:0:0\n        -- take just the first number from the hierarchy location\n        select\n            date(emission_time) as emission_date,\n            org,\n            course_key,\n            \n    concat(\n        splitByString(\n            ':', splitByString(' - ', block_name_with_location)[1], 1\n        )[1],\n        ':0:0'\n    )\n as section_number,\n            actor_id,\n            count(*) as total_views\n        from `xapi`.`fact_navigation`\n        group by emission_date, org, course_key, section_number, actor_id\n    ),\n    page_views_by_subsection as (\n        -- subsection: x:y:0\n        -- take the first two numbers from the hierarchy location\n        select\n            date(emission_time) as emission_date,\n            org,\n            course_key,\n            \n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', block_name_with_location)[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n\n            as subsection_number,\n            actor_id,\n            count(*) as total_views\n        from `xapi`.`fact_navigation`\n        group by emission_date, org, course_key, subsection_number, actor_id\n    ),\n    page_views as (\n        select\n            emission_date,\n            org,\n            course_key,\n            'section' as rollup_name,\n            section_number as hierarchy_location,\n            actor_id,\n            sum(total_views) as total_views\n        from page_views_by_section\n        group by\n            emission_date, org, course_key, rollup_name, hierarchy_location, actor_id\n        union all\n        select\n            emission_date,\n            org,\n            course_key,\n            'subsection' as rollup_name,\n            subsection_number as hierarchy_location,\n            actor_id,\n            sum(total_views) as total_views\n        from page_views_by_subsection\n        group by\n            emission_date, org, course_key, rollup_name, hierarchy_location, actor_id\n    )\n\nselect\n    page_views.emission_date as emission_date,\n    page_views.org as org,\n    page_views.course_key as course_key,\n    page_views.rollup_name as rollup_name,\n    blocks.display_name_with_location as block_name,\n    blocks.course_order as course_order,\n    page_views.actor_id as actor_id,\n    page_views.total_views as total_views,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom page_views\njoin\n    blocks\n    on (\n        page_views.org = blocks.org\n        and page_views.course_key = blocks.course_key\n        and page_views.hierarchy_location = blocks.hierarchy_location\n    )\nleft outer join\n    `xapi`.`dim_user_pii` users on toUUID(actor_id) = users.external_user_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.int_pages_per_subsection": {"database": "", "schema": "xapi", "name": "int_pages_per_subsection", "resource_type": "model", "package_name": "aspects", "path": "navigation/int_pages_per_subsection.sql", "original_file_path": "models/navigation/int_pages_per_subsection.sql", "unique_id": "model.aspects.int_pages_per_subsection", "fqn": ["aspects", "navigation", "int_pages_per_subsection"], "alias": "int_pages_per_subsection", "checksum": {"name": "sha256", "checksum": "d2274bb92d161aab09c6df3be1d5b83dc2fd20b859bd6e1febfd6b6f9ad3664a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A view for analyzing the number of pages in each subsection", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_number": {"name": "section_number", "description": "The section number", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "section_with_name": {"name": "section_with_name", "description": "The section number and name", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "subsection_number": {"name": "subsection_number", "description": "The subsection number", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "subsection_with_name": {"name": "subsection_with_name", "description": "The subsection number and name", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "page_count": {"name": "page_count", "description": "The number of pages in the associated subsection", "meta": {}, "data_type": "uint64", "constraints": [], "quote": null, "tags": []}, "course_order": {"name": "course_order", "description": "The sort order of this block in the course across all course blocks", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/navigation/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.5579865, "relation_name": "`xapi`.`int_pages_per_subsection`", "raw_code": "with\n    pages_per_subsection as (\n        select\n            org,\n            course_key,\n            section_number,\n            subsection_number,\n            course_order,\n            count(*) as page_count\n        from {{ ref(\"dim_course_blocks\") }}\n        where block_id like '%@vertical+block@%'\n        group by org, course_key, section_number, subsection_number, course_order\n    )\n\nselect\n    pps.org as org,\n    pps.course_key as course_key,\n    pps.section_number as section_number,\n    section_blocks.display_name_with_location as section_with_name,\n    pps.subsection_number as subsection_number,\n    subsection_blocks.display_name_with_location as subsection_with_name,\n    pps.course_order as course_order,\n    pps.page_count as page_count\nfrom pages_per_subsection pps\nleft join\n    {{ ref(\"dim_course_blocks\") }} section_blocks\n    on (\n        pps.section_number = section_blocks.hierarchy_location\n        and pps.org = section_blocks.org\n        and pps.course_key = section_blocks.course_key\n        and section_blocks.block_id like '%@chapter+block@%'\n    )\nleft join\n    {{ ref(\"dim_course_blocks\") }} subsection_blocks\n    on (\n        pps.subsection_number = subsection_blocks.hierarchy_location\n        and pps.org = subsection_blocks.org\n        and pps.course_key = subsection_blocks.course_key\n        and subsection_blocks.block_id like '%@sequential+block@%'\n    )", "language": "sql", "refs": [{"name": "dim_course_blocks", "package": null, "version": null}, {"name": "dim_course_blocks", "package": null, "version": null}, {"name": "dim_course_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.aspects.dim_course_blocks"]}, "compiled_path": "target/compiled/aspects/models/navigation/int_pages_per_subsection.sql", "compiled": true, "compiled_code": "with\n    pages_per_subsection as (\n        select\n            org,\n            course_key,\n            section_number,\n            subsection_number,\n            course_order,\n            count(*) as page_count\n        from `xapi`.`dim_course_blocks`\n        where block_id like '%@vertical+block@%'\n        group by org, course_key, section_number, subsection_number, course_order\n    )\n\nselect\n    pps.org as org,\n    pps.course_key as course_key,\n    pps.section_number as section_number,\n    section_blocks.display_name_with_location as section_with_name,\n    pps.subsection_number as subsection_number,\n    subsection_blocks.display_name_with_location as subsection_with_name,\n    pps.course_order as course_order,\n    pps.page_count as page_count\nfrom pages_per_subsection pps\nleft join\n    `xapi`.`dim_course_blocks` section_blocks\n    on (\n        pps.section_number = section_blocks.hierarchy_location\n        and pps.org = section_blocks.org\n        and pps.course_key = section_blocks.course_key\n        and section_blocks.block_id like '%@chapter+block@%'\n    )\nleft join\n    `xapi`.`dim_course_blocks` subsection_blocks\n    on (\n        pps.subsection_number = subsection_blocks.hierarchy_location\n        and pps.org = subsection_blocks.org\n        and pps.course_key = subsection_blocks.course_key\n        and subsection_blocks.block_id like '%@sequential+block@%'\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_learner_last_course_visit": {"database": "", "schema": "xapi", "name": "fact_learner_last_course_visit", "resource_type": "model", "package_name": "aspects", "path": "navigation/fact_learner_last_course_visit.sql", "original_file_path": "models/navigation/fact_learner_last_course_visit.sql", "unique_id": "model.aspects.fact_learner_last_course_visit", "fqn": ["aspects", "navigation", "fact_learner_last_course_visit"], "alias": "fact_learner_last_course_visit", "checksum": {"name": "sha256", "checksum": "1742158805f568d348f81e63dc240faa230563f6da0943f11a22d5113c64f20b"}, "config": {"enabled": true, "alias": null, "schema": "xapi", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    ReplacingMergeTree()", "order_by": "(org, course_key, actor_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": "", "primary_key": "(org, course_key, actor_id)"}, "tags": [], "description": "A materialized view that stores a learners last navigation event timestamp for a course", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "emission_time": {"name": "emission_time", "description": "Timestamp, to the second, of when this event was emitted", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/navigation/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "schema": "xapi", "engine": "\n    ReplacingMergeTree()", "primary_key": "(org, course_key, actor_id)", "order_by": "(org, course_key, actor_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": ""}, "created_at": 1716584567.5605757, "relation_name": "`xapi`.`fact_learner_last_course_visit`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        schema=env_var(\"ASPECTS_XAPI_DATABASE\", \"xapi\"),\n        engine=get_engine(\"ReplacingMergeTree()\"),\n        primary_key=\"(org, course_key, actor_id)\",\n        order_by=\"(org, course_key, actor_id)\",\n        partition_by=\"(toYYYYMM(emission_time))\",\n        ttl=env_var(\"ASPECTS_DATA_TTL_EXPRESSION\", \"\"),\n    )\n}}\n\nselect org, course_key, actor_id, max(emission_time) as emission_time\nfrom {{ ref(\"navigation_events\") }}\ngroup by org, course_key, actor_id", "language": "sql", "refs": [{"name": "navigation_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine"], "nodes": ["model.aspects.navigation_events"]}, "compiled_path": "target/compiled/aspects/models/navigation/fact_learner_last_course_visit.sql", "compiled": true, "compiled_code": "\n\nselect org, course_key, actor_id, max(emission_time) as emission_time\nfrom `xapi`.`navigation_events`\ngroup by org, course_key, actor_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_navigation": {"database": "", "schema": "xapi", "name": "fact_navigation", "resource_type": "model", "package_name": "aspects", "path": "navigation/fact_navigation.sql", "original_file_path": "models/navigation/fact_navigation.sql", "unique_id": "model.aspects.fact_navigation", "fqn": ["aspects", "navigation", "fact_navigation"], "alias": "fact_navigation", "checksum": {"name": "sha256", "checksum": "fedcdf93920cee5d71d2a1d279ba3a6df2d2ffbdeab7d91e09bd165dc3921abe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A view of navigation_events enriched with course and block metadata", "columns": {"emission_time": {"name": "emission_time", "description": "Timestamp, to the second, of when this event was emitted", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The LMS object identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "block_name": {"name": "block_name", "description": "The block's name", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "block_name_with_location": {"name": "block_name_with_location", "description": "The block's display name with section, subsection, and unit prepended to the name. This provides additional context when looking at block names and can help data consumers understand which block they are analyzing", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "object_type": {"name": "object_type", "description": "The type of object that the learner interacted with", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "starting_position": {"name": "starting_position", "description": "The tab in the unit navigation bar that the learner was viewing before clicking a link", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "ending_point": {"name": "ending_point", "description": "The tab in the unit navigation bar that the learner selected to navigate to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_order": {"name": "course_order", "description": "The sort order of this block in the course across all course blocks", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/navigation/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.5524096, "relation_name": "`xapi`.`fact_navigation`", "raw_code": "select\n    navigation.emission_time as emission_time,\n    navigation.org as org,\n    navigation.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    navigation.actor_id as actor_id,\n    navigation.block_id as block_id,\n    blocks.block_name as block_name,\n    blocks.display_name_with_location as block_name_with_location,\n    blocks.course_order as course_order,\n    navigation.object_type as object_type,\n    navigation.starting_position as starting_position,\n    navigation.ending_point as ending_point,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom {{ ref(\"navigation_events\") }} navigation\njoin\n    {{ ref(\"dim_course_blocks\") }} blocks\n    on (\n        navigation.course_key = blocks.course_key\n        and navigation.block_id = blocks.block_id\n    )\nleft outer join\n    {{ ref(\"dim_user_pii\") }} users on toUUID(actor_id) = users.external_user_id", "language": "sql", "refs": [{"name": "navigation_events", "package": null, "version": null}, {"name": "dim_course_blocks", "package": null, "version": null}, {"name": "dim_user_pii", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.aspects.navigation_events", "model.aspects.dim_course_blocks", "model.aspects.dim_user_pii"]}, "compiled_path": "target/compiled/aspects/models/navigation/fact_navigation.sql", "compiled": true, "compiled_code": "select\n    navigation.emission_time as emission_time,\n    navigation.org as org,\n    navigation.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    navigation.actor_id as actor_id,\n    navigation.block_id as block_id,\n    blocks.block_name as block_name,\n    blocks.display_name_with_location as block_name_with_location,\n    blocks.course_order as course_order,\n    navigation.object_type as object_type,\n    navigation.starting_position as starting_position,\n    navigation.ending_point as ending_point,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom `xapi`.`navigation_events` navigation\njoin\n    `xapi`.`dim_course_blocks` blocks\n    on (\n        navigation.course_key = blocks.course_key\n        and navigation.block_id = blocks.block_id\n    )\nleft outer join\n    `xapi`.`dim_user_pii` users on toUUID(actor_id) = users.external_user_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.navigation_events": {"database": "", "schema": "xapi", "name": "navigation_events", "resource_type": "model", "package_name": "aspects", "path": "navigation/navigation_events.sql", "original_file_path": "models/navigation/navigation_events.sql", "unique_id": "model.aspects.navigation_events", "fqn": ["aspects", "navigation", "navigation_events"], "alias": "navigation_events", "checksum": {"name": "sha256", "checksum": "13f3f5e96aea8814a5cfc2a0350a2574f385f3798ff084f3ec89c822a64bc9f1"}, "config": {"enabled": true, "alias": null, "schema": "xapi", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    ReplacingMergeTree()", "order_by": "(org, course_key, object_type, emission_time, actor_id, starting_position, event_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": "", "primary_key": "(org, course_key, object_type)"}, "tags": [], "description": "A materialized view for xAPI events related to course navigation", "columns": {"event_id": {"name": "event_id", "description": "The unique identifier for the event", "meta": {}, "data_type": "uuid", "constraints": [], "quote": null, "tags": []}, "emission_time": {"name": "emission_time", "description": "Timestamp, to the second, of when this event was emitted", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The LMS object identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "verb_id": {"name": "verb_id", "description": "The xAPI verb identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "object_type": {"name": "object_type", "description": "The type of object that the learner interacted with", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "starting_position": {"name": "starting_position", "description": "The tab in the unit navigation bar that the learner was viewing before clicking a link", "meta": {}, "data_type": "int64", "constraints": [], "quote": null, "tags": []}, "ending_point": {"name": "ending_point", "description": "The tab in the unit navigation bar that the learner selected to navigate to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/navigation/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "schema": "xapi", "engine": "\n    ReplacingMergeTree()", "primary_key": "(org, course_key, object_type)", "order_by": "(org, course_key, object_type, emission_time, actor_id, starting_position, event_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": ""}, "created_at": 1716584567.5501716, "relation_name": "`xapi`.`navigation_events`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        schema=env_var(\"ASPECTS_XAPI_DATABASE\", \"xapi\"),\n        engine=get_engine(\"ReplacingMergeTree()\"),\n        primary_key=\"(org, course_key, object_type)\",\n        order_by=\"(org, course_key, object_type, emission_time, actor_id, starting_position, event_id)\",\n        partition_by=\"(toYYYYMM(emission_time))\",\n        ttl=env_var(\"ASPECTS_DATA_TTL_EXPRESSION\", \"\"),\n    )\n}}\n\nselect\n    event_id,\n    cast(emission_time as DateTime) as emission_time,\n    actor_id,\n    splitByString('/xblock/', object_id)[-1] as block_id,\n    splitByString('/', course_id)[-1] as course_key,\n    org,\n    verb_id,\n    JSONExtractString(event, 'object', 'definition', 'type') as object_type,\n    -- clicking a link and selecting a module outline have no starting-position field\n    if(\n        object_type in (\n            'http://adlnet.gov/expapi/activities/link',\n            'http://adlnet.gov/expapi/activities/module'\n        ),\n        0,\n        JSONExtractInt(\n            event,\n            'context',\n            'extensions',\n            'http://id.tincanapi.com/extension/starting-position'\n        )\n    ) as starting_position,\n    JSONExtractString(\n        event, 'context', 'extensions', 'http://id.tincanapi.com/extension/ending-point'\n    ) as ending_point\nfrom {{ ref(\"xapi_events_all_parsed\") }}\nwhere verb_id in ('https://w3id.org/xapi/dod-isd/verbs/navigated')", "language": "sql", "refs": [{"name": "xapi_events_all_parsed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine"], "nodes": ["model.aspects.xapi_events_all_parsed"]}, "compiled_path": "target/compiled/aspects/models/navigation/navigation_events.sql", "compiled": true, "compiled_code": "\n\nselect\n    event_id,\n    cast(emission_time as DateTime) as emission_time,\n    actor_id,\n    splitByString('/xblock/', object_id)[-1] as block_id,\n    splitByString('/', course_id)[-1] as course_key,\n    org,\n    verb_id,\n    JSONExtractString(event, 'object', 'definition', 'type') as object_type,\n    -- clicking a link and selecting a module outline have no starting-position field\n    if(\n        object_type in (\n            'http://adlnet.gov/expapi/activities/link',\n            'http://adlnet.gov/expapi/activities/module'\n        ),\n        0,\n        JSONExtractInt(\n            event,\n            'context',\n            'extensions',\n            'http://id.tincanapi.com/extension/starting-position'\n        )\n    ) as starting_position,\n    JSONExtractString(\n        event, 'context', 'extensions', 'http://id.tincanapi.com/extension/ending-point'\n    ) as ending_point\nfrom `xapi`.`xapi_events_all_parsed`\nwhere verb_id in ('https://w3id.org/xapi/dod-isd/verbs/navigated')", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.dim_course_blocks": {"database": "", "schema": "xapi", "name": "dim_course_blocks", "resource_type": "model", "package_name": "aspects", "path": "courses/dim_course_blocks.sql", "original_file_path": "models/courses/dim_course_blocks.sql", "unique_id": "model.aspects.dim_course_blocks", "fqn": ["aspects", "courses", "dim_course_blocks"], "alias": "dim_course_blocks", "checksum": {"name": "sha256", "checksum": "79fc529d702625667a2420254145a444571c15df531484fa9b67c14f2a1a8714"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A denormalized table of course block information. This should be preferred over dim_course_blocks_extended when section and subsection names are not necessary to include in a model", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The block's unique identifier", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "block_name": {"name": "block_name", "description": "The block's name", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "section_number": {"name": "section_number", "description": "The section this block belongs to, formatted as <section location>:0:0", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "subsection_number": {"name": "subsection_number", "description": "The subsection this block belongs to, formatted as <section location>:<subsection location>:0", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "hierarchy_location": {"name": "hierarchy_location", "description": "The full section:subsection:unit hierarchy in which this block belongs", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "display_name_with_location": {"name": "display_name_with_location", "description": "The block's display name with section, subsection, and unit prepended to the name. This provides additional context when looking at block names and can help data consumers understand which block they are analyzing", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "graded": {"name": "graded", "description": "Whether the block is graded", "meta": {}, "data_type": "Boolean", "constraints": [], "quote": null, "tags": []}, "block_type": {"name": "block_type", "description": "The type of block. This can be a section, subsection, unit, or the block type", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_order": {"name": "course_order", "description": "The sort order of this block in the course across all course blocks", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/courses/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.5737782, "relation_name": "`xapi`.`dim_course_blocks`", "raw_code": "select\n    courses.org as org,\n    courses.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    blocks.location as block_id,\n    blocks.block_name as block_name,\n    {{ section_from_display(\"blocks.display_name_with_location\") }} as section_number,\n    {{ subsection_from_display(\"blocks.display_name_with_location\") }}\n    as subsection_number,\n    splitByString(' - ', blocks.display_name_with_location)[1] as hierarchy_location,\n    blocks.display_name_with_location as display_name_with_location,\n    course_order,\n    graded,\n    case\n        when block_id like '%@chapter+block@%'\n        then 'section'\n        when block_id like '%@sequential+block@%'\n        then 'subsection'\n        when block_id like '%@vertical+block@%'\n        then 'unit'\n        else regexpExtract(block_id, '@([^+]+)\\+block@', 1)\n    end as block_type\nfrom {{ ref(\"course_block_names\") }} blocks\njoin\n    {{ ref(\"course_names\") }} courses on blocks.course_key = courses.course_key\n    settings join_algorithm = 'direct'", "language": "sql", "refs": [{"name": "course_block_names", "package": null, "version": null}, {"name": "course_names", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.section_from_display", "macro.aspects.subsection_from_display"], "nodes": ["model.aspects.course_block_names", "model.aspects.course_names"]}, "compiled_path": "target/compiled/aspects/models/courses/dim_course_blocks.sql", "compiled": true, "compiled_code": "select\n    courses.org as org,\n    courses.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    blocks.location as block_id,\n    blocks.block_name as block_name,\n    \n    concat(\n        splitByString(\n            ':', splitByString(' - ', blocks.display_name_with_location)[1], 1\n        )[1],\n        ':0:0'\n    )\n as section_number,\n    \n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', blocks.display_name_with_location)[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n\n    as subsection_number,\n    splitByString(' - ', blocks.display_name_with_location)[1] as hierarchy_location,\n    blocks.display_name_with_location as display_name_with_location,\n    course_order,\n    graded,\n    case\n        when block_id like '%@chapter+block@%'\n        then 'section'\n        when block_id like '%@sequential+block@%'\n        then 'subsection'\n        when block_id like '%@vertical+block@%'\n        then 'unit'\n        else regexpExtract(block_id, '@([^+]+)\\+block@', 1)\n    end as block_type\nfrom `xapi`.`course_block_names` blocks\njoin\n    `xapi`.`course_names` courses on blocks.course_key = courses.course_key\n    settings join_algorithm = 'direct'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.dim_course_blocks_extended": {"database": "", "schema": "xapi", "name": "dim_course_blocks_extended", "resource_type": "model", "package_name": "aspects", "path": "courses/dim_course_blocks_extended.sql", "original_file_path": "models/courses/dim_course_blocks_extended.sql", "unique_id": "model.aspects.dim_course_blocks_extended", "fqn": ["aspects", "courses", "dim_course_blocks_extended"], "alias": "dim_course_blocks_extended", "checksum": {"name": "sha256", "checksum": "40e5bf47d8b788c9ddcddcb67b793fa839c4e217a9b39b7c70a9e902a2928485"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "dim_course_blocks with section and subsection names joined into the data.", "columns": {"org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The block's unique identifier", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "block_name": {"name": "block_name", "description": "The block's name", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "section_number": {"name": "section_number", "description": "The section this block belongs to, formatted as <section location>:0:0", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "subsection_number": {"name": "subsection_number", "description": "The subsection this block belongs to, formatted as <section location>:<subsection location>:0", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "hierarchy_location": {"name": "hierarchy_location", "description": "The full section:subsection:unit hierarchy in which this block belongs", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "display_name_with_location": {"name": "display_name_with_location", "description": "The block's display name with section, subsection, and unit prepended to the name. This provides additional context when looking at block names and can help data consumers understand which block they are analyzing", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "graded": {"name": "graded", "description": "Whether the block is graded", "meta": {}, "data_type": "Boolean", "constraints": [], "quote": null, "tags": []}, "block_type": {"name": "block_type", "description": "The type of block. This can be a section, subsection, unit, or the block type", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "section_with_name": {"name": "section_with_name", "description": "The name of the section this block belongs to, with section_number prepended", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "subsection_with_name": {"name": "subsection_with_name", "description": "The name of the section this subsection belongs to, with subsection_number prepended", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_order": {"name": "course_order", "description": "The sort order of this block in the course across all course blocks", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/courses/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.5770652, "relation_name": "`xapi`.`dim_course_blocks_extended`", "raw_code": "select\n    blocks.org as org,\n    blocks.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    blocks.block_id as block_id,\n    blocks.block_name as block_name,\n    blocks.section_number as section_number,\n    blocks.subsection_number as subsection_number,\n    blocks.hierarchy_location as hierarchy_location,\n    blocks.display_name_with_location as display_name_with_location,\n    blocks.graded as graded,\n    blocks.course_order as course_order,\n    blocks.block_type as block_type,\n    section_blocks.display_name_with_location as section_with_name,\n    subsection_blocks.display_name_with_location as subsection_with_name\nfrom {{ ref(\"dim_course_blocks\") }} blocks\nleft join\n    {{ ref(\"dim_course_blocks\") }} section_blocks\n    on (\n        blocks.section_number = section_blocks.hierarchy_location\n        and blocks.org = section_blocks.org\n        and blocks.course_key = section_blocks.course_key\n        and section_blocks.block_id like '%@chapter+block@%'\n    )\nleft join\n    {{ ref(\"dim_course_blocks\") }} subsection_blocks\n    on (\n        blocks.subsection_number = subsection_blocks.hierarchy_location\n        and blocks.org = subsection_blocks.org\n        and blocks.course_key = subsection_blocks.course_key\n        and subsection_blocks.block_id like '%@sequential+block@%'\n    )", "language": "sql", "refs": [{"name": "dim_course_blocks", "package": null, "version": null}, {"name": "dim_course_blocks", "package": null, "version": null}, {"name": "dim_course_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.aspects.dim_course_blocks"]}, "compiled_path": "target/compiled/aspects/models/courses/dim_course_blocks_extended.sql", "compiled": true, "compiled_code": "select\n    blocks.org as org,\n    blocks.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    blocks.block_id as block_id,\n    blocks.block_name as block_name,\n    blocks.section_number as section_number,\n    blocks.subsection_number as subsection_number,\n    blocks.hierarchy_location as hierarchy_location,\n    blocks.display_name_with_location as display_name_with_location,\n    blocks.graded as graded,\n    blocks.course_order as course_order,\n    blocks.block_type as block_type,\n    section_blocks.display_name_with_location as section_with_name,\n    subsection_blocks.display_name_with_location as subsection_with_name\nfrom `xapi`.`dim_course_blocks` blocks\nleft join\n    `xapi`.`dim_course_blocks` section_blocks\n    on (\n        blocks.section_number = section_blocks.hierarchy_location\n        and blocks.org = section_blocks.org\n        and blocks.course_key = section_blocks.course_key\n        and section_blocks.block_id like '%@chapter+block@%'\n    )\nleft join\n    `xapi`.`dim_course_blocks` subsection_blocks\n    on (\n        blocks.subsection_number = subsection_blocks.hierarchy_location\n        and blocks.org = subsection_blocks.org\n        and blocks.course_key = subsection_blocks.course_key\n        and subsection_blocks.block_id like '%@sequential+block@%'\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.course_names": {"database": "", "schema": "xapi", "name": "course_names", "resource_type": "model", "package_name": "aspects", "path": "courses/course_names.sql", "original_file_path": "models/courses/course_names.sql", "unique_id": "model.aspects.course_names", "fqn": ["aspects", "courses", "course_names"], "alias": "course_names", "checksum": {"name": "sha256", "checksum": "69314d2ff58b30abc64a3c21b9370bde8617d87e2f835106ae0ac01ebf2e864f"}, "config": {"enabled": true, "alias": null, "schema": "event_sink", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "dictionary", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "fields": [["course_key", "String"], ["course_name", "String"], ["course_run", "String"], ["org", "String"]], "primary_key": "course_key", "layout": "COMPLEX_KEY_HASHED()", "lifetime": "120", "source_type": "clickhouse", "connection_overrides": {"host": "localhost"}}, "tags": [], "description": "A table of courses with their names", "columns": {"course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/courses/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "dictionary", "schema": "event_sink", "fields": [["course_key", "String"], ["course_name", "String"], ["course_run", "String"], ["org", "String"]], "primary_key": "course_key", "layout": "COMPLEX_KEY_HASHED()", "lifetime": "120", "source_type": "clickhouse", "connection_overrides": {"host": "localhost"}}, "created_at": 1716584567.5755358, "relation_name": "`xapi`.`course_names`", "raw_code": "{{\n    config(\n        materialized=\"dictionary\",\n        schema=env_var(\"ASPECTS_EVENT_SINK_DATABASE\", \"event_sink\"),\n        fields=[\n            (\"course_key\", \"String\"),\n            (\"course_name\", \"String\"),\n            (\"course_run\", \"String\"),\n            (\"org\", \"String\"),\n        ],\n        primary_key=\"course_key\",\n        layout=\"COMPLEX_KEY_HASHED()\",\n        lifetime=\"120\",\n        source_type=\"clickhouse\",\n        connection_overrides={\n            \"host\": \"localhost\",\n        },\n    )\n}}\n\nwith\n    most_recent_overviews as (\n        select org, course_key, max(modified) as last_modified\n        from {{ source(\"event_sink\", \"course_overviews\") }}\n        group by org, course_key\n    )\nselect course_key, display_name, splitByString('+', course_key)[-1] as course_run, org\nfrom {{ source(\"event_sink\", \"course_overviews\") }} co\ninner join\n    most_recent_overviews mro\n    on co.org = mro.org\n    and co.course_key = mro.course_key\n    and co.modified = mro.last_modified", "language": "sql", "refs": [], "sources": [["event_sink", "course_overviews"], ["event_sink", "course_overviews"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.aspects.event_sink.course_overviews"]}, "compiled_path": "target/compiled/aspects/models/courses/course_names.sql", "compiled": true, "compiled_code": "\n\nwith\n    most_recent_overviews as (\n        select org, course_key, max(modified) as last_modified\n        from `event_sink`.`course_overviews`\n        group by org, course_key\n    )\nselect course_key, display_name, splitByString('+', course_key)[-1] as course_run, org\nfrom `event_sink`.`course_overviews` co\ninner join\n    most_recent_overviews mro\n    on co.org = mro.org\n    and co.course_key = mro.course_key\n    and co.modified = mro.last_modified", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.course_block_names": {"database": "", "schema": "xapi", "name": "course_block_names", "resource_type": "model", "package_name": "aspects", "path": "courses/course_block_names.sql", "original_file_path": "models/courses/course_block_names.sql", "unique_id": "model.aspects.course_block_names", "fqn": ["aspects", "courses", "course_block_names"], "alias": "course_block_names", "checksum": {"name": "sha256", "checksum": "d341a231ffa44686f807118876ec7d0d5a536f89ed05d608f745536000b1ac86"}, "config": {"enabled": true, "alias": null, "schema": "event_sink", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "dictionary", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "fields": [["location", "String"], ["block_name", "String"], ["course_key", "String"], ["graded", "Bool"], ["course_order", "Int32"], ["display_name_with_location", "String"]], "primary_key": "location", "layout": "COMPLEX_KEY_SPARSE_HASHED()", "lifetime": "120", "source_type": "clickhouse", "connection_overrides": {"host": "localhost"}}, "tags": [], "description": "A table of course blocks with their names", "columns": {"location": {"name": "location", "description": "The location of the block", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "block_name": {"name": "block_name", "description": "The name of the block", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course which the block belongs to", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "graded": {"name": "graded", "description": "Whether the block is graded", "meta": {}, "data_type": "Boolean", "constraints": [], "quote": null, "tags": []}, "display_name_with_location": {"name": "display_name_with_location", "description": "The block's display name with section, subsection, and unit prepended to the name. This provides additional context when looking at block names and can help data consumers understand which block they are analyzing", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_order": {"name": "course_order", "description": "The sort order of this block in the course across all course blocks", "meta": {}, "data_type": "Int32", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/courses/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "dictionary", "schema": "event_sink", "fields": [["location", "String"], ["block_name", "String"], ["course_key", "String"], ["graded", "Bool"], ["course_order", "Int32"], ["display_name_with_location", "String"]], "primary_key": "location", "layout": "COMPLEX_KEY_SPARSE_HASHED()", "lifetime": "120", "source_type": "clickhouse", "connection_overrides": {"host": "localhost"}}, "created_at": 1716584567.574708, "relation_name": "`xapi`.`course_block_names`", "raw_code": "{{\n    config(\n        materialized=\"dictionary\",\n        schema=env_var(\"ASPECTS_EVENT_SINK_DATABASE\", \"event_sink\"),\n        fields=[\n            (\"location\", \"String\"),\n            (\"block_name\", \"String\"),\n            (\"course_key\", \"String\"),\n            (\"graded\", \"Bool\"),\n            (\"course_order\", \"Int32\"),\n            (\"display_name_with_location\", \"String\"),\n        ],\n        primary_key=\"location\",\n        layout=\"COMPLEX_KEY_SPARSE_HASHED()\",\n        lifetime=\"120\",\n        source_type=\"clickhouse\",\n        connection_overrides={\n            \"host\": \"localhost\",\n        },\n    )\n}}\n\nwith\n    most_recent_course_blocks as (\n        select\n            location,\n            display_name,\n            toString(section)\n            || ':'\n            || toString(subsection)\n            || ':'\n            || toString(unit)\n            || ' - '\n            || display_name as display_name_with_location,\n            JSONExtractInt(xblock_data_json, 'section') as section,\n            JSONExtractInt(xblock_data_json, 'subsection') as subsection,\n            JSONExtractInt(xblock_data_json, 'unit') as unit,\n            JSONExtractBool(xblock_data_json, 'graded') as graded,\n            `order` as course_order,\n            course_key,\n            dump_id,\n            time_last_dumped,\n            row_number() over (\n                partition by location order by time_last_dumped desc\n            ) as rn\n        from {{ source(\"event_sink\", \"course_blocks\") }}\n    )\nselect\n    location,\n    display_name as block_name,\n    course_key,\n    graded,\n    course_order,\n    display_name_with_location\nfrom most_recent_course_blocks\nwhere rn = 1", "language": "sql", "refs": [], "sources": [["event_sink", "course_blocks"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.aspects.event_sink.course_blocks"]}, "compiled_path": "target/compiled/aspects/models/courses/course_block_names.sql", "compiled": true, "compiled_code": "\n\nwith\n    most_recent_course_blocks as (\n        select\n            location,\n            display_name,\n            toString(section)\n            || ':'\n            || toString(subsection)\n            || ':'\n            || toString(unit)\n            || ' - '\n            || display_name as display_name_with_location,\n            JSONExtractInt(xblock_data_json, 'section') as section,\n            JSONExtractInt(xblock_data_json, 'subsection') as subsection,\n            JSONExtractInt(xblock_data_json, 'unit') as unit,\n            JSONExtractBool(xblock_data_json, 'graded') as graded,\n            `order` as course_order,\n            course_key,\n            dump_id,\n            time_last_dumped,\n            row_number() over (\n                partition by location order by time_last_dumped desc\n            ) as rn\n        from `event_sink`.`course_blocks`\n    )\nselect\n    location,\n    display_name as block_name,\n    course_key,\n    graded,\n    course_order,\n    display_name_with_location\nfrom most_recent_course_blocks\nwhere rn = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.fact_completions": {"database": "", "schema": "xapi", "name": "fact_completions", "resource_type": "model", "package_name": "aspects", "path": "completion/fact_completions.sql", "original_file_path": "models/completion/fact_completions.sql", "unique_id": "model.aspects.fact_completions", "fqn": ["aspects", "completion", "fact_completions"], "alias": "fact_completions", "checksum": {"name": "sha256", "checksum": "43c412d45a74dc8eb7f42e5e67d8a8721da33410cd9e81cc2ecaf2be294ffb84"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "One record per completion events for component", "columns": {"emission_time": {"name": "emission_time", "description": "Timestamp, to the second, of when this event was emitted", "meta": {}, "data_type": "DateTime64(3)", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course key for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_name": {"name": "course_name", "description": "The name of the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "course_run": {"name": "course_run", "description": "The course run for the course", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "entity_id": {"name": "entity_id", "description": "The block ID or course key for the graded entity", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "entity_name": {"name": "entity_name", "description": "The name of the graded entity (course or block)", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "entity_name_with_location": {"name": "entity_name_with_location", "description": "The entity's display name with section, subsection, and unit prepended to the name. This provides additional context when looking at block names and can help data consumers understand which block they are analyzing", "meta": {}, "data_type": "Nullable(String)", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "scaled_progress": {"name": "scaled_progress", "description": "A ratio between 0 and 1, inclusive, of the learner's progress", "meta": {}, "data_type": "Float32", "constraints": [], "quote": null, "tags": []}, "completion_bucket": {"name": "completion_bucket", "description": "A displayable value of progress sorted into 10% buckets. Useful for grouping progress together to show high-level learner performance", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "The username of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The full name of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the learner", "meta": {}, "data_type": "String", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/completion/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.5862453, "relation_name": "`xapi`.`fact_completions`", "raw_code": "with\n    completions as (\n        select\n            emission_time,\n            org,\n            course_key,\n            actor_id,\n            progress_percent,\n            if(\n                object_id like '%/course/%',\n                splitByString('/course/', object_id)[-1],\n                splitByString('/xblock/', object_id)[-1]\n            ) as entity_id,\n            cast(progress_percent as Float) / 100 as scaled_progress\n        from {{ ref(\"completion_events\") }}\n    )\n\nselect\n    completions.emission_time as emission_time,\n    completions.org as org,\n    completions.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    completions.entity_id as entity_id,\n    if(blocks.block_name != '', blocks.block_name, courses.course_name) as entity_name,\n    if(\n        blocks.block_name != '', blocks.display_name_with_location, null\n    ) as entity_name_with_location,\n    completions.actor_id as actor_id,\n    cast(completions.scaled_progress as Float) as scaled_progress,\n    case\n        when scaled_progress >= 0.9\n        then '90-100%'\n        when scaled_progress >= 0.8 and scaled_progress < 0.9\n        then '80-89%'\n        when scaled_progress >= 0.7 and scaled_progress < 0.8\n        then '70-79%'\n        when scaled_progress >= 0.6 and scaled_progress < 0.7\n        then '60-69%'\n        when scaled_progress >= 0.5 and scaled_progress < 0.6\n        then '50-59%'\n        when scaled_progress >= 0.4 and scaled_progress < 0.5\n        then '40-49%'\n        when scaled_progress >= 0.3 and scaled_progress < 0.4\n        then '30-39%'\n        when scaled_progress >= 0.2 and scaled_progress < 0.3\n        then '20-29%'\n        when scaled_progress >= 0.1 and scaled_progress < 0.2\n        then '10-19%'\n        else '0-9%'\n    end as completion_bucket,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom completions\njoin {{ ref(\"course_names\") }} courses on completions.course_key = courses.course_key\nleft join\n    {{ ref(\"course_block_names\") }} blocks on completions.entity_id = blocks.location\nleft outer join\n    {{ ref(\"dim_user_pii\") }} users\n    on toUUID(completions.actor_id) = users.external_user_id", "language": "sql", "refs": [{"name": "completion_events", "package": null, "version": null}, {"name": "course_names", "package": null, "version": null}, {"name": "course_block_names", "package": null, "version": null}, {"name": "dim_user_pii", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.aspects.completion_events", "model.aspects.course_names", "model.aspects.course_block_names", "model.aspects.dim_user_pii"]}, "compiled_path": "target/compiled/aspects/models/completion/fact_completions.sql", "compiled": true, "compiled_code": "with\n    completions as (\n        select\n            emission_time,\n            org,\n            course_key,\n            actor_id,\n            progress_percent,\n            if(\n                object_id like '%/course/%',\n                splitByString('/course/', object_id)[-1],\n                splitByString('/xblock/', object_id)[-1]\n            ) as entity_id,\n            cast(progress_percent as Float) / 100 as scaled_progress\n        from `xapi`.`completion_events`\n    )\n\nselect\n    completions.emission_time as emission_time,\n    completions.org as org,\n    completions.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    completions.entity_id as entity_id,\n    if(blocks.block_name != '', blocks.block_name, courses.course_name) as entity_name,\n    if(\n        blocks.block_name != '', blocks.display_name_with_location, null\n    ) as entity_name_with_location,\n    completions.actor_id as actor_id,\n    cast(completions.scaled_progress as Float) as scaled_progress,\n    case\n        when scaled_progress >= 0.9\n        then '90-100%'\n        when scaled_progress >= 0.8 and scaled_progress < 0.9\n        then '80-89%'\n        when scaled_progress >= 0.7 and scaled_progress < 0.8\n        then '70-79%'\n        when scaled_progress >= 0.6 and scaled_progress < 0.7\n        then '60-69%'\n        when scaled_progress >= 0.5 and scaled_progress < 0.6\n        then '50-59%'\n        when scaled_progress >= 0.4 and scaled_progress < 0.5\n        then '40-49%'\n        when scaled_progress >= 0.3 and scaled_progress < 0.4\n        then '30-39%'\n        when scaled_progress >= 0.2 and scaled_progress < 0.3\n        then '20-29%'\n        when scaled_progress >= 0.1 and scaled_progress < 0.2\n        then '10-19%'\n        else '0-9%'\n    end as completion_bucket,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom completions\njoin `xapi`.`course_names` courses on completions.course_key = courses.course_key\nleft join\n    `xapi`.`course_block_names` blocks on completions.entity_id = blocks.location\nleft outer join\n    `xapi`.`dim_user_pii` users\n    on toUUID(completions.actor_id) = users.external_user_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aspects.completion_events": {"database": "", "schema": "xapi", "name": "completion_events", "resource_type": "model", "package_name": "aspects", "path": "completion/completion_events.sql", "original_file_path": "models/completion/completion_events.sql", "unique_id": "model.aspects.completion_events", "fqn": ["aspects", "completion", "completion_events"], "alias": "completion_events", "checksum": {"name": "sha256", "checksum": "4ecf54d92ee30a7b6134f4b6356c973cc68911b425ebcf0176ae26a41033b13c"}, "config": {"enabled": true, "alias": null, "schema": "xapi", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "materialized_view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "engine": "\n    ReplacingMergeTree()", "order_by": "(org, course_key, verb_id, emission_time, actor_id, object_id, event_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": "", "primary_key": "(org, course_key, verb_id)"}, "tags": [], "description": "A materialized view for xAPI events related to course completions", "columns": {"event_id": {"name": "event_id", "description": "The unique identifier for the event", "meta": {}, "data_type": "uuid", "constraints": [], "quote": null, "tags": []}, "emission_time": {"name": "emission_time", "description": "The time the event was emitted", "meta": {}, "data_type": "datetime", "constraints": [], "quote": null, "tags": []}, "actor_id": {"name": "actor_id", "description": "The xAPI actor identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "object_id": {"name": "object_id", "description": "The xAPI object identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "The course identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "org": {"name": "org", "description": "The organization that the course belongs to", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "verb_id": {"name": "verb_id", "description": "The xAPI verb identifier", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "progress_percent": {"name": "progress_percent", "description": "The percentage of the xAPI object completed", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aspects://models/completion/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "materialized_view", "schema": "xapi", "engine": "\n    ReplacingMergeTree()", "primary_key": "(org, course_key, verb_id)", "order_by": "(org, course_key, verb_id, emission_time, actor_id, object_id, event_id)", "partition_by": "(toYYYYMM(emission_time))", "ttl": ""}, "created_at": 1716584567.5876439, "relation_name": "`xapi`.`completion_events`", "raw_code": "{{\n    config(\n        materialized=\"materialized_view\",\n        schema=env_var(\"ASPECTS_XAPI_DATABASE\", \"xapi\"),\n        engine=get_engine(\"ReplacingMergeTree()\"),\n        primary_key=\"(org, course_key, verb_id)\",\n        order_by=\"(org, course_key, verb_id, emission_time, actor_id, object_id, event_id)\",\n        partition_by=\"(toYYYYMM(emission_time))\",\n        ttl=env_var(\"ASPECTS_DATA_TTL_EXPRESSION\", \"\"),\n    )\n}}\n\nselect\n    event_id,\n    CAST(emission_time, 'DateTime') as emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] as course_key,\n    org,\n    verb_id,\n    JSON_VALUE(\n        event,\n        '$.result.extensions.\"https://w3id.org/xapi/cmi5/result/extensions/progress\"'\n    ) as progress_percent\nfrom {{ ref(\"xapi_events_all_parsed\") }}\nwhere verb_id = 'http://adlnet.gov/expapi/verbs/progressed'", "language": "sql", "refs": [{"name": "xapi_events_all_parsed", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_engine"], "nodes": ["model.aspects.xapi_events_all_parsed"]}, "compiled_path": "target/compiled/aspects/models/completion/completion_events.sql", "compiled": true, "compiled_code": "\n\nselect\n    event_id,\n    CAST(emission_time, 'DateTime') as emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] as course_key,\n    org,\n    verb_id,\n    JSON_VALUE(\n        event,\n        '$.result.extensions.\"https://w3id.org/xapi/cmi5/result/extensions/progress\"'\n    ) as progress_percent\nfrom `xapi`.`xapi_events_all_parsed`\nwhere verb_id = 'http://adlnet.gov/expapi/verbs/progressed'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.aspects.get_problem_id": {"database": "", "schema": "xapi", "name": "get_problem_id", "resource_type": "test", "package_name": "aspects", "path": "get_problem_id.sql", "original_file_path": "tests/get_problem_id.sql", "unique_id": "test.aspects.get_problem_id", "fqn": ["aspects", "get_problem_id"], "alias": "get_problem_id", "checksum": {"name": "sha256", "checksum": "d56f4561a030c08b2d11b6c35fe8c647ca8c4f3143016ae6eada086ae3a06c49"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.0489233, "relation_name": null, "raw_code": "select\n    'http://local.edly.io:8000/xblock/block-v1:edunext+demo+demo+ccx+type@problem+block@3c1646f7133a4c5fb4557d649e22c251'\n    as object_id\nfrom system.one\nwhere\n    {{ get_problem_id(\"object_id\") }}\n    != 'block-v1:edunext+demo+demo+ccx+type@problem+block@3c1646f7133a4c5fb4557d649e22c251'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_problem_id"], "nodes": []}, "compiled_path": "target/compiled/aspects/tests/get_problem_id.sql", "compiled": true, "compiled_code": "select\n    'http://local.edly.io:8000/xblock/block-v1:edunext+demo+demo+ccx+type@problem+block@3c1646f7133a4c5fb4557d649e22c251'\n    as object_id\nfrom system.one\nwhere\n    \n    regexpExtract(\n        object_id, 'xblock/([\\w\\d-\\+:@]*@problem\\+block@[\\w\\d][^_]*)(_\\d_\\d)?', 1\n    )\n\n    != 'block-v1:edunext+demo+demo+ccx+type@problem+block@3c1646f7133a4c5fb4557d649e22c251'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.aspects.a_tag": {"database": "", "schema": "xapi", "name": "a_tag", "resource_type": "test", "package_name": "aspects", "path": "a_tag.sql", "original_file_path": "tests/a_tag.sql", "unique_id": "test.aspects.a_tag", "fqn": ["aspects", "a_tag"], "alias": "a_tag", "checksum": {"name": "sha256", "checksum": "0189e37c42a186a7c6b57b43ce3cade68fe400b57580a137c3ce8f927bda1048"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.0547557, "relation_name": null, "raw_code": "select\n    'http://local.edly.io/xblock/block-v1:OpenedX+DemoX+DemoCourse+type@video+block@d5a54ce52f464acfa7a83ae155712cc3' as object_id,\n    'The Purpose, Power and Reach of the Open edX\u00ae Platform' as video_name,\n    {{ a_tag('object_id', 'video_name') }} as object_a_tag\nfrom\n    system.numbers\nwhere object_a_tag != '<a href=\"http://local.edly.io/xblock/block-v1:OpenedX+DemoX+DemoCourse+type@video+block@d5a54ce52f464acfa7a83ae155712cc3\" target=\"_blank\">The Purpose, Power and Reach of the Open edX\u00ae Platform</a>'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.a_tag"], "nodes": []}, "compiled_path": "target/compiled/aspects/tests/a_tag.sql", "compiled": true, "compiled_code": "select\n    'http://local.edly.io/xblock/block-v1:OpenedX+DemoX+DemoCourse+type@video+block@d5a54ce52f464acfa7a83ae155712cc3' as object_id,\n    'The Purpose, Power and Reach of the Open edX\u00ae Platform' as video_name,\n    \n    concat(\n        '<a href=\"', object_id, '\" target=\"_blank\">', video_name, '</a>'\n    )\n as object_a_tag\nfrom\n    system.numbers\nwhere object_a_tag != '<a href=\"http://local.edly.io/xblock/block-v1:OpenedX+DemoX+DemoCourse+type@video+block@d5a54ce52f464acfa7a83ae155712cc3\" target=\"_blank\">The Purpose, Power and Reach of the Open edX\u00ae Platform</a>'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.aspects.problem_results_uniqueness": {"database": "", "schema": "xapi", "name": "problem_results_uniqueness", "resource_type": "test", "package_name": "aspects", "path": "problem_results_uniqueness.sql", "original_file_path": "tests/problem_results_uniqueness.sql", "unique_id": "test.aspects.problem_results_uniqueness", "fqn": ["aspects", "problem_results_uniqueness"], "alias": "problem_results_uniqueness", "checksum": {"name": "sha256", "checksum": "552c31c5528ad0c0008462e2857ec61f64df02609fecbe46bf08c1b6f6d4a079"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.0600631, "relation_name": null, "raw_code": "-- problem_results should only have one record for the following\n-- combination of values:\n-- actor_id, problem_id, course_id, org\nselect org, course_key, problem_id, actor_id, responses, count(*) as num_rows\nfrom {{ ref(\"int_problem_results\") }}\ngroup by org, course_key, problem_id, actor_id, responses\nhaving num_rows > 1", "language": "sql", "refs": [{"name": "int_problem_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.aspects.int_problem_results"]}, "compiled_path": "target/compiled/aspects/tests/problem_results_uniqueness.sql", "compiled": true, "compiled_code": "-- problem_results should only have one record for the following\n-- combination of values:\n-- actor_id, problem_id, course_id, org\nselect org, course_key, problem_id, actor_id, responses, count(*) as num_rows\nfrom `xapi`.`int_problem_results`\ngroup by org, course_key, problem_id, actor_id, responses\nhaving num_rows > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.aspects.learner_problem_summary_uniqueness": {"database": "", "schema": "xapi", "name": "learner_problem_summary_uniqueness", "resource_type": "test", "package_name": "aspects", "path": "learner_problem_summary_uniqueness.sql", "original_file_path": "tests/learner_problem_summary_uniqueness.sql", "unique_id": "test.aspects.learner_problem_summary_uniqueness", "fqn": ["aspects", "learner_problem_summary_uniqueness"], "alias": "learner_problem_summary_uniqueness", "checksum": {"name": "sha256", "checksum": "2255f8b91b277b0ebedda9d3d5f230ec4b7e403c3810d4b9a76e285792c94a52"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.066189, "relation_name": null, "raw_code": "select org, course_key, problem_id, actor_id, count(*) as num_rows\nfrom {{ ref(\"fact_learner_problem_summary\") }}\ngroup by org, course_key, problem_id, actor_id\nhaving num_rows > 1", "language": "sql", "refs": [{"name": "fact_learner_problem_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.aspects.fact_learner_problem_summary"]}, "compiled_path": "target/compiled/aspects/tests/learner_problem_summary_uniqueness.sql", "compiled": true, "compiled_code": "select org, course_key, problem_id, actor_id, count(*) as num_rows\nfrom `xapi`.`fact_learner_problem_summary`\ngroup by org, course_key, problem_id, actor_id\nhaving num_rows > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.aspects.get_problem_id_with_ccx": {"database": "", "schema": "xapi", "name": "get_problem_id_with_ccx", "resource_type": "test", "package_name": "aspects", "path": "get_problem_id_with_ccx.sql", "original_file_path": "tests/get_problem_id_with_ccx.sql", "unique_id": "test.aspects.get_problem_id_with_ccx", "fqn": ["aspects", "get_problem_id_with_ccx"], "alias": "get_problem_id_with_ccx", "checksum": {"name": "sha256", "checksum": "6a34adbf88e71976a4ec23527f8c9d805cacb1da2927f68eb1325bd694703b07"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.0709963, "relation_name": null, "raw_code": "select\n    'http://local.edly.io:8000/xblock/ccx-block-v1:edunext+demo+demo+ccx@1+type@problem+block@3c1646f7133a4c5fb4557d649e22c251'\n    as object_id\nfrom system.one\nwhere\n    {{ get_problem_id(\"object_id\") }}\n    != 'ccx-block-v1:edunext+demo+demo+ccx@1+type@problem+block@3c1646f7133a4c5fb4557d649e22c251'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aspects.get_problem_id"], "nodes": []}, "compiled_path": "target/compiled/aspects/tests/get_problem_id_with_ccx.sql", "compiled": true, "compiled_code": "select\n    'http://local.edly.io:8000/xblock/ccx-block-v1:edunext+demo+demo+ccx@1+type@problem+block@3c1646f7133a4c5fb4557d649e22c251'\n    as object_id\nfrom system.one\nwhere\n    \n    regexpExtract(\n        object_id, 'xblock/([\\w\\d-\\+:@]*@problem\\+block@[\\w\\d][^_]*)(_\\d_\\d)?', 1\n    )\n\n    != 'ccx-block-v1:edunext+demo+demo+ccx@1+type@problem+block@3c1646f7133a4c5fb4557d649e22c251'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.aspects.accepted_values_fact_enrollments_enrollment_status__registered__unregistered.f8d10203f4": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["registered", "unregistered"], "column_name": "enrollment_status", "model": "{{ get_where_subquery(ref('fact_enrollments')) }}"}, "namespace": null}, "database": "", "schema": "xapi", "name": "accepted_values_fact_enrollments_enrollment_status__registered__unregistered", "resource_type": "test", "package_name": "aspects", "path": "accepted_values_fact_enrollmen_1086f4b5aaa1831a14dfbb256e3845c9.sql", "original_file_path": "models/enrollment/schema.yml", "unique_id": "test.aspects.accepted_values_fact_enrollments_enrollment_status__registered__unregistered.f8d10203f4", "fqn": ["aspects", "enrollment", "accepted_values_fact_enrollments_enrollment_status__registered__unregistered"], "alias": "accepted_values_fact_enrollmen_1086f4b5aaa1831a14dfbb256e3845c9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fact_enrollmen_1086f4b5aaa1831a14dfbb256e3845c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_fact_enrollmen_1086f4b5aaa1831a14dfbb256e3845c9"}, "created_at": 1716584567.373944, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fact_enrollmen_1086f4b5aaa1831a14dfbb256e3845c9\") }}", "language": "sql", "refs": [{"name": "fact_enrollments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.aspects.fact_enrollments"]}, "compiled_path": "target/compiled/aspects/models/enrollment/schema.yml/accepted_values_fact_enrollmen_1086f4b5aaa1831a14dfbb256e3845c9.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        enrollment_status as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_enrollments`\n    group by enrollment_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'registered','unregistered'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "enrollment_status", "file_key_name": "models.fact_enrollments", "attached_node": "model.aspects.fact_enrollments"}, "test.aspects.accepted_values_fact_enrollment_status_enrollment_status__registered__unregistered.893527c11f": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["registered", "unregistered"], "column_name": "enrollment_status", "model": "{{ get_where_subquery(ref('fact_enrollment_status')) }}"}, "namespace": null}, "database": "", "schema": "xapi", "name": "accepted_values_fact_enrollment_status_enrollment_status__registered__unregistered", "resource_type": "test", "package_name": "aspects", "path": "accepted_values_fact_enrollmen_19e28d0c914e4e943cd678ae73f6a8ec.sql", "original_file_path": "models/enrollment/schema.yml", "unique_id": "test.aspects.accepted_values_fact_enrollment_status_enrollment_status__registered__unregistered.893527c11f", "fqn": ["aspects", "enrollment", "accepted_values_fact_enrollment_status_enrollment_status__registered__unregistered"], "alias": "accepted_values_fact_enrollmen_19e28d0c914e4e943cd678ae73f6a8ec", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fact_enrollmen_19e28d0c914e4e943cd678ae73f6a8ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_fact_enrollmen_19e28d0c914e4e943cd678ae73f6a8ec"}, "created_at": 1716584567.3880885, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fact_enrollmen_19e28d0c914e4e943cd678ae73f6a8ec\") }}", "language": "sql", "refs": [{"name": "fact_enrollment_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.aspects.fact_enrollment_status"]}, "compiled_path": "target/compiled/aspects/models/enrollment/schema.yml/accepted_values_fact_enrollmen_19e28d0c914e4e943cd678ae73f6a8ec.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        enrollment_status as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_enrollment_status`\n    group by enrollment_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'registered','unregistered'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "enrollment_status", "file_key_name": "models.fact_enrollment_status", "attached_node": "model.aspects.fact_enrollment_status"}, "test.aspects.not_null_fact_learner_problem_summary_success.76b52cb2da": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "success", "model": "{{ get_where_subquery(ref('fact_learner_problem_summary')) }}"}, "namespace": null}, "database": "", "schema": "xapi", "name": "not_null_fact_learner_problem_summary_success", "resource_type": "test", "package_name": "aspects", "path": "not_null_fact_learner_problem_summary_success.sql", "original_file_path": "models/problems/schema.yml", "unique_id": "test.aspects.not_null_fact_learner_problem_summary_success.76b52cb2da", "fqn": ["aspects", "problems", "not_null_fact_learner_problem_summary_success"], "alias": "not_null_fact_learner_problem_summary_success", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.4232035, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_learner_problem_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.aspects.fact_learner_problem_summary"]}, "compiled_path": "target/compiled/aspects/models/problems/schema.yml/not_null_fact_learner_problem_summary_success.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect success\nfrom `xapi`.`fact_learner_problem_summary`\nwhere success is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "success", "file_key_name": "models.fact_learner_problem_summary", "attached_node": "model.aspects.fact_learner_problem_summary"}, "test.aspects.not_null_fact_learner_problem_summary_attempts.817beed32b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "attempts", "model": "{{ get_where_subquery(ref('fact_learner_problem_summary')) }}"}, "namespace": null}, "database": "", "schema": "xapi", "name": "not_null_fact_learner_problem_summary_attempts", "resource_type": "test", "package_name": "aspects", "path": "not_null_fact_learner_problem_summary_attempts.sql", "original_file_path": "models/problems/schema.yml", "unique_id": "test.aspects.not_null_fact_learner_problem_summary_attempts.817beed32b", "fqn": ["aspects", "problems", "not_null_fact_learner_problem_summary_attempts"], "alias": "not_null_fact_learner_problem_summary_attempts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1716584567.4255638, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_learner_problem_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.aspects.fact_learner_problem_summary"]}, "compiled_path": "target/compiled/aspects/models/problems/schema.yml/not_null_fact_learner_problem_summary_attempts.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect attempts\nfrom `xapi`.`fact_learner_problem_summary`\nwhere attempts is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "attempts", "file_key_name": "models.fact_learner_problem_summary", "attached_node": "model.aspects.fact_learner_problem_summary"}, "test.aspects.accepted_values_fact_problem_engagement_section_subsection_problem_engagement__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted.f98e4bc69f": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["No problems attempted yet", "All problems attempted", "At least one problem attempted"], "column_name": "section_subsection_problem_engagement", "model": "{{ get_where_subquery(ref('fact_problem_engagement')) }}"}, "namespace": null}, "database": "", "schema": "xapi", "name": "accepted_values_fact_problem_engagement_section_subsection_problem_engagement__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted", "resource_type": "test", "package_name": "aspects", "path": "accepted_values_fact_problem_e_096c97892a09c6b9fe55f1400678e076.sql", "original_file_path": "models/problems/schema.yml", "unique_id": "test.aspects.accepted_values_fact_problem_engagement_section_subsection_problem_engagement__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted.f98e4bc69f", "fqn": ["aspects", "problems", "accepted_values_fact_problem_engagement_section_subsection_problem_engagement__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted"], "alias": "accepted_values_fact_problem_e_096c97892a09c6b9fe55f1400678e076", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fact_problem_e_096c97892a09c6b9fe55f1400678e076", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_fact_problem_e_096c97892a09c6b9fe55f1400678e076"}, "created_at": 1716584567.4280245, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fact_problem_e_096c97892a09c6b9fe55f1400678e076\") }}", "language": "sql", "refs": [{"name": "fact_problem_engagement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.aspects.fact_problem_engagement"]}, "compiled_path": "target/compiled/aspects/models/problems/schema.yml/accepted_values_fact_problem_e_096c97892a09c6b9fe55f1400678e076.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        section_subsection_problem_engagement as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_problem_engagement`\n    group by section_subsection_problem_engagement\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'No problems attempted yet','All problems attempted','At least one problem attempted'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "section_subsection_problem_engagement", "file_key_name": "models.fact_problem_engagement", "attached_node": "model.aspects.fact_problem_engagement"}, "test.aspects.accepted_values_section_problem_engagement_engagement_level__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted.10f2c3b57c": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["No problems attempted yet", "All problems attempted", "At least one problem attempted"], "column_name": "engagement_level", "model": "{{ get_where_subquery(ref('section_problem_engagement')) }}"}, "namespace": null}, "database": "", "schema": "xapi", "name": "accepted_values_section_problem_engagement_engagement_level__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted", "resource_type": "test", "package_name": "aspects", "path": "accepted_values_section_proble_e056f9c2405dc752fab963ea78f103d1.sql", "original_file_path": "models/problems/schema.yml", "unique_id": "test.aspects.accepted_values_section_problem_engagement_engagement_level__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted.10f2c3b57c", "fqn": ["aspects", "problems", "accepted_values_section_problem_engagement_engagement_level__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted"], "alias": "accepted_values_section_proble_e056f9c2405dc752fab963ea78f103d1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_section_proble_e056f9c2405dc752fab963ea78f103d1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_section_proble_e056f9c2405dc752fab963ea78f103d1"}, "created_at": 1716584567.4345264, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_section_proble_e056f9c2405dc752fab963ea78f103d1\") }}", "language": "sql", "refs": [{"name": "section_problem_engagement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.aspects.section_problem_engagement"]}, "compiled_path": "target/compiled/aspects/models/problems/schema.yml/accepted_values_section_proble_e056f9c2405dc752fab963ea78f103d1.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        engagement_level as value_field,\n        count(*) as n_records\n\n    from `xapi`.`section_problem_engagement`\n    group by engagement_level\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'No problems attempted yet','All problems attempted','At least one problem attempted'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "engagement_level", "file_key_name": "models.section_problem_engagement", "attached_node": "model.aspects.section_problem_engagement"}, "test.aspects.accepted_values_subsection_problem_engagement_engagement_level__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted.65ea3dc0c7": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["No problems attempted yet", "All problems attempted", "At least one problem attempted"], "column_name": "engagement_level", "model": "{{ get_where_subquery(ref('subsection_problem_engagement')) }}"}, "namespace": null}, "database": "", "schema": "xapi", "name": "accepted_values_subsection_problem_engagement_engagement_level__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted", "resource_type": "test", "package_name": "aspects", "path": "accepted_values_subsection_pro_8936f3bc06ed44cf550f5e41be8f78d5.sql", "original_file_path": "models/problems/schema.yml", "unique_id": "test.aspects.accepted_values_subsection_problem_engagement_engagement_level__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted.65ea3dc0c7", "fqn": ["aspects", "problems", "accepted_values_subsection_problem_engagement_engagement_level__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted"], "alias": "accepted_values_subsection_pro_8936f3bc06ed44cf550f5e41be8f78d5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_subsection_pro_8936f3bc06ed44cf550f5e41be8f78d5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_subsection_pro_8936f3bc06ed44cf550f5e41be8f78d5"}, "created_at": 1716584567.439499, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_subsection_pro_8936f3bc06ed44cf550f5e41be8f78d5\") }}", "language": "sql", "refs": [{"name": "subsection_problem_engagement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.aspects.subsection_problem_engagement"]}, "compiled_path": "target/compiled/aspects/models/problems/schema.yml/accepted_values_subsection_pro_8936f3bc06ed44cf550f5e41be8f78d5.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        engagement_level as value_field,\n        count(*) as n_records\n\n    from `xapi`.`subsection_problem_engagement`\n    group by engagement_level\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'No problems attempted yet','All problems attempted','At least one problem attempted'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "engagement_level", "file_key_name": "models.subsection_problem_engagement", "attached_node": "model.aspects.subsection_problem_engagement"}, "test.aspects.accepted_values_fact_grades_grade_type__course__subsection__problem.712bd50c2f": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["course", "subsection", "problem"], "column_name": "grade_type", "model": "{{ get_where_subquery(ref('fact_grades')) }}"}, "namespace": null}, "database": "", "schema": "xapi", "name": "accepted_values_fact_grades_grade_type__course__subsection__problem", "resource_type": "test", "package_name": "aspects", "path": "accepted_values_fact_grades_de7a17ef32c1f12fb10640d566a35d87.sql", "original_file_path": "models/grading/schema.yml", "unique_id": "test.aspects.accepted_values_fact_grades_grade_type__course__subsection__problem.712bd50c2f", "fqn": ["aspects", "grading", "accepted_values_fact_grades_grade_type__course__subsection__problem"], "alias": "accepted_values_fact_grades_de7a17ef32c1f12fb10640d566a35d87", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fact_grades_de7a17ef32c1f12fb10640d566a35d87", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_fact_grades_de7a17ef32c1f12fb10640d566a35d87"}, "created_at": 1716584567.4715416, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fact_grades_de7a17ef32c1f12fb10640d566a35d87\") }}", "language": "sql", "refs": [{"name": "fact_grades", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.aspects.fact_grades"]}, "compiled_path": "target/compiled/aspects/models/grading/schema.yml/accepted_values_fact_grades_de7a17ef32c1f12fb10640d566a35d87.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        grade_type as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_grades`\n    group by grade_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'course','subsection','problem'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "grade_type", "file_key_name": "models.fact_grades", "attached_node": "model.aspects.fact_grades"}, "test.aspects.accepted_values_fact_learner_course_status_approving_state__passed__failed.f9c0c1b85f": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["passed", "failed"], "column_name": "approving_state", "model": "{{ get_where_subquery(ref('fact_learner_course_status')) }}"}, "namespace": null}, "database": "", "schema": "xapi", "name": "accepted_values_fact_learner_course_status_approving_state__passed__failed", "resource_type": "test", "package_name": "aspects", "path": "accepted_values_fact_learner_c_559ec0ad399aaf9694346b1d7ddfb5aa.sql", "original_file_path": "models/grading/schema.yml", "unique_id": "test.aspects.accepted_values_fact_learner_course_status_approving_state__passed__failed.f9c0c1b85f", "fqn": ["aspects", "grading", "accepted_values_fact_learner_course_status_approving_state__passed__failed"], "alias": "accepted_values_fact_learner_c_559ec0ad399aaf9694346b1d7ddfb5aa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fact_learner_c_559ec0ad399aaf9694346b1d7ddfb5aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_fact_learner_c_559ec0ad399aaf9694346b1d7ddfb5aa"}, "created_at": 1716584567.477873, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fact_learner_c_559ec0ad399aaf9694346b1d7ddfb5aa\") }}", "language": "sql", "refs": [{"name": "fact_learner_course_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.aspects.fact_learner_course_status"]}, "compiled_path": "target/compiled/aspects/models/grading/schema.yml/accepted_values_fact_learner_c_559ec0ad399aaf9694346b1d7ddfb5aa.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        approving_state as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_learner_course_status`\n    group by approving_state\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'passed','failed'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "approving_state", "file_key_name": "models.fact_learner_course_status", "attached_node": "model.aspects.fact_learner_course_status"}, "test.aspects.accepted_values_fact_student_status_enrollment_status__registered__unregistered.53cae8a0f3": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["registered", "unregistered"], "column_name": "enrollment_status", "model": "{{ get_where_subquery(ref('fact_student_status')) }}"}, "namespace": null}, "database": "", "schema": "xapi", "name": "accepted_values_fact_student_status_enrollment_status__registered__unregistered", "resource_type": "test", "package_name": "aspects", "path": "accepted_values_fact_student_s_8a61d4434c0b8a7d4988caa6759e7181.sql", "original_file_path": "models/grading/schema.yml", "unique_id": "test.aspects.accepted_values_fact_student_status_enrollment_status__registered__unregistered.53cae8a0f3", "fqn": ["aspects", "grading", "accepted_values_fact_student_status_enrollment_status__registered__unregistered"], "alias": "accepted_values_fact_student_s_8a61d4434c0b8a7d4988caa6759e7181", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fact_student_s_8a61d4434c0b8a7d4988caa6759e7181", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_fact_student_s_8a61d4434c0b8a7d4988caa6759e7181"}, "created_at": 1716584567.4840696, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fact_student_s_8a61d4434c0b8a7d4988caa6759e7181\") }}", "language": "sql", "refs": [{"name": "fact_student_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.aspects.fact_student_status"]}, "compiled_path": "target/compiled/aspects/models/grading/schema.yml/accepted_values_fact_student_s_8a61d4434c0b8a7d4988caa6759e7181.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        enrollment_status as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_student_status`\n    group by enrollment_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'registered','unregistered'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "enrollment_status", "file_key_name": "models.fact_student_status", "attached_node": "model.aspects.fact_student_status"}, "test.aspects.accepted_values_fact_instance_enrollments_enrollment_status__registered__unregistered.305ffdf696": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["registered", "unregistered"], "column_name": "enrollment_status", "model": "{{ get_where_subquery(ref('fact_instance_enrollments')) }}"}, "namespace": null}, "database": "", "schema": "xapi", "name": "accepted_values_fact_instance_enrollments_enrollment_status__registered__unregistered", "resource_type": "test", "package_name": "aspects", "path": "accepted_values_fact_instance__cfd2085c76a9896caa39f9ccef440adf.sql", "original_file_path": "models/instance/schema.yml", "unique_id": "test.aspects.accepted_values_fact_instance_enrollments_enrollment_status__registered__unregistered.305ffdf696", "fqn": ["aspects", "instance", "accepted_values_fact_instance_enrollments_enrollment_status__registered__unregistered"], "alias": "accepted_values_fact_instance__cfd2085c76a9896caa39f9ccef440adf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fact_instance__cfd2085c76a9896caa39f9ccef440adf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_fact_instance__cfd2085c76a9896caa39f9ccef440adf"}, "created_at": 1716584567.4945366, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fact_instance__cfd2085c76a9896caa39f9ccef440adf\") }}", "language": "sql", "refs": [{"name": "fact_instance_enrollments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.aspects.fact_instance_enrollments"]}, "compiled_path": "target/compiled/aspects/models/instance/schema.yml/accepted_values_fact_instance__cfd2085c76a9896caa39f9ccef440adf.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        enrollment_status as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_instance_enrollments`\n    group by enrollment_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'registered','unregistered'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "enrollment_status", "file_key_name": "models.fact_instance_enrollments", "attached_node": "model.aspects.fact_instance_enrollments"}, "test.aspects.accepted_values_fact_video_engagement_content_level__section__subsection.636c5e7005": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["section", "subsection"], "column_name": "content_level", "model": "{{ get_where_subquery(ref('fact_video_engagement')) }}"}, "namespace": null}, "database": "", "schema": "xapi", "name": "accepted_values_fact_video_engagement_content_level__section__subsection", "resource_type": "test", "package_name": "aspects", "path": "accepted_values_fact_video_eng_1114368cd7e3e54d8e33e4933a5078fe.sql", "original_file_path": "models/video/schema.yml", "unique_id": "test.aspects.accepted_values_fact_video_engagement_content_level__section__subsection.636c5e7005", "fqn": ["aspects", "video", "accepted_values_fact_video_engagement_content_level__section__subsection"], "alias": "accepted_values_fact_video_eng_1114368cd7e3e54d8e33e4933a5078fe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fact_video_eng_1114368cd7e3e54d8e33e4933a5078fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_fact_video_eng_1114368cd7e3e54d8e33e4933a5078fe"}, "created_at": 1716584567.520073, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fact_video_eng_1114368cd7e3e54d8e33e4933a5078fe\") }}", "language": "sql", "refs": [{"name": "fact_video_engagement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.aspects.fact_video_engagement"]}, "compiled_path": "target/compiled/aspects/models/video/schema.yml/accepted_values_fact_video_eng_1114368cd7e3e54d8e33e4933a5078fe.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        content_level as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_video_engagement`\n    group by content_level\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'section','subsection'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "content_level", "file_key_name": "models.fact_video_engagement", "attached_node": "model.aspects.fact_video_engagement"}, "test.aspects.accepted_values_fact_video_engagement_section_subsection_video_engagement__No_videos_viewed_yet__At_least_one_video_viewed__All_videos_viewed.91f6ccbf80": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["No videos viewed yet", "At least one video viewed", "All videos viewed"], "column_name": "section_subsection_video_engagement", "model": "{{ get_where_subquery(ref('fact_video_engagement')) }}"}, "namespace": null}, "database": "", "schema": "xapi", "name": "accepted_values_fact_video_engagement_section_subsection_video_engagement__No_videos_viewed_yet__At_least_one_video_viewed__All_videos_viewed", "resource_type": "test", "package_name": "aspects", "path": "accepted_values_fact_video_eng_b5eba4b87ba3d5dc281e045ba5fb35bc.sql", "original_file_path": "models/video/schema.yml", "unique_id": "test.aspects.accepted_values_fact_video_engagement_section_subsection_video_engagement__No_videos_viewed_yet__At_least_one_video_viewed__All_videos_viewed.91f6ccbf80", "fqn": ["aspects", "video", "accepted_values_fact_video_engagement_section_subsection_video_engagement__No_videos_viewed_yet__At_least_one_video_viewed__All_videos_viewed"], "alias": "accepted_values_fact_video_eng_b5eba4b87ba3d5dc281e045ba5fb35bc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fact_video_eng_b5eba4b87ba3d5dc281e045ba5fb35bc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_fact_video_eng_b5eba4b87ba3d5dc281e045ba5fb35bc"}, "created_at": 1716584567.5256455, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fact_video_eng_b5eba4b87ba3d5dc281e045ba5fb35bc\") }}", "language": "sql", "refs": [{"name": "fact_video_engagement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.aspects.fact_video_engagement"]}, "compiled_path": "target/compiled/aspects/models/video/schema.yml/accepted_values_fact_video_eng_b5eba4b87ba3d5dc281e045ba5fb35bc.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        section_subsection_video_engagement as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_video_engagement`\n    group by section_subsection_video_engagement\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'No videos viewed yet','At least one video viewed','All videos viewed'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "section_subsection_video_engagement", "file_key_name": "models.fact_video_engagement", "attached_node": "model.aspects.fact_video_engagement"}, "test.aspects.accepted_values_section_video_engagement_engagement_level__No_videos_viewed_yet__All_videos_viewed__At_least_one_video_viewed.cf55898019": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["No videos viewed yet", "All videos viewed", "At least one video viewed"], "column_name": "engagement_level", "model": "{{ get_where_subquery(ref('section_video_engagement')) }}"}, "namespace": null}, "database": "", "schema": "xapi", "name": "accepted_values_section_video_engagement_engagement_level__No_videos_viewed_yet__All_videos_viewed__At_least_one_video_viewed", "resource_type": "test", "package_name": "aspects", "path": "accepted_values_section_video__062800df53b43a7f652f5cb37390775d.sql", "original_file_path": "models/video/schema.yml", "unique_id": "test.aspects.accepted_values_section_video_engagement_engagement_level__No_videos_viewed_yet__All_videos_viewed__At_least_one_video_viewed.cf55898019", "fqn": ["aspects", "video", "accepted_values_section_video_engagement_engagement_level__No_videos_viewed_yet__All_videos_viewed__At_least_one_video_viewed"], "alias": "accepted_values_section_video__062800df53b43a7f652f5cb37390775d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_section_video__062800df53b43a7f652f5cb37390775d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_section_video__062800df53b43a7f652f5cb37390775d"}, "created_at": 1716584567.5320363, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_section_video__062800df53b43a7f652f5cb37390775d\") }}", "language": "sql", "refs": [{"name": "section_video_engagement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.aspects.section_video_engagement"]}, "compiled_path": "target/compiled/aspects/models/video/schema.yml/accepted_values_section_video__062800df53b43a7f652f5cb37390775d.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        engagement_level as value_field,\n        count(*) as n_records\n\n    from `xapi`.`section_video_engagement`\n    group by engagement_level\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'No videos viewed yet','All videos viewed','At least one video viewed'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "engagement_level", "file_key_name": "models.section_video_engagement", "attached_node": "model.aspects.section_video_engagement"}, "test.aspects.accepted_values_subsection_video_engagement_engagement_level__No_videos_viewed_yet__All_videos_viewed__At_least_one_video_viewed.73602253b6": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["No videos viewed yet", "All videos viewed", "At least one video viewed"], "column_name": "engagement_level", "model": "{{ get_where_subquery(ref('subsection_video_engagement')) }}"}, "namespace": null}, "database": "", "schema": "xapi", "name": "accepted_values_subsection_video_engagement_engagement_level__No_videos_viewed_yet__All_videos_viewed__At_least_one_video_viewed", "resource_type": "test", "package_name": "aspects", "path": "accepted_values_subsection_vid_82dab7a2dca7729a06c9c77a28510c9f.sql", "original_file_path": "models/video/schema.yml", "unique_id": "test.aspects.accepted_values_subsection_video_engagement_engagement_level__No_videos_viewed_yet__All_videos_viewed__At_least_one_video_viewed.73602253b6", "fqn": ["aspects", "video", "accepted_values_subsection_video_engagement_engagement_level__No_videos_viewed_yet__All_videos_viewed__At_least_one_video_viewed"], "alias": "accepted_values_subsection_vid_82dab7a2dca7729a06c9c77a28510c9f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_subsection_vid_82dab7a2dca7729a06c9c77a28510c9f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_subsection_vid_82dab7a2dca7729a06c9c77a28510c9f"}, "created_at": 1716584567.5367758, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_subsection_vid_82dab7a2dca7729a06c9c77a28510c9f\") }}", "language": "sql", "refs": [{"name": "subsection_video_engagement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.aspects.subsection_video_engagement"]}, "compiled_path": "target/compiled/aspects/models/video/schema.yml/accepted_values_subsection_vid_82dab7a2dca7729a06c9c77a28510c9f.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        engagement_level as value_field,\n        count(*) as n_records\n\n    from `xapi`.`subsection_video_engagement`\n    group by engagement_level\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'No videos viewed yet','All videos viewed','At least one video viewed'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "engagement_level", "file_key_name": "models.subsection_video_engagement", "attached_node": "model.aspects.subsection_video_engagement"}, "test.aspects.accepted_values_learner_summary_enrollment_status__registered__unregistered.be87359ff8": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["registered", "unregistered"], "column_name": "enrollment_status", "model": "{{ get_where_subquery(ref('learner_summary')) }}"}, "namespace": null}, "database": "", "schema": "xapi", "name": "accepted_values_learner_summary_enrollment_status__registered__unregistered", "resource_type": "test", "package_name": "aspects", "path": "accepted_values_learner_summar_5dace832c7037bfdcd4d006ddfc6c238.sql", "original_file_path": "models/learners/schema.yml", "unique_id": "test.aspects.accepted_values_learner_summary_enrollment_status__registered__unregistered.be87359ff8", "fqn": ["aspects", "learners", "accepted_values_learner_summary_enrollment_status__registered__unregistered"], "alias": "accepted_values_learner_summar_5dace832c7037bfdcd4d006ddfc6c238", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_learner_summar_5dace832c7037bfdcd4d006ddfc6c238", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_learner_summar_5dace832c7037bfdcd4d006ddfc6c238"}, "created_at": 1716584567.5436187, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_learner_summar_5dace832c7037bfdcd4d006ddfc6c238\") }}", "language": "sql", "refs": [{"name": "learner_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.aspects.learner_summary"]}, "compiled_path": "target/compiled/aspects/models/learners/schema.yml/accepted_values_learner_summar_5dace832c7037bfdcd4d006ddfc6c238.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        enrollment_status as value_field,\n        count(*) as n_records\n\n    from `xapi`.`learner_summary`\n    group by enrollment_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'registered','unregistered'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "enrollment_status", "file_key_name": "models.learner_summary", "attached_node": "model.aspects.learner_summary"}, "test.aspects.accepted_values_fact_navigation_dropoff_rollup_name__section__subsection.8afafb193f": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["section", "subsection"], "column_name": "rollup_name", "model": "{{ get_where_subquery(ref('fact_navigation_dropoff')) }}"}, "namespace": null}, "database": "", "schema": "xapi", "name": "accepted_values_fact_navigation_dropoff_rollup_name__section__subsection", "resource_type": "test", "package_name": "aspects", "path": "accepted_values_fact_navigatio_646d93d641ba374dbef7aa2ce7a9906a.sql", "original_file_path": "models/navigation/schema.yml", "unique_id": "test.aspects.accepted_values_fact_navigation_dropoff_rollup_name__section__subsection.8afafb193f", "fqn": ["aspects", "navigation", "accepted_values_fact_navigation_dropoff_rollup_name__section__subsection"], "alias": "accepted_values_fact_navigatio_646d93d641ba374dbef7aa2ce7a9906a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fact_navigatio_646d93d641ba374dbef7aa2ce7a9906a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_fact_navigatio_646d93d641ba374dbef7aa2ce7a9906a"}, "created_at": 1716584567.5618298, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fact_navigatio_646d93d641ba374dbef7aa2ce7a9906a\") }}", "language": "sql", "refs": [{"name": "fact_navigation_dropoff", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.aspects.fact_navigation_dropoff"]}, "compiled_path": "target/compiled/aspects/models/navigation/schema.yml/accepted_values_fact_navigatio_646d93d641ba374dbef7aa2ce7a9906a.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        rollup_name as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_navigation_dropoff`\n    group by rollup_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'section','subsection'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rollup_name", "file_key_name": "models.fact_navigation_dropoff", "attached_node": "model.aspects.fact_navigation_dropoff"}, "test.aspects.accepted_values_fact_pageview_engagement_content_level__section__subsection.dd9e9af3ed": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["section", "subsection"], "column_name": "content_level", "model": "{{ get_where_subquery(ref('fact_pageview_engagement')) }}"}, "namespace": null}, "database": "", "schema": "xapi", "name": "accepted_values_fact_pageview_engagement_content_level__section__subsection", "resource_type": "test", "package_name": "aspects", "path": "accepted_values_fact_pageview__b1bf1051fb872a03819d7debc3e80b8b.sql", "original_file_path": "models/navigation/schema.yml", "unique_id": "test.aspects.accepted_values_fact_pageview_engagement_content_level__section__subsection.dd9e9af3ed", "fqn": ["aspects", "navigation", "accepted_values_fact_pageview_engagement_content_level__section__subsection"], "alias": "accepted_values_fact_pageview__b1bf1051fb872a03819d7debc3e80b8b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fact_pageview__b1bf1051fb872a03819d7debc3e80b8b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_fact_pageview__b1bf1051fb872a03819d7debc3e80b8b"}, "created_at": 1716584567.566877, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fact_pageview__b1bf1051fb872a03819d7debc3e80b8b\") }}", "language": "sql", "refs": [{"name": "fact_pageview_engagement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.aspects.fact_pageview_engagement"]}, "compiled_path": "target/compiled/aspects/models/navigation/schema.yml/accepted_values_fact_pageview__b1bf1051fb872a03819d7debc3e80b8b.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        content_level as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_pageview_engagement`\n    group by content_level\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'section','subsection'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "content_level", "file_key_name": "models.fact_pageview_engagement", "attached_node": "model.aspects.fact_pageview_engagement"}}, "sources": {"source.aspects.xapi.xapi_events_all": {"database": "xapi", "schema": "xapi", "name": "xapi_events_all", "resource_type": "source", "package_name": "aspects", "path": "models/base/sources.yml", "original_file_path": "models/base/sources.yml", "unique_id": "source.aspects.xapi.xapi_events_all", "fqn": ["aspects", "base", "xapi", "xapi_events_all"], "source_name": "xapi", "source_description": "the xapi database in clickhouse", "loader": "", "identifier": "xapi_events_all", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Base table for raw xAPI events", "columns": {"event_id": {"name": "event_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "emission_time": {"name": "emission_time", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event": {"name": "event", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`xapi`.`xapi_events_all`", "created_at": 1716584567.589804}, "source.aspects.event_sink.user_profile": {"database": "event_sink", "schema": "event_sink", "name": "user_profile", "resource_type": "source", "package_name": "aspects", "path": "models/users/sources.yml", "original_file_path": "models/users/sources.yml", "unique_id": "source.aspects.event_sink.user_profile", "fqn": ["aspects", "users", "event_sink", "user_profile"], "source_name": "event_sink", "source_description": "", "loader": "", "identifier": "user_profile", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "courseware": {"name": "courseware", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "language": {"name": "language", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location": {"name": "location", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "year_of_birth": {"name": "year_of_birth", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gender": {"name": "gender", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "level_of_education": {"name": "level_of_education", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mailing_address": {"name": "mailing_address", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "goals": {"name": "goals", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bio": {"name": "bio", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "profile_image_uploaded_at": {"name": "profile_image_uploaded_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dump_id": {"name": "dump_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_last_dumped": {"name": "time_last_dumped", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`event_sink`.`user_profile`", "created_at": 1716584567.5901334}, "source.aspects.event_sink.external_id": {"database": "event_sink", "schema": "event_sink", "name": "external_id", "resource_type": "source", "package_name": "aspects", "path": "models/users/sources.yml", "original_file_path": "models/users/sources.yml", "unique_id": "source.aspects.event_sink.external_id", "fqn": ["aspects", "users", "event_sink", "external_id"], "source_name": "event_sink", "source_description": "", "loader": "", "identifier": "external_id", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"external_user_id": {"name": "external_user_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "external_id_type": {"name": "external_id_type", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "username": {"name": "username", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dump_id": {"name": "dump_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_last_dumped": {"name": "time_last_dumped", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`event_sink`.`external_id`", "created_at": 1716584567.590358}, "source.aspects.event_sink.course_blocks": {"database": "event_sink", "schema": "event_sink", "name": "course_blocks", "resource_type": "source", "package_name": "aspects", "path": "models/courses/sources.yml", "original_file_path": "models/courses/sources.yml", "unique_id": "source.aspects.event_sink.course_blocks", "fqn": ["aspects", "courses", "event_sink", "course_blocks"], "source_name": "event_sink", "source_description": "", "loader": "", "identifier": "course_blocks", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"org": {"name": "org", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location": {"name": "location", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_name": {"name": "display_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xblock_data_json": {"name": "xblock_data_json", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order": {"name": "order", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "edited_on": {"name": "edited_on", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dump_id": {"name": "dump_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_last_dumped": {"name": "time_last_dumped", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`event_sink`.`course_blocks`", "created_at": 1716584567.5905683}, "source.aspects.event_sink.course_overviews": {"database": "event_sink", "schema": "event_sink", "name": "course_overviews", "resource_type": "source", "package_name": "aspects", "path": "models/courses/sources.yml", "original_file_path": "models/courses/sources.yml", "unique_id": "source.aspects.event_sink.course_overviews", "fqn": ["aspects", "courses", "event_sink", "course_overviews"], "source_name": "event_sink", "source_description": "", "loader": "", "identifier": "course_overviews", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"org": {"name": "org", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "course_key": {"name": "course_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display_name": {"name": "display_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "course_start": {"name": "course_start", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "course_end": {"name": "course_end", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "enrollment_start": {"name": "enrollment_start", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "enrollment_end": {"name": "enrollment_end", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "self_paced": {"name": "self_paced", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "course_data_json": {"name": "course_data_json", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "modified": {"name": "modified", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dump_id": {"name": "dump_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_last_dumped": {"name": "time_last_dumped", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`event_sink`.`course_overviews`", "created_at": 1716584567.5907836}}, "macros": {"macro.aspects.get_problem_id": {"name": "get_problem_id", "resource_type": "macro", "package_name": "aspects", "path": "macros/get_problem_id.sql", "original_file_path": "macros/get_problem_id.sql", "unique_id": "macro.aspects.get_problem_id", "macro_sql": "{% macro get_problem_id(object_id) %}\n    regexpExtract(\n        object_id, 'xblock/([\\w\\d-\\+:@]*@problem\\+block@[\\w\\d][^_]*)(_\\d_\\d)?', 1\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1290867, "supported_languages": null}, "macro.aspects.a_tag": {"name": "a_tag", "resource_type": "macro", "package_name": "aspects", "path": "macros/a_tag.sql", "original_file_path": "macros/a_tag.sql", "unique_id": "macro.aspects.a_tag", "macro_sql": "{% macro a_tag(object_id, object_name) %}\n    concat(\n        '<a href=\"', {{ object_id }}, '\" target=\"_blank\">', {{ object_name }}, '</a>'\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1295319, "supported_languages": null}, "macro.aspects.on_cluster": {"name": "on_cluster", "resource_type": "macro", "package_name": "aspects", "path": "macros/cluster_macros.sql", "original_file_path": "macros/cluster_macros.sql", "unique_id": "macro.aspects.on_cluster", "macro_sql": "{% macro on_cluster() -%}\n    {%- if env_var(\"CLICKHOUSE_CLUSTER_NAME\", \"\") != \"\" -%}\n    ON CLUSTER {{ env_var(\"CLICKHOUSE_CLUSTER_NAME\") }}\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1303556, "supported_languages": null}, "macro.aspects.get_engine": {"name": "get_engine", "resource_type": "macro", "package_name": "aspects", "path": "macros/cluster_macros.sql", "original_file_path": "macros/cluster_macros.sql", "unique_id": "macro.aspects.get_engine", "macro_sql": "{% macro get_engine(engine) -%}\n  {%- if env_var(\"CLICKHOUSE_CLUSTER_NAME\", \"\") != \"\" -%}\n    {{ \"Replicated\" + engine }}\n  {% else %}\n    {{ engine }}\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1309745, "supported_languages": null}, "macro.aspects.get_bucket": {"name": "get_bucket", "resource_type": "macro", "package_name": "aspects", "path": "macros/get_bucket.sql", "original_file_path": "macros/get_bucket.sql", "unique_id": "macro.aspects.get_bucket", "macro_sql": "{% macro get_bucket(field) -%}\n    case\n        when {{ field }} >= 0.9\n        then '90-100%'\n        when {{ field }} >= 0.8 and {{ field }} < 0.9\n        then '80-89%'\n        when {{ field }} >= 0.7 and {{ field }} < 0.8\n        then '70-79%'\n        when {{ field }} >= 0.6 and {{ field }} < 0.7\n        then '60-69%'\n        when {{ field }} >= 0.5 and {{ field }} < 0.6\n        then '50-59%'\n        when {{ field }} >= 0.4 and {{ field }} < 0.5\n        then '40-49%'\n        when {{ field }} >= 0.3 and {{ field }} < 0.4\n        then '30-39%'\n        when {{ field }} >= 0.2 and {{ field }} < 0.3\n        then '20-29%'\n        when {{ field }} >= 0.1 and {{ field }} < 0.2\n        then '10-19%'\n        else '0-9%'\n    end\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.132646, "supported_languages": null}, "macro.aspects.items_per_subsection": {"name": "items_per_subsection", "resource_type": "macro", "package_name": "aspects", "path": "macros/items_per_subsection.sql", "original_file_path": "macros/items_per_subsection.sql", "unique_id": "macro.aspects.items_per_subsection", "macro_sql": "{% macro items_per_subsection(block_pattern) %}\n    with\n        items_per_subsection as (\n            select\n                org,\n                course_key,\n                section_number,\n                subsection_number,\n                course_order,\n                graded,\n                count(*) as item_count\n            from {{ ref(\"dim_course_blocks\") }}\n            where block_id like '{{ block_pattern }}'\n            group by\n                org, course_key, section_number, subsection_number, course_order, graded\n        )\n\n    select\n        ips.org as org,\n        ips.course_key as course_key,\n        ips.section_number as section_number,\n        section_blocks.display_name_with_location as section_with_name,\n        ips.subsection_number as subsection_number,\n        subsection_blocks.display_name_with_location as subsection_with_name,\n        ips.course_order as course_order,\n        ips.graded as graded,\n        ips.item_count as item_count,\n        subsection_blocks.block_id as subsection_block_id,\n        section_blocks.block_id as section_block_id\n    from items_per_subsection ips\n    left join\n        {{ ref(\"dim_course_blocks\") }} section_blocks\n        on (\n            ips.section_number = section_blocks.hierarchy_location\n            and ips.org = section_blocks.org\n            and ips.course_key = section_blocks.course_key\n            and section_blocks.block_id like '%@chapter+block@%'\n        )\n    left join\n        {{ ref(\"dim_course_blocks\") }} subsection_blocks\n        on (\n            ips.subsection_number = subsection_blocks.hierarchy_location\n            and ips.org = subsection_blocks.org\n            and ips.course_key = subsection_blocks.course_key\n            and subsection_blocks.block_id like '%@sequential+block@%'\n        )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1338632, "supported_languages": null}, "macro.aspects.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "aspects", "path": "macros/get_custom_schema.sql", "original_file_path": "macros/get_custom_schema.sql", "unique_id": "macro.aspects.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {{ generate_schema_name_for_env(custom_schema_name, node) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_schema_name_for_env"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.134249, "supported_languages": null}, "macro.aspects.subsection_from_display": {"name": "subsection_from_display", "resource_type": "macro", "package_name": "aspects", "path": "macros/parse_section_codes.sql", "original_file_path": "macros/parse_section_codes.sql", "unique_id": "macro.aspects.subsection_from_display", "macro_sql": "{% macro subsection_from_display(display_name_with_location) %}\n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', {{ display_name_with_location }})[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1346958, "supported_languages": null}, "macro.aspects.section_from_display": {"name": "section_from_display", "resource_type": "macro", "package_name": "aspects", "path": "macros/parse_section_codes.sql", "original_file_path": "macros/parse_section_codes.sql", "unique_id": "macro.aspects.section_from_display", "macro_sql": "{% macro section_from_display(display_name_with_location) %}\n    concat(\n        splitByString(\n            ':', splitByString(' - ', {{ display_name_with_location }})[1], 1\n        )[1],\n        ':0:0'\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.134969, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_catalog": {"name": "clickhouse__get_catalog", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_catalog", "macro_sql": "{% macro clickhouse__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    select\n      '' as table_database,\n      columns.database as table_schema,\n      columns.table as table_name,\n      if(tables.engine not in ('MaterializedView', 'View'), 'table', 'view') as table_type,\n      nullIf(tables.comment, '') as table_comment,\n      columns.name as column_name,\n      columns.position as column_index,\n      columns.type as column_type,\n      nullIf(columns.comment, '') as column_comment,\n      null as table_owner\n    from system.columns as columns\n    join system.tables as tables on tables.database = columns.database and tables.name = columns.table\n    where database != 'system' and\n    (\n    {%- for schema in schemas -%}\n      columns.database = '{{ schema }}'\n      {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    )\n    order by columns.database, columns.table, columns.position\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1362774, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__list_schemas": {"name": "clickhouse__list_schemas", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__list_schemas", "macro_sql": "{% macro clickhouse__list_schemas(database) %}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select name from system.databases\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1414907, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__create_schema": {"name": "clickhouse__create_schema", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__create_schema", "macro_sql": "{% macro clickhouse__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create database if not exists {{ relation.without_identifier().include(database=False) }}\n        {{ on_cluster_clause(relation)}}\n        {{ adapter.clickhouse_db_engine_clause() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1422005, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__drop_schema": {"name": "clickhouse__drop_schema", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__drop_schema", "macro_sql": "{% macro clickhouse__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop database if exists {{ relation.without_identifier().include(database=False) }} {{ on_cluster_clause(relation)}}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1427708, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__list_relations_without_caching": {"name": "clickhouse__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__list_relations_without_caching", "macro_sql": "{% macro clickhouse__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      t.name as name,\n      t.database as schema,\n      multiIf(\n        engine in ('MaterializedView', 'View'), 'view',\n        engine = 'Dictionary', 'dictionary',\n        'table'\n      ) as type,\n      db.engine as db_engine,\n      {%- if adapter.get_clickhouse_cluster_name() -%}\n        count(distinct _shard_num) > 1  as  is_on_cluster\n        from clusterAllReplicas({{ adapter.get_clickhouse_cluster_name() }}, system.tables) as t\n          join system.databases as db on t.database = db.name\n        where schema = '{{ schema_relation.schema }}'\n        group by name, schema, type, db_engine\n      {%- else -%}\n        0 as is_on_cluster\n          from system.tables as t join system.databases as db on t.database = db.name\n        where schema = '{{ schema_relation.schema }}'\n      {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1438594, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_columns_in_relation": {"name": "clickhouse__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_columns_in_relation", "macro_sql": "{% macro clickhouse__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns', fetch_result=True) %}\n    select name, type from system.columns where table = '{{ relation.identifier }}'\n    {% if relation.schema %}\n      and database = '{{ relation.schema }}'\n    {% endif %}\n    order by position\n  {% endcall %}\n  {{ return(sql_convert_columns_in_relation(load_result('get_columns').table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1446807, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__drop_relation": {"name": "clickhouse__drop_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__drop_relation", "macro_sql": "{% macro clickhouse__drop_relation(relation, obj_type='table') -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    {# drop relation on cluster by default if cluster is set #}\n    drop {{ obj_type }} if exists {{ relation }} {{ on_cluster_clause(relation.without_identifier(), True)}}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1453447, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__rename_relation": {"name": "clickhouse__rename_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__rename_relation", "macro_sql": "{% macro clickhouse__rename_relation(from_relation, to_relation, obj_type='table') -%}\n  {% call statement('drop_relation') %}\n    drop {{ obj_type }} if exists {{ to_relation }} {{ on_cluster_clause(to_relation.without_identifier())}}\n  {% endcall %}\n  {% call statement('rename_relation') %}\n    rename {{ obj_type }} {{ from_relation }} to {{ to_relation }} {{ on_cluster_clause(from_relation)}}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.146306, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__truncate_relation": {"name": "clickhouse__truncate_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__truncate_relation", "macro_sql": "{% macro clickhouse__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }} {{ on_cluster_clause(relation)}}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1467505, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__make_temp_relation": {"name": "clickhouse__make_temp_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__make_temp_relation", "macro_sql": "{% macro clickhouse__make_temp_relation(base_relation, suffix) %}\n  {% set tmp_identifier = base_relation.identifier ~ suffix %}\n  {% set tmp_relation = base_relation.incorporate(\n                              path={\"identifier\": tmp_identifier, \"schema\": None}) -%}\n  {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1475003, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__generate_database_name": {"name": "clickhouse__generate_database_name", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__generate_database_name", "macro_sql": "{% macro clickhouse__generate_database_name(custom_database_name=none, node=none) -%}\n  {% do return('') %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.147859, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_columns_in_query": {"name": "clickhouse__get_columns_in_query", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_columns_in_query", "macro_sql": "{% macro clickhouse__get_columns_in_query(select_sql) %}\n  {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    limit 0\n  {% endcall %}\n\n  {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.148598, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__alter_column_type": {"name": "clickhouse__alter_column_type", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__alter_column_type", "macro_sql": "{% macro clickhouse__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} {{ on_cluster_clause(relation)}} modify column {{ adapter.quote(column_name) }} {{ new_column_type }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1492686, "supported_languages": null}, "macro.dbt_clickhouse.exchange_tables_atomic": {"name": "exchange_tables_atomic", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_clickhouse.exchange_tables_atomic", "macro_sql": "{% macro exchange_tables_atomic(old_relation, target_relation, obj_types='TABLES') %}\n\n  {%- if adapter.get_clickhouse_cluster_name() is not none and obj_types == 'TABLES' and 'Replicated' in engine_clause() %}\n    {%- call statement('exchange_table_sync_replica') -%}\n      SYSTEM SYNC REPLICA  {{ on_cluster_clause(target_relation) }} {{ target_relation.schema }}.{{ target_relation.identifier }}\n    {% endcall %}\n  {%- endif %}\n  {%- call statement('exchange_tables_atomic') -%}\n    EXCHANGE {{ obj_types }} {{ old_relation }} AND {{ target_relation }} {{ on_cluster_clause(target_relation)}}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.engine_clause", "macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1505613, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_assert_columns_equivalent": {"name": "clickhouse__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/column_spec_ddl.sql", "original_file_path": "macros/column_spec_ddl.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_assert_columns_equivalent", "macro_sql": "{% macro clickhouse__get_assert_columns_equivalent(sql) -%}\n  {%- set user_defined_columns = model['columns'] -%}\n\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {%- set yaml_columns = user_defined_columns.values() -%}\n\n  {%- set sql_file_provided_columns = adapter.get_column_schema_from_query(sql) -%}\n  {%- set sql_columns = adapter.format_columns(sql_file_provided_columns) -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['data_type'] != yaml_col[0]['data_type'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.154184, "supported_languages": null}, "macro.dbt_clickhouse.one_alter_relation": {"name": "one_alter_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_clickhouse.one_alter_relation", "macro_sql": "{% macro one_alter_relation(relation, alter_comments) %}\n  alter table {{ relation }} {{ on_cluster_clause(relation) }} {{ alter_comments }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.156316, "supported_languages": null}, "macro.dbt_clickhouse.one_alter_column_comment": {"name": "one_alter_column_comment", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_clickhouse.one_alter_column_comment", "macro_sql": "{% macro one_alter_column_comment(relation, column_name, comment) %}\n  alter table {{ relation }} {{ on_cluster_clause(relation) }} comment column {{ column_name }} '{{ comment }}'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.15677, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__alter_relation_comment": {"name": "clickhouse__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__alter_relation_comment", "macro_sql": "{% macro clickhouse__alter_relation_comment(relation, comment) %}\n  alter table {{ relation }} {{ on_cluster_clause(relation) }} modify comment '{{ comment }}'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1571527, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__persist_docs": {"name": "clickhouse__persist_docs", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__persist_docs", "macro_sql": "{% macro clickhouse__persist_docs(relation, model, for_relation, for_columns) %}\n  {%- set alter_comments = [] %}\n\n  {%- if for_relation and config.persist_relation_docs() and model.description -%}\n    {% set escaped_comment = clickhouse_escape_comment(model.description) %}\n    {% do alter_comments.append(\"modify comment {comment}\".format(comment=escaped_comment)) %}\n  {%- endif -%}\n\n  {%- if for_columns and config.persist_column_docs() and model.columns -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% for column_name in model.columns if (column_name in existing_columns) %}\n      {%- set comment = model.columns[column_name]['description'] -%}\n      {%- if comment %}\n        {% set escaped_comment = clickhouse_escape_comment(comment) %}\n        {% do alter_comments.append(\"comment column {column_name} {comment}\".format(column_name=column_name, comment=escaped_comment)) %}\n      {%- endif %}\n    {%- endfor -%}\n  {%- endif -%}\n\n  {%- if alter_comments | length > 0 -%}\n    {% do run_query(one_alter_relation(relation, alter_comments|join(', '))) %}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse_escape_comment", "macro.dbt.run_query", "macro.dbt_clickhouse.one_alter_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1597397, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse_escape_comment": {"name": "clickhouse_escape_comment", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_clickhouse.clickhouse_escape_comment", "macro_sql": "{% macro clickhouse_escape_comment(comment) -%}\n  {% if adapter.is_before_version('21.9.2.17') %}\n    {% do exceptions.raise_compiler_error('Unsupported ClickHouse version for using heredoc syntax') %}\n  {% endif %}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.160972, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_or_create_relation": {"name": "clickhouse__get_or_create_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_or_create_relation", "macro_sql": "{% macro clickhouse__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set can_exchange = adapter.can_exchange(schema, type) %}\n  {%- set should_on_cluster = adapter.should_on_cluster(config.get('materialized'), engine_clause()) %}\n  {%- set new_relation = api.Relation.create(\n      database=None,\n      schema=schema,\n      identifier=identifier,\n      type=type,\n      can_exchange=can_exchange,\n      can_on_cluster=should_on_cluster\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.engine_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1631942, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_database": {"name": "clickhouse__get_database", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_database", "macro_sql": "{% macro clickhouse__get_database(database) %}\n    {% call statement('get_database', fetch_result=True) %}\n        select name, engine, comment\n        from system.databases\n        where name = '{{ database }}'\n   {% endcall %}\n   {% do return(load_result('get_database').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1638455, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_show_grant_sql": {"name": "clickhouse__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_show_grant_sql", "macro_sql": "{% macro clickhouse__get_show_grant_sql(relation) %}\n    SELECT access_type as privilege_type, COALESCE(user_name, role_name) as grantee from system.grants where table = '{{ relation.name }}'\n    AND database = '{{ relation.schema }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1647012, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__call_dcl_statements": {"name": "clickhouse__call_dcl_statements", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__call_dcl_statements", "macro_sql": "{% macro clickhouse__call_dcl_statements(dcl_statement_list) %}\n    {% for dcl_statement in dcl_statement_list %}\n      {% call statement('dcl') %}\n        {{ dcl_statement }};\n      {% endcall %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.165218, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_grant_sql": {"name": "clickhouse__get_grant_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_grant_sql", "macro_sql": "\n\n\n{%- macro clickhouse__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ on_cluster_clause(relation)}} {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.165718, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_revoke_sql": {"name": "clickhouse__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_revoke_sql", "macro_sql": "{%- macro clickhouse__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ on_cluster_clause(relation)}} {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.166211, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__test_relationships": {"name": "clickhouse__test_relationships", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__test_relationships", "macro_sql": "{% macro clickhouse__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n-- end_of_sql\nsettings join_use_nulls = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.166918, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_test_sql": {"name": "clickhouse__get_test_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_test_sql", "macro_sql": "{% macro clickhouse__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    {% set main_sql_formatted = clickhouse__place_limit(main_sql, limit) if limit !=None else main_sql%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql_formatted }}\n    ) dbt_internal_test\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__place_limit"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1708074, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__place_limit": {"name": "clickhouse__place_limit", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__place_limit", "macro_sql": "{% macro clickhouse__place_limit(query, limit) -%}\n   {% if 'settings' in query.lower()%}\n        {% if '-- end_of_sql' not in query.lower()%}\n            {{exceptions.raise_compiler_error(\"-- end_of_sql must be set when using ClickHouse settings\")}}\n        {% endif %}\n        {% set split_by_settings_sections = query.split(\"-- end_of_sql\")%}\n        {% set split_by_settings_sections_with_limit = split_by_settings_sections[-2] + \"\\n LIMIT \" + limit|string  + \"\\n\" %}\n        {% set query_with_limit = \"-- end_of_sql\".join(split_by_settings_sections[:-2] + [split_by_settings_sections_with_limit, split_by_settings_sections[-1]])%}\n        {{query_with_limit}}\n    {% else %}\n    {{query}}\n    {{\"limit \" ~ limit}}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1725035, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__any_value": {"name": "clickhouse__any_value", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__any_value", "macro_sql": "{% macro clickhouse__any_value(expression) -%}\n    any({{ expression }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.172757, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__bool_or": {"name": "clickhouse__bool_or", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__bool_or", "macro_sql": "{% macro clickhouse__bool_or(expression) -%}\n    any({{ expression }}) > 0\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1729882, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__cast_bool_to_text": {"name": "clickhouse__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__cast_bool_to_text", "macro_sql": "{% macro clickhouse__cast_bool_to_text(field) %}\n    multiIf({{ field }} > 0, 'true', {{ field }} = 0, 'false', NULL)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1732655, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__hash": {"name": "clickhouse__hash", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__hash", "macro_sql": "{% macro clickhouse__hash(field) -%}\n    lower(hex(MD5(toString({{ field }} ))))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1734915, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__last_day": {"name": "clickhouse__last_day", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__last_day", "macro_sql": "\n\n\n{%- macro clickhouse__last_day(date, datepart) -%}\n    {{ dbt.dateadd('day', '-1', dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date)))}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1740696, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__split_part": {"name": "clickhouse__split_part", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__split_part", "macro_sql": "{% macro clickhouse__split_part(string_text, delimiter_text, part_number) %}\n    splitByChar('{{delimiter_text}}', {{ string_text }})[{{ part_number }}]\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.174429, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__replace": {"name": "clickhouse__replace", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__replace", "macro_sql": "{% macro clickhouse__replace(field, old_chars, new_chars) %}\n   replaceAll({{ field }},'{{ old_chars }}','{{ new_chars }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.17478, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__listagg": {"name": "clickhouse__listagg", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__listagg", "macro_sql": "{% macro clickhouse__listagg(measure, delimiter_text, order_by_clause, limit_num) %}\n  {{ exceptions.raise_compiler_error(\n    'ClickHouse does not support the listagg function.  See the groupArray function instead')\n    }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1751952, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__array_construct": {"name": "clickhouse__array_construct", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__array_construct", "macro_sql": "{% macro clickhouse__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    emptyArray{{data_type}}()\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.175739, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__array_append": {"name": "clickhouse__array_append", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__array_append", "macro_sql": "{% macro clickhouse__array_append(array, new_element) -%}\n    arrayPushBack({{ array }}, {{ new_element }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1760395, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__array_concat": {"name": "clickhouse__array_concat", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/utils.sql", "original_file_path": "macros/utils/utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__array_concat", "macro_sql": "{% macro clickhouse__array_concat(array_1, array_2) -%}\n   arrayConcat({{ array_1 }}, {{ array_2 }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.176335, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__current_timestamp": {"name": "clickhouse__current_timestamp", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__current_timestamp", "macro_sql": "{% macro clickhouse__current_timestamp() -%}\n  now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.176639, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__snapshot_string_as_time": {"name": "clickhouse__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__snapshot_string_as_time", "macro_sql": "{% macro clickhouse__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"toDateTime('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1771555, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse_s3source": {"name": "clickhouse_s3source", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/s3.sql", "original_file_path": "macros/materializations/s3.sql", "unique_id": "macro.dbt_clickhouse.clickhouse_s3source", "macro_sql": "{% macro clickhouse_s3source(config_name='', bucket='', path='', fmt='', structure='',\n    aws_access_key_id='', aws_secret_access_key='', compression='') %}\n  {% if config_name and not config_name.lower().endswith('s3') %}\n    {{ exceptions.raise_compiler_error(\"S3 configuration should end with 's3'\") }}\n  {% endif %}\n  {% set s3config = config.get(config_name, {}) %}\n  {{ adapter.s3source_clause(\n    config_name=config_name,\n    s3_model_config=s3config,\n    bucket=bucket,\n    path=path,\n    fmt=fmt,\n    structure=structure,\n    aws_access_key_id=aws_access_key_id,\n    aws_secret_access_key=aws_secret_access_key,\n    compression=compression) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1789224, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__load_csv_rows": {"name": "clickhouse__load_csv_rows", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__load_csv_rows", "macro_sql": "{% macro clickhouse__load_csv_rows(model, agate_table) %}\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set data_sql = adapter.get_csv_data(agate_table) %}\n\n  {% set sql -%}\n    insert into {{ this.render() }} ({{ cols_sql }})\n    {{ adapter.get_model_query_settings(model) }}\n    format CSV\n    {{ data_sql }}\n  {%- endset %}\n\n  {% do adapter.add_query(sql, bindings=agate_table, abridge_sql_log=True) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1810853, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__create_csv_table": {"name": "clickhouse__create_csv_table", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__create_csv_table", "macro_sql": "{% macro clickhouse__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} {{ on_cluster_clause(this) }} (\n      {%- for col_name in agate_table.column_names -%}\n        {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n        {%- set type = column_override.get(col_name, inferred_type) -%}\n        {%- set column_name = (col_name | string) -%}\n          {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n      {%- endfor -%}\n    )\n    {{ engine_clause() }}\n    {{ order_cols(label='order by') }}\n    {{ partition_cols(label='partition by') }}\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause", "macro.dbt_clickhouse.engine_clause", "macro.dbt_clickhouse.order_cols", "macro.dbt_clickhouse.partition_cols", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1835265, "supported_languages": null}, "macro.dbt_clickhouse.materialization_view_clickhouse": {"name": "materialization_view_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_clickhouse.materialization_view_clickhouse", "macro_sql": "{%- materialization view, adapter='clickhouse' -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set backup_relation = none -%}\n  {%- set preexisting_backup_relation = none -%}\n  {%- set preexisting_intermediate_relation = none -%}\n\n  {% if existing_relation is not none %}\n    {%- set backup_relation_type = existing_relation.type -%}\n    {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n    {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n    {% if not existing_relation.can_exchange %}\n      {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n      {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n    {% endif %}\n  {% endif %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if backup_relation is none %}\n    {{ log('Creating new relation ' + target_relation.name )}}\n    -- There is not existing relation, so we can just create\n    {% call statement('main') -%}\n      {{ get_create_view_as_sql(target_relation, sql) }}\n    {%- endcall %}\n  {% elif existing_relation.can_exchange %}\n    -- We can do an atomic exchange, so no need for an intermediate\n    {% call statement('main') -%}\n      {{ get_create_view_as_sql(backup_relation, sql) }}\n    {%- endcall %}\n    {% do exchange_tables_atomic(backup_relation, existing_relation) %}\n  {% else %}\n    -- We have to use an intermediate and rename accordingly\n    {% call statement('main') -%}\n      {{ get_create_view_as_sql(intermediate_relation, sql) }}\n    {%- endcall %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n  {% endif %}\n\n  -- cleanup\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_backup_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1914785, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.clickhouse__create_view_as": {"name": "clickhouse__create_view_as", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__create_view_as", "macro_sql": "{% macro clickhouse__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n\n  create view {{ relation.include(database=False) }} {{ on_cluster_clause(relation)}}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  )\n      {% if model.get('config').get('materialized') == 'view' %}\n      {{ adapter.get_model_settings(model) }}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.193122, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__snapshot_hash_arguments": {"name": "clickhouse__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__snapshot_hash_arguments", "macro_sql": "{% macro clickhouse__snapshot_hash_arguments(args) -%}\n  halfMD5({%- for arg in args -%}\n    coalesce(cast({{ arg }} as varchar ), '')\n    {% if not loop.last %} || '|' || {% endif %}\n  {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.197624, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__post_snapshot": {"name": "clickhouse__post_snapshot", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__post_snapshot", "macro_sql": "{% macro clickhouse__post_snapshot(staging_relation) %}\n    {{ drop_relation_if_exists(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1979034, "supported_languages": null}, "macro.dbt_clickhouse.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_clickhouse.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.1988194, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__snapshot_merge_sql": {"name": "clickhouse__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__snapshot_merge_sql", "macro_sql": "{% macro clickhouse__snapshot_merge_sql(target, source, insert_cols) -%}\n  {%- set insert_cols_csv = insert_cols | join(', ') -%}\n  {%- set valid_to_col = adapter.quote('dbt_valid_to') -%}\n\n  {%- set upsert = target.derivative('__snapshot_upsert') -%}\n  {% call statement('create_upsert_relation') %}\n    create table if not exists {{ upsert }} as {{ target }}\n  {% endcall %}\n\n  {% call statement('insert_unchanged_data') %}\n    insert into {{ upsert }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n      {{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ target }}\n    where dbt_scd_id not in (\n      select {{ source }}.dbt_scd_id from {{ source }} \n    )\n  {% endcall %}\n\n {% call statement('insert_updated_and_deleted') %}\n    insert into {{ upsert }} ({{ insert_cols_csv }})\n    with updates_and_deletes as (\n      select\n        dbt_scd_id,\n        dbt_valid_to\n      from {{ source }}\n      where dbt_change_type IN ('update', 'delete')\n    )\n    select {% for column in insert_cols %}\n      {%- if column == valid_to_col -%}\n        updates_and_deletes.dbt_valid_to as dbt_valid_to\n      {%- else -%}\n        target.{{ column }} as {{ column }}\n      {%- endif %} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ target }} target\n    join updates_and_deletes on target.dbt_scd_id = updates_and_deletes.dbt_scd_id;\n  {% endcall %}\n\n  {% call statement('insert_new') %}\n    insert into {{ upsert }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n      {{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }}\n    where {{ source }}.dbt_change_type IN ('insert');\n  {% endcall %}\n\n  {% if target.can_exchange %}\n    {% do exchange_tables_atomic(upsert, target) %}\n    {% call statement('drop_exchanged_relation') %}\n      drop table if exists {{ upsert }};\n    {% endcall %}\n  {% else %}\n    {% call statement('drop_target_relation') %}\n      drop table if exists {{ target }};\n    {% endcall %}\n    {% call statement('rename_upsert_relation') %}\n      rename table {{ upsert }} to {{ target }};\n    {% endcall %}\n  {% endif %}\n\n  {% do return ('select 1') %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.exchange_tables_atomic"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.202817, "supported_languages": null}, "macro.dbt_clickhouse.materialization_table_clickhouse": {"name": "materialization_table_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.materialization_table_clickhouse", "macro_sql": "{% materialization table, adapter='clickhouse' %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set backup_relation = none -%}\n  {%- set preexisting_backup_relation = none -%}\n  {%- set preexisting_intermediate_relation = none -%}\n\n  {% if existing_relation is not none %}\n    {%- set backup_relation_type = existing_relation.type -%}\n    {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n    {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n    {% if not existing_relation.can_exchange %}\n      {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n      {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n    {% endif %}\n  {% endif %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if backup_relation is none %}\n    {{ log('Creating new relation ' + target_relation.name )}}\n    -- There is not existing relation, so we can just create\n    {% call statement('main') -%}\n      {{ get_create_table_as_sql(False, target_relation, sql) }}\n    {%- endcall %}\n  {% elif existing_relation.can_exchange %}\n    -- We can do an atomic exchange, so no need for an intermediate\n    {% call statement('main') -%}\n      {{ get_create_table_as_sql(False, backup_relation, sql) }}\n    {%- endcall %}\n    {% do exchange_tables_atomic(backup_relation, existing_relation) %}\n  {% else %}\n    -- We have to use an intermediate and rename accordingly\n    {% call statement('main') -%}\n      {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n    {%- endcall %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n  {% endif %}\n\n  -- cleanup\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_backup_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.2170453, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.engine_clause": {"name": "engine_clause", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.engine_clause", "macro_sql": "{% macro engine_clause() %}\n  engine = {{ config.get('engine', default='MergeTree()') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.21743, "supported_languages": null}, "macro.dbt_clickhouse.partition_cols": {"name": "partition_cols", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.partition_cols", "macro_sql": "{% macro partition_cols(label) %}\n  {%- set cols = config.get('partition_by', validator=validation.any[list, basestring]) -%}\n  {%- if cols is not none %}\n    {%- if cols is string -%}\n      {%- set cols = [cols] -%}\n    {%- endif -%}\n    {{ label }} (\n    {%- for item in cols -%}\n      {{ item }}\n      {%- if not loop.last -%},{%- endif -%}\n    {%- endfor -%}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.2185419, "supported_languages": null}, "macro.dbt_clickhouse.primary_key_clause": {"name": "primary_key_clause", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.primary_key_clause", "macro_sql": "{% macro primary_key_clause(label) %}\n  {%- set primary_key = config.get('primary_key', validator=validation.any[basestring]) -%}\n\n  {%- if primary_key is not none %}\n    {{ label }} {{ primary_key }}\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.219205, "supported_languages": null}, "macro.dbt_clickhouse.order_cols": {"name": "order_cols", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.order_cols", "macro_sql": "{% macro order_cols(label) %}\n  {%- set cols = config.get('order_by', validator=validation.any[list, basestring]) -%}\n  {%- set engine = config.get('engine', default='MergeTree()') -%}\n  {%- set supported = [\n    'HDFS',\n    'MaterializedPostgreSQL',\n    'S3',\n    'EmbeddedRocksDB',\n    'Hive'\n  ] -%}\n\n  {%- if 'MergeTree' in engine or engine in supported %}\n    {%- if cols is not none %}\n      {%- if cols is string -%}\n        {%- set cols = [cols] -%}\n      {%- endif -%}\n      {{ label }} (\n      {%- for item in cols -%}\n        {{ item }}\n        {%- if not loop.last -%},{%- endif -%}\n      {%- endfor -%}\n      )\n    {%- else %}\n      {{ label }} (tuple())\n    {%- endif %}\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.2209506, "supported_languages": null}, "macro.dbt_clickhouse.ttl_config": {"name": "ttl_config", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.ttl_config", "macro_sql": "{% macro ttl_config(label) %}\n  {%- if config.get(\"ttl\")%}\n    {{ label }} {{ config.get(\"ttl\") }}\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.221429, "supported_languages": null}, "macro.dbt_clickhouse.on_cluster_clause": {"name": "on_cluster_clause", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.on_cluster_clause", "macro_sql": "{% macro on_cluster_clause(relation, force_sync) %}\n  {% set active_cluster = adapter.get_clickhouse_cluster_name() %}\n  {%- if active_cluster is not none and relation.should_on_cluster %}\n    {# Add trailing whitespace to avoid problems when this clause is not last #}\n    ON CLUSTER {{ active_cluster + ' ' }}\n    {%- if force_sync %}\n    SYNC\n    {%- endif %}\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.222129, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__create_table_as": {"name": "clickhouse__create_table_as", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__create_table_as", "macro_sql": "{% macro clickhouse__create_table_as(temporary, relation, sql) -%}\n    {% set has_contract = config.get('contract').enforced %}\n    {% set create_table = create_table_or_empty(temporary, relation, sql, has_contract) %}\n    {% if adapter.is_before_version('22.7.1.2484') -%}\n        {{ create_table }}\n    {%- else %}\n        {% call statement('create_table_empty') %}\n            {{ create_table }}\n        {% endcall %}\n        {{ clickhouse__insert_into(relation, sql, has_contract) }}\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.create_table_or_empty", "macro.dbt.statement", "macro.dbt_clickhouse.clickhouse__insert_into"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.223328, "supported_languages": null}, "macro.dbt_clickhouse.create_table_or_empty": {"name": "create_table_or_empty", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.create_table_or_empty", "macro_sql": "{% macro create_table_or_empty(temporary, relation, sql, has_contract) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    {% if temporary -%}\n        create temporary table {{ relation }}\n        engine Memory\n        {{ order_cols(label=\"order by\") }}\n        {{ partition_cols(label=\"partition by\") }}\n        {{ adapter.get_model_settings(model) }}\n        as (\n          {{ sql }}\n        )\n    {%- else %}\n        create table {{ relation }}\n        {{ on_cluster_clause(relation)}}\n        {%- if has_contract%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n        {%- endif %}\n        {{ engine_clause() }}\n        {{ order_cols(label=\"order by\") }}\n        {{ primary_key_clause(label=\"primary key\") }}\n        {{ partition_cols(label=\"partition by\") }}\n        {{ ttl_config(label=\"ttl\")}}\n        {{ adapter.get_model_settings(model) }}\n\n        {%- if not has_contract %}\n          {%- if not adapter.is_before_version('22.7.1.2484') %}\n            empty\n          {%- endif %}\n          as (\n            {{ sql }}\n          )\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.order_cols", "macro.dbt_clickhouse.partition_cols", "macro.dbt_clickhouse.on_cluster_clause", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_clickhouse.engine_clause", "macro.dbt_clickhouse.primary_key_clause", "macro.dbt_clickhouse.ttl_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.2257214, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__insert_into": {"name": "clickhouse__insert_into", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__insert_into", "macro_sql": "{% macro clickhouse__insert_into(target_relation, sql, has_contract) %}\n  {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n  insert into {{ target_relation }}\n        ({{ dest_cols_csv }})\n  {%- if has_contract -%}\n    -- Use a subquery to get columns in the right order\n          SELECT {{ dest_cols_csv }} FROM ( {{ sql }} )\n  {%- else -%}\n      {{ sql }}\n  {{ adapter.get_model_query_settings(model) }}\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.2268312, "supported_languages": null}, "macro.dbt_clickhouse.materialization_dictionary_clickhouse": {"name": "materialization_dictionary_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/dictionary.sql", "original_file_path": "macros/materializations/dictionary.sql", "unique_id": "macro.dbt_clickhouse.materialization_dictionary_clickhouse", "macro_sql": "{%- materialization dictionary, adapter='clickhouse' -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='dictionary') -%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation) -%}\n  {%- set existing_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  {%- set backup_relation_type = 'dictionary' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  {%- set existing_backup_relation = load_cached_relation(backup_relation) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ drop_dictionary_if_exists(existing_backup_relation) }}\n  {{ drop_dictionary_if_exists(existing_intermediate_relation) }}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {# create our new dictionary #}\n  {% call statement('main') -%}\n    {{ clickhouse__get_create_dictionary_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {# cleanup #}\n  {% if existing_relation is not none %}\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_dictionary_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt_clickhouse.drop_dictionary_if_exists", "macro.dbt.statement", "macro.dbt_clickhouse.clickhouse__get_create_dictionary_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.2346723, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.clickhouse__get_create_dictionary_as_sql": {"name": "clickhouse__get_create_dictionary_as_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/dictionary.sql", "original_file_path": "macros/materializations/dictionary.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_create_dictionary_as_sql", "macro_sql": "{% macro clickhouse__get_create_dictionary_as_sql(relation, sql) %}\n  {%- set fields = config.get('fields') -%}\n  {%- set source_type = config.get('source_type') -%}\n\n  CREATE DICTIONARY {{ relation }} {{ on_cluster_clause(relation) }}\n  (\n  {%- for (name, data_type) in fields -%}\n    {{ name }} {{ data_type }}{%- if not loop.last -%},{%- endif -%}\n  {%- endfor -%}\n  )\n  {{ primary_key_clause(label=\"primary key\") }}\n  SOURCE(\n    {%- if source_type == 'http' %}\n      {{ http_source() }}\n    {% else %}\n      {{ clickhouse_source(sql) }}\n    {% endif -%}\n  )\n  LAYOUT({{ config.get('layout') }})\n  LIFETIME({{ config.get('lifetime') }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause", "macro.dbt_clickhouse.primary_key_clause", "macro.dbt_clickhouse.http_source", "macro.dbt_clickhouse.clickhouse_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.2363768, "supported_languages": null}, "macro.dbt_clickhouse.http_source": {"name": "http_source", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/dictionary.sql", "original_file_path": "macros/materializations/dictionary.sql", "unique_id": "macro.dbt_clickhouse.http_source", "macro_sql": "{% macro http_source() %}\n  HTTP(URL '{{ config.get(\"url\") }}' FORMAT '{{ config.get(\"format\") }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.236766, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse_source": {"name": "clickhouse_source", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/dictionary.sql", "original_file_path": "macros/materializations/dictionary.sql", "unique_id": "macro.dbt_clickhouse.clickhouse_source", "macro_sql": "{% macro clickhouse_source(sql) %}\n  {%- set credentials = adapter.get_credentials(config.get(\"connection_overrides\", {})) -%}\n  {%- set table = config.get('table') -%}\n  CLICKHOUSE(\n      user '{{ credentials.get(\"user\") }}'\n      {% if credentials.get(\"password\") != '' -%}\n      password '{{ credentials.get(\"password\") }}'\n      {%- endif %}\n      {% if credentials.get(\"database\") != '' -%}\n      db '{{ credentials.get(\"database\") }}'\n      {%- endif %}\n      {% if credentials.get(\"host\") != '' and credentials.get(\"host\") != 'localhost' -%}\n      host '{{ credentials.get(\"host\") }}'\n      {% if credentials.get(\"port\") != '' -%}\n      port '{{ credentials.get(\"port\") }}'\n      {%- endif %}\n      {%- endif %}\n      {%- if table is not none %}\n        table '{{ table }}'\n      {% else %}\n        query \"{{ sql }}\"\n      {% endif -%}\n  )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.2389836, "supported_languages": null}, "macro.dbt_clickhouse.drop_dictionary_if_exists": {"name": "drop_dictionary_if_exists", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/dictionary.sql", "original_file_path": "macros/materializations/dictionary.sql", "unique_id": "macro.dbt_clickhouse.drop_dictionary_if_exists", "macro_sql": "{% macro drop_dictionary_if_exists(relation) %}\n  {% if relation.type != 'dictionary' %}\n    {{ log(relation ~ ' is not a dictionary; defaulting to drop_relation_if_exists') }}\n    {{ drop_relation_if_exists(relation) }}\n  {% else %}\n    {% call statement('drop_dictionary_if_exists') %}\n      drop dictionary if exists {{ relation }}\n    {% endcall %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.2397764, "supported_languages": null}, "macro.dbt_clickhouse.materialization_distributed_table_clickhouse": {"name": "materialization_distributed_table_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/distributed_table.sql", "original_file_path": "macros/materializations/distributed_table.sql", "unique_id": "macro.dbt_clickhouse.materialization_distributed_table_clickhouse", "macro_sql": "{% materialization distributed_table, adapter='clickhouse' %}\n  {% set insert_distributed_sync = run_query(\"SELECT value FROM system.settings WHERE name = 'insert_distributed_sync'\")[0][0] %}\n  {% if insert_distributed_sync != '1' %}\n     {% do exceptions.raise_compiler_error('To use distributed materialization setting insert_distributed_sync should be set to 1') %}\n  {% endif %}\n\n  {%- set local_suffix = adapter.get_clickhouse_local_suffix() -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n\n  {% set on_cluster = on_cluster_clause(target_relation) %}\n  {% if on_cluster.strip() == '' %}\n     {% do exceptions.raise_compiler_error('To use distributed materialization cluster setting in dbt profile must be set') %}\n  {% endif %}\n\n  {% set existing_relation_local = existing_relation.incorporate(path={\"identifier\": this.identifier + local_suffix}) if existing_relation is not none else none %}\n  {% set target_relation_local = target_relation.incorporate(path={\"identifier\": this.identifier + local_suffix}) if target_relation is not none else none %}\n\n  {%- set backup_relation = none -%}\n  {%- set preexisting_backup_relation = none -%}\n  {%- set preexisting_intermediate_relation = none -%}\n\n  {% if existing_relation_local is not none %}\n    {%- set backup_relation_type = existing_relation_local.type -%}\n    {%- set backup_relation = make_backup_relation(target_relation_local, backup_relation_type) -%}\n    {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n    {% if not existing_relation.can_exchange %}\n      {%- set intermediate_relation =  make_intermediate_relation(target_relation_local) -%}\n      {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n    {% endif %}\n  {% endif %}\n  {% set view_relation = default__make_temp_relation(target_relation, '__dbt_tmp') %}\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n  {{ drop_relation_if_exists(view_relation) }}\n\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {% call statement('main') %}\n    {{ create_view_as(view_relation, sql) }}\n  {% endcall %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if backup_relation is none %}\n    {{ create_distributed_local_table(target_relation, target_relation_local, view_relation) }}\n  {% elif existing_relation.can_exchange %}\n    -- We can do an atomic exchange, so no need for an intermediate\n    {% call statement('main') -%}\n      {{ create_empty_table_from_relation(backup_relation, view_relation) }}\n    {%- endcall %}\n    {% do exchange_tables_atomic(backup_relation, existing_relation_local) %}\n  {% else %}\n    {% do run_query(create_empty_table_from_relation(intermediate_relation, view_relation)) or '' %}\n    {{ adapter.rename_relation(existing_relation_local, backup_relation) }}\n    {{ adapter.rename_relation(intermediate_relation, target_relation_local) }}\n  {% endif %}  \n    {% do run_query(create_distributed_table(target_relation, target_relation_local)) or '' %}\n  {% do run_query(clickhouse__insert_into(target_relation, sql)) or '' %}\n  {{ drop_relation_if_exists(view_relation) }}\n  -- cleanup\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation_local, grant_config, should_revoke=should_revoke) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n  {{ adapter.commit() }}\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.load_cached_relation", "macro.dbt_clickhouse.on_cluster_clause", "macro.dbt.make_backup_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.default__make_temp_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt_clickhouse.create_distributed_local_table", "macro.dbt_clickhouse.create_empty_table_from_relation", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt_clickhouse.create_distributed_table", "macro.dbt_clickhouse.clickhouse__insert_into", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.256448, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.create_distributed_table": {"name": "create_distributed_table", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/distributed_table.sql", "original_file_path": "macros/materializations/distributed_table.sql", "unique_id": "macro.dbt_clickhouse.create_distributed_table", "macro_sql": "{% macro create_distributed_table(relation, local_relation) %}\n    {%- set cluster = adapter.get_clickhouse_cluster_name() -%}\n   {% if cluster is none %}\n        {% do exceptions.raise_compiler_error('Cluster name should be defined for using distributed materializations, current is None') %}\n    {% endif %}\n\n   {%- set cluster = cluster[1:-1] -%}\n   {%- set sharding = config.get('sharding_key') -%}\n\n    create or replace table {{ relation }} {{ on_cluster_clause(relation) }} as {{ local_relation }}\n    ENGINE = Distributed('{{ cluster}}', '{{ relation.schema }}', '{{ local_relation.name }}'\n    {%- if sharding is not none and sharding.strip() != '' -%}\n        , {{ sharding }}\n    {%- else %}\n        , rand()\n    {% endif -%}\n    )\n {% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.258104, "supported_languages": null}, "macro.dbt_clickhouse.create_empty_table_from_relation": {"name": "create_empty_table_from_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/distributed_table.sql", "original_file_path": "macros/materializations/distributed_table.sql", "unique_id": "macro.dbt_clickhouse.create_empty_table_from_relation", "macro_sql": "{% macro create_empty_table_from_relation(relation, source_relation) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {%- set columns = adapter.get_columns_in_relation(source_relation) | list -%}\n   \n\n  {%- set col_list = [] -%}\n  {% for col in columns %}\n    {{col_list.append(col.name + ' ' + col.data_type) or '' }}\n  {% endfor %}\n  {{ sql_header if sql_header is not none }}\n\n  create table {{ relation.include(database=False) }}\n  {{ on_cluster_clause(relation) }} (\n      {{col_list | join(', ')}}\n  )\n  \n  {{ engine_clause() }}\n  {{ order_cols(label=\"order by\") }}\n  {{ primary_key_clause(label=\"primary key\") }}\n  {{ partition_cols(label=\"partition by\") }}\n  {{ adapter.get_model_settings(model) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause", "macro.dbt_clickhouse.engine_clause", "macro.dbt_clickhouse.order_cols", "macro.dbt_clickhouse.primary_key_clause", "macro.dbt_clickhouse.partition_cols"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.2599263, "supported_languages": null}, "macro.dbt_clickhouse.create_distributed_local_table": {"name": "create_distributed_local_table", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/distributed_table.sql", "original_file_path": "macros/materializations/distributed_table.sql", "unique_id": "macro.dbt_clickhouse.create_distributed_local_table", "macro_sql": "{% macro create_distributed_local_table(distributed_relation, shard_relation, structure_relation, sql_query=none) -%}\n  {{ drop_relation_if_exists(shard_relation) }}\n  {{ drop_relation_if_exists(distributed_relation) }}\n  {% do run_query(create_empty_table_from_relation(shard_relation, structure_relation)) or '' %}\n  {% do run_query(create_distributed_table(distributed_relation, shard_relation)) or '' %}\n  {% if sql_query is not none %}\n    {% do run_query(clickhouse__insert_into(distributed_relation, sql_query)) or '' %}\n  {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_query", "macro.dbt_clickhouse.create_empty_table_from_relation", "macro.dbt_clickhouse.create_distributed_table", "macro.dbt_clickhouse.clickhouse__insert_into"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.2610824, "supported_languages": null}, "macro.dbt_clickhouse.materialization_materialized_view_clickhouse": {"name": "materialization_materialized_view_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_clickhouse.materialization_materialized_view_clickhouse", "macro_sql": "\n{%- materialization materialized_view, adapter='clickhouse' -%}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set mv_relation = target_relation.derivative('_mv', 'materialized_view') -%}\n  {%- set cluster_clause = on_cluster_clause(target_relation) -%}\n\n  {# look for an existing relation for the target table and create backup relations if necessary #}\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set backup_relation = none -%}\n  {%- set preexisting_backup_relation = none -%}\n  {%- set preexisting_intermediate_relation = none -%}\n  {% if existing_relation is not none %}\n    {%- set backup_relation_type = existing_relation.type -%}\n    {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n    {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n    {% if not existing_relation.can_exchange %}\n      {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n      {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n    {% endif %}\n  {% endif %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if backup_relation is none %}\n    {{ log('Creating new materialized view ' + target_relation.name )}}\n    {% call statement('main') -%}\n      {{ clickhouse__get_create_materialized_view_as_sql(target_relation, sql) }}\n    {%- endcall %}\n  {% elif existing_relation.can_exchange %}\n    {{ log('Replacing existing materialized view ' + target_relation.name) }}\n    {% call statement('drop existing materialized view') %}\n      drop view if exists {{ mv_relation }} {{ cluster_clause }}\n    {% endcall %}\n    {% call statement('main') -%}\n      {{ get_create_table_as_sql(False, backup_relation, sql) }}\n    {%- endcall %}\n    {% do exchange_tables_atomic(backup_relation, existing_relation) %}\n    {% call statement('create new materialized view') %}\n      {{ clickhouse__create_mv_sql(mv_relation, existing_relation, cluster_clause, sql) }}\n    {% endcall %}\n  {% else %}\n    {{ log('Replacing existing materialized view ' + target_relation.name) }}\n    {{ clickhouse__replace_mv(target_relation, existing_relation, intermediate_relation, backup_relation, sql) }}\n  {% endif %}\n\n  -- cleanup\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation, mv_relation]}) }}\n\n{%- endmaterialization -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause", "macro.dbt.load_cached_relation", "macro.dbt.make_backup_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt_clickhouse.clickhouse__get_create_materialized_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt_clickhouse.clickhouse__create_mv_sql", "macro.dbt_clickhouse.clickhouse__replace_mv", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.2697666, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.clickhouse__get_create_materialized_view_as_sql": {"name": "clickhouse__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_create_materialized_view_as_sql", "macro_sql": "{% macro clickhouse__get_create_materialized_view_as_sql(relation, sql) -%}\n  {% call statement('create_target_table') %}\n    {{ get_create_table_as_sql(False, relation, sql) }}\n  {% endcall %}\n  {%- set cluster_clause = on_cluster_clause(relation) -%}\n  {%- set mv_relation = relation.derivative('_mv', 'materialized_view') -%}\n  {{ clickhouse__create_mv_sql(mv_relation, relation, cluster_clause, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt_clickhouse.on_cluster_clause", "macro.dbt_clickhouse.clickhouse__create_mv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.2710288, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__create_mv_sql": {"name": "clickhouse__create_mv_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__create_mv_sql", "macro_sql": "{% macro clickhouse__create_mv_sql(mv_relation, target_table, cluster_clause, sql)  -%}\n  create materialized view if not exists {{ mv_relation }} {{ cluster_clause }}\n  to {{ target_table }}\n  as {{ sql }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.2715387, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__replace_mv": {"name": "clickhouse__replace_mv", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/materialized_view.sql", "original_file_path": "macros/materializations/materialized_view.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__replace_mv", "macro_sql": "{% macro clickhouse__replace_mv(target_relation, existing_relation, intermediate_relation, backup_relation, sql) %}\n  {# drop existing materialized view while we recreate the target table #}\n  {%- set cluster_clause = on_cluster_clause(target_relation) -%}\n  {%- set mv_relation = target_relation.derivative('_mv', 'materialized_view') -%}\n  {% call statement('drop existing mv') -%}\n    drop view if exists {{ mv_relation }} {{ cluster_clause }}\n  {%- endcall %}\n\n  {# recreate the target table #}\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n  {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {# now that the target table is recreated, we can finally create our new view #}\n  {{ clickhouse__create_mv_sql(mv_relation, target_relation, cluster_clause, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt_clickhouse.clickhouse__create_mv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.2734811, "supported_languages": null}, "macro.dbt_clickhouse.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental/is_incremental.sql", "original_file_path": "macros/materializations/incremental/is_incremental.sql", "unique_id": "macro.dbt_clickhouse.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and (model.config.materialized == 'incremental' or model.config.materialized == 'distributed_incremental' )\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.27529, "supported_languages": null}, "macro.dbt_clickhouse.materialization_distributed_incremental_clickhouse": {"name": "materialization_distributed_incremental_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental/distributed_incremental.sql", "original_file_path": "macros/materializations/incremental/distributed_incremental.sql", "unique_id": "macro.dbt_clickhouse.materialization_distributed_incremental_clickhouse", "macro_sql": "{% materialization distributed_incremental, adapter='clickhouse' %}\n  {% set insert_distributed_sync = run_query(\"SELECT value FROM system.settings WHERE name = 'insert_distributed_sync'\")[0][0] %}\n  {% if insert_distributed_sync != '1' %}\n     {% do exceptions.raise_compiler_error('To use distributed materialization setting insert_distributed_sync should be set to 1') %}\n  {% endif %}\n\n  {%- set local_suffix = adapter.get_clickhouse_local_suffix() -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n\n  {% set on_cluster = on_cluster_clause(target_relation) %}\n  {% if on_cluster.strip() == '' %}\n     {% do exceptions.raise_compiler_error('To use distributed materializations cluster setting in dbt profile must be set') %}\n  {% endif %}\n\n  {% set existing_relation_local = existing_relation.incorporate(path={\"identifier\": this.identifier + local_suffix}) if existing_relation is not none else none %}\n  {% set target_relation_local = target_relation.incorporate(path={\"identifier\": this.identifier + local_suffix}) if target_relation is not none else none %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {% if unique_key is not none and unique_key|length == 0 %}\n    {% set unique_key = none %}\n  {% endif %}\n  {% if unique_key is iterable and (unique_key is not string and unique_key is not mapping) %}\n     {% set unique_key = unique_key|join(', ') %}\n  {% endif %}\n  {%- set inserts_only = config.get('inserts_only') -%}\n  {%- set grant_config = config.get('grants') -%}\n  {%- set full_refresh_mode = (should_full_refresh() or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  {%- set intermediate_relation = make_intermediate_relation(target_relation_local)-%}\n  {%- set distributed_intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation_local, backup_relation_type) -%}\n  {%- set distributed_backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  {%- set view_relation = default__make_temp_relation(target_relation, '__dbt_view_tmp') -%}\n\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n  {{ drop_relation_if_exists(view_relation) }}\n  {{ drop_relation_if_exists(distributed_intermediate_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n  {% set to_drop = [] %}\n  {% set schema_changes = none %}\n\n  {% call statement('main') %}\n    {{ create_view_as(view_relation, sql) }}\n  {% endcall %}\n\n  {% if existing_relation is none %}\n    -- No existing table, simply create a new one\n    {{ create_distributed_local_table(target_relation, target_relation_local, view_relation, sql) }}\n\n  {% elif full_refresh_mode %}\n    -- Completely replacing the old table, so create a temporary table and then swap it\n    {{ create_distributed_local_table(distributed_intermediate_relation, intermediate_relation, view_relation, sql) }}\n    {% do adapter.drop_relation(distributed_intermediate_relation) or '' %}\n    {% set need_swap = true %}\n\n  {% elif inserts_only or unique_key is none -%}\n    -- There are no updates/deletes or duplicate keys are allowed.  Simply add all of the new rows to the existing\n    -- table. It is the user's responsibility to avoid duplicates.  Note that \"inserts_only\" is a ClickHouse adapter\n    -- specific configurable that is used to avoid creating an expensive intermediate table.\n    {% call statement('main') %}\n        {{ clickhouse__insert_into(target_relation, sql) }}\n    {% endcall %}\n\n  {% else %}\n    {% set incremental_strategy = adapter.calculate_incremental_strategy(config.get('incremental_strategy'))  %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% if on_schema_change != 'ignore' %}\n      {%- set schema_changes = check_for_schema_changes(existing_relation, target_relation) -%}\n      {% if schema_changes['schema_changed'] and incremental_strategy in ('append', 'delete_insert') %}\n        {% set incremental_strategy = 'legacy' %}\n        {% do log('Schema changes detected, switching to legacy incremental strategy') %}\n      {% endif %}\n    {% endif %}\n    {% if incremental_strategy != 'delete_insert' and incremental_predicates %}\n      {% do exceptions.raise_compiler_error('Cannot apply incremental predicates with ' + incremental_strategy + ' strategy.') %}\n    {% endif %}\n    {% if incremental_strategy == 'legacy' %}\n      {% do clickhouse__incremental_legacy(existing_relation, intermediate_relation, schema_changes, unique_key, True) %}\n      {% set need_swap = true %}\n    {% elif incremental_strategy == 'delete_insert' %}\n      {% do clickhouse__incremental_delete_insert(existing_relation, unique_key, incremental_predicates, True) %}\n    {% elif incremental_strategy == 'append' %}\n      {% call statement('main') %}\n        {{ clickhouse__insert_into(target_relation, sql) }}\n      {% endcall %}\n    {% endif %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% if False %}\n        {% do adapter.rename_relation(intermediate_relation, backup_relation) %}\n        {% do exchange_tables_atomic(backup_relation, target_relation_local) %}\n      {% else %}\n        {% do adapter.rename_relation(target_relation_local, backup_relation) %}\n        {% do adapter.rename_relation(intermediate_relation, target_relation_local) %}\n      {% endif %}\n\n      -- Structure could have changed, need to update distributed table from replaced local table\n      {% set target_relation_new = target_relation.incorporate(path={\"identifier\": target_relation.identifier + '_temp'}) %}\n      {{ drop_relation_if_exists(target_relation_new) }}\n      {% do run_query(create_distributed_table(target_relation_new, target_relation_local)) %}\n\n      {% if False %}\n        {% do adapter.rename_relation(target_relation_new, distributed_backup_relation) %}\n        {% do exchange_tables_atomic(distributed_backup_relation, target_relation) %}\n      {% else %}\n        {% do adapter.rename_relation(target_relation, distributed_backup_relation) %}\n        {% do adapter.rename_relation(target_relation_new, target_relation) %}\n      {% endif %}\n\n      {% do to_drop.append(backup_relation) %}\n      {% do to_drop.append(distributed_backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n  {% do apply_grants(target_relation_local, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.load_cached_relation", "macro.dbt_clickhouse.on_cluster_clause", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.default__make_temp_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt_clickhouse.create_distributed_local_table", "macro.dbt_clickhouse.clickhouse__insert_into", "macro.dbt.check_for_schema_changes", "macro.dbt_clickhouse.clickhouse__incremental_legacy", "macro.dbt_clickhouse.clickhouse__incremental_delete_insert", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt_clickhouse.create_distributed_table", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3089547, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.materialization_incremental_clickhouse": {"name": "materialization_incremental_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "unique_id": "macro.dbt_clickhouse.materialization_incremental_clickhouse", "macro_sql": "{% materialization incremental, adapter='clickhouse' %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {% if unique_key is not none and unique_key|length == 0 %}\n    {% set unique_key = none %}\n  {% endif %}\n  {% if unique_key is iterable and (unique_key is not string and unique_key is not mapping) %}\n     {% set unique_key = unique_key|join(', ') %}\n  {% endif %}\n  {%- set inserts_only = config.get('inserts_only') -%}\n  {%- set grant_config = config.get('grants') -%}\n  {%- set full_refresh_mode = (should_full_refresh() or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    -- No existing table, simply create a new one\n    {% call statement('main') %}\n        {{ get_create_table_as_sql(False, target_relation, sql) }}\n    {% endcall %}\n\n  {% elif full_refresh_mode %}\n    -- Completely replacing the old table, so create a temporary table and then swap it\n    {% call statement('main') %}\n        {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n    {% endcall %}\n    {% set need_swap = true %}\n\n  {% elif inserts_only or unique_key is none -%}\n    -- There are no updates/deletes or duplicate keys are allowed.  Simply add all of the new rows to the existing\n    -- table. It is the user's responsibility to avoid duplicates.  Note that \"inserts_only\" is a ClickHouse adapter\n    -- specific configurable that is used to avoid creating an expensive intermediate table.\n    {% call statement('main') %}\n        {{ clickhouse__insert_into(target_relation, sql) }}\n    {% endcall %}\n\n  {% else %}\n    {% set column_changes = none %}\n    {% set incremental_strategy = adapter.calculate_incremental_strategy(config.get('incremental_strategy'))  %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {%- if on_schema_change != 'ignore' %}\n      {%- set column_changes = adapter.check_incremental_schema_changes(on_schema_change, existing_relation, sql) -%}\n      {%- if column_changes %}\n        {%- if incremental_strategy in ('append', 'delete_insert') %}\n          {% set incremental_strategy = 'legacy' %}\n          {{ log('Schema changes detected, switching to legacy incremental strategy') }}\n        {%- endif %}\n      {% endif %}\n    {% endif %}\n    {% if incremental_strategy != 'delete_insert' and incremental_predicates %}\n      {% do exceptions.raise_compiler_error('Cannot apply incremental predicates with ' + incremental_strategy + ' strategy.') %}\n    {% endif %}\n    {% if incremental_strategy == 'legacy' %}\n      {% do clickhouse__incremental_legacy(existing_relation, intermediate_relation, column_changes, unique_key) %}\n      {% set need_swap = true %}\n    {% elif incremental_strategy == 'delete_insert' %}\n      {% do clickhouse__incremental_delete_insert(existing_relation, unique_key, incremental_predicates) %}\n    {% elif incremental_strategy == 'append' %}\n      {% call statement('main') %}\n        {{ clickhouse__insert_into(target_relation, sql) }}\n      {% endcall %}\n    {% endif %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% if existing_relation.can_exchange %}\n        {% do adapter.rename_relation(intermediate_relation, backup_relation) %}\n        {% do exchange_tables_atomic(backup_relation, target_relation) %}\n      {% else %}\n        {% do adapter.rename_relation(target_relation, backup_relation) %}\n        {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% endif %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt_clickhouse.clickhouse__insert_into", "macro.dbt_clickhouse.clickhouse__incremental_legacy", "macro.dbt_clickhouse.clickhouse__incremental_delete_insert", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3503642, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.clickhouse__incremental_legacy": {"name": "clickhouse__incremental_legacy", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__incremental_legacy", "macro_sql": "{% macro clickhouse__incremental_legacy(existing_relation, intermediate_relation, column_changes, unique_key, is_distributed=False) %}\n    {% set new_data_relation = existing_relation.incorporate(path={\"identifier\": existing_relation.identifier + '__dbt_new_data'}) %}\n    {{ drop_relation_if_exists(new_data_relation) }}\n\n    {%- set inserted_relation = intermediate_relation -%}\n    {%- set inserting_relation = new_data_relation -%}\n\n    -- First create a temporary table for all of the new data\n    {% if is_distributed %}\n      {% if column_changes %}\n        {% do exceptions.raise_compiler_error('Schema changes not supported with Distributed tables ') %}\n      {% endif %}\n      -- Need to use distributed table to have data on all shards\n      {%- set distributed_new_data_relation = existing_relation.incorporate(path={\"identifier\": existing_relation.identifier + '__dbt_distributed_new_data'}) -%}\n      {%- set inserting_relation = distributed_new_data_relation -%}\n      {{ create_distributed_local_table(distributed_new_data_relation, new_data_relation, existing_relation, sql) }}\n    {% elif column_changes %}\n      {% call statement('create_new_data_temp') %}\n        {{ get_create_table_as_sql(False, new_data_relation, sql) }}\n      {% endcall %}\n    {% else %}\n      {% call statement('create_new_data_temp') %}\n        {{ get_create_table_as_sql(False, new_data_relation, sql) }}\n      {% endcall %}\n    {% endif %}\n\n    -- Next create another temporary table that will eventually be used to replace the existing table.  We can't\n    -- use the table just created in the previous step because we don't want to override any updated rows with\n    -- old rows when we insert the old data\n    {% if is_distributed %}\n      {%- set distributed_intermediate_relation = make_intermediate_relation(existing_relation) -%}\n      {%- set inserted_relation = distributed_intermediate_relation -%}\n      {{ create_distributed_local_table(distributed_intermediate_relation, intermediate_relation, existing_relation) }}\n    {% else %}\n      {% call statement('main') %}\n          create table {{ intermediate_relation }} {{ on_cluster_clause(existing_relation) }} as {{ new_data_relation }}\n      {% endcall %}\n    {% endif %}\n\n    -- Insert all the existing rows into the new temporary table, ignoring any rows that have keys in the \"new data\"\n    -- table.\n    {%- set source_columns = adapter.get_columns_in_relation(existing_relation) -%}\n    {%- set source_columns_csv = source_columns | map(attribute='quoted') | join(', ') -%}\n    {% call statement('insert_existing_data') %}\n        insert into {{ inserted_relation }} ({{ source_columns_csv }})\n        select {{ source_columns_csv }}\n        from {{ existing_relation }}\n          where ({{ unique_key }}) not in (\n            select {{ unique_key }}\n            from {{ inserting_relation }}\n          )\n       {{ adapter.get_model_query_settings(model) }}\n    {% endcall %}\n\n    -- Insert all of the new data into the temporary table\n    {% if column_changes %}\n        {%- set dest_columns = adapter.get_columns_in_relation(new_data_relation) -%}\n        {%- set dest_columns_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    {% else %}\n        {%- set dest_columns_csv = source_columns_csv %}\n    {% endif %}\n    {% call statement('insert_new_data') %}\n     insert into {{ inserted_relation }} ({{ dest_columns_csv }})\n        select {{ dest_columns_csv }}\n        from {{ inserting_relation }}\n      {{ adapter.get_model_query_settings(model) }}\n    {% endcall %}\n\n    {% do adapter.drop_relation(new_data_relation) %}\n    {% if is_distributed %}\n      {{ drop_relation_if_exists(distributed_new_data_relation) }}\n      {{ drop_relation_if_exists(distributed_intermediate_relation) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt_clickhouse.create_distributed_local_table", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.make_intermediate_relation", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.355957, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__incremental_delete_insert": {"name": "clickhouse__incremental_delete_insert", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__incremental_delete_insert", "macro_sql": "{% macro clickhouse__incremental_delete_insert(existing_relation, unique_key, incremental_predicates, is_distributed=False) %}\n    {% set new_data_relation = existing_relation.incorporate(path={\"identifier\": existing_relation.identifier\n       + '__dbt_new_data_' + invocation_id.replace('-', '_')}) %}\n    {{ drop_relation_if_exists(new_data_relation) }}\n    {%- set distributed_new_data_relation = existing_relation.incorporate(path={\"identifier\": existing_relation.identifier + '__dbt_distributed_new_data'}) -%}\n\n    {%- set inserting_relation = new_data_relation -%}\n\n    {% if is_distributed %}\n      -- Need to use distributed table to have data on all shards\n      {%- set inserting_relation = distributed_new_data_relation -%}\n      {{ create_distributed_local_table(distributed_new_data_relation, new_data_relation, existing_relation, sql) }}\n    {% else %}\n      {% call statement('main') %}\n        {{ get_create_table_as_sql(False, new_data_relation, sql) }}\n      {% endcall %}\n    {% endif %}\n\n    {% call statement('delete_existing_data') %}\n      {% if is_distributed %}\n          {%- set existing_local = existing_relation.derivative(adapter.get_clickhouse_local_suffix()) %}\n            delete from {{ existing_local }} {{ on_cluster_clause(existing_relation) }} where ({{ unique_key }}) in (select {{ unique_key }}\n                                          from {{ inserting_relation }})\n      {% else %}\n            delete from {{ existing_relation }} where ({{ unique_key }}) in (select {{ unique_key }}\n                                          from {{ inserting_relation }})\n      {% endif %}\n      {%- if incremental_predicates %}\n        {% for predicate in incremental_predicates %}\n            and {{ predicate }}\n        {% endfor %}\n      {%- endif -%}\n      {{ adapter.get_model_query_settings(model) }}\n    {% endcall %}\n\n    {%- set dest_columns = adapter.get_columns_in_relation(existing_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    {% call statement('insert_new_data') %}\n        insert into {{ existing_relation }} {{ adapter.get_model_query_settings(model) }} select {{ dest_cols_csv }} from {{ inserting_relation }}\n    {% endcall %}\n    {% do adapter.drop_relation(new_data_relation) %}\n    {{ drop_relation_if_exists(distributed_new_data_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.drop_relation_if_exists", "macro.dbt_clickhouse.create_distributed_local_table", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3598418, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3641405, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3647172, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3651824, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3657575, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3661566, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3664985, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3668783, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3674133, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.36784, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.368469, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.368855, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3691974, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.369547, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3698707, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3703, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3706644, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3736055, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3739638, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3744264, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.37522, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.375744, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.37641, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3767943, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3771412, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3776793, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.378842, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3793495, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.379656, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.38024, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3807216, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.381579, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3818996, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3821986, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3824246, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3827753, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3829648, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3833227, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.38367, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3846524, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3850534, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3853784, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3865156, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3872201, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3876646, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3880236, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.388581, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.389588, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3930175, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3933694, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3940325, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3944898, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3949401, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.395366, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3977897, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3985102, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.398919, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.3996563, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4001288, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4013724, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4018965, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.403691, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4044204, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.404816, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4051564, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.40559, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.406451, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.407348, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4087186, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4090128, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4093509, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4101908, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4105732, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.41086, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.411214, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4114819, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4141848, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.414437, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4147863, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4150438, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4158041, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4163182, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.416544, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4170234, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4174318, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4179096, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4183102, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4187865, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4202087, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4206078, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4211335, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4216123, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4243324, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.426823, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4271793, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.428916, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.429774, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4309928, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.431983, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.432146, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4332738, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4337692, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4344308, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4350653, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4357922, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4360733, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4368198, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4371157, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4376676, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4379542, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4384456, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4387128, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4393098, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4395905, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4409394, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4418344, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4422321, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4433649, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4439557, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4442503, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.445162, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.445511, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4459975, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.446454, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.44662, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4472084, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4475148, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4486053, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4496028, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4502623, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.450613, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4511228, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.451464, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4530888, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4534242, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4537702, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4540994, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4544415, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4547632, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4551373, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4555137, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4559176, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4562483, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4565907, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4569936, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4573603, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4576719, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4581947, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.458545, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4593039, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4600015, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4603174, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4607782, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.460948, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4615996, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.461954, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4624875, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.462789, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4640598, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4653544, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.465867, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4666274, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4671693, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.467399, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4680517, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4684064, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.468906, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.46913, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4698691, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.470386, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4709575, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.471253, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4717457, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4719725, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4727645, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4734263, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.474085, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4761984, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4766328, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4769466, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.477253, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.477561, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.47833, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4789083, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4846823, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4850466, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4855292, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4870982, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4874525, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4878178, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4909115, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.4937031, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5043983, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5098283, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5104525, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.510813, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5110323, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.511351, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5116076, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.512043, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5138557, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5142505, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5147855, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5157092, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5210936, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5263638, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5334675, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.534276, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5348232, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5376222, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.538174, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.53958, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5400736, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5403285, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5409117, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5411994, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5477526, "supported_languages": ["sql"]}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5564666, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5599413, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.560501, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5626125, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5631921, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5645301, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5658002, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5753531, "supported_languages": ["sql"]}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5769024, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5774071, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5778012, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5784183, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5788102, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5794492, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5798426, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5803976, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5807881, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5811057, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.581684, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.584286, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5854676, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5868814, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5873911, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5889056, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5965805, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.5996163, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6021764, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.604005, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6047242, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6058547, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6109746, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.611812, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6124585, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6185613, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6253436, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6273105, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.627809, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6288753, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6292877, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.629581, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6298816, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6301355, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.630474, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6307225, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.631743, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.632134, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.685258, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6861696, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6867578, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6876328, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6884813, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6894526, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6900337, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6906586, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6935725, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6961763, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6979315, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.6984398, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7013204, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7025535, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7032125, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.703894, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7044613, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.705101, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7055447, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7064593, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.707468, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7081158, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7085614, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7098875, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7125819, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7133682, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7139044, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7151344, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7161176, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7165627, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7171712, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7184215, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.719264, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7196672, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7201042, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.720531, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7219975, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7223954, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7233458, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.724819, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7259634, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.726371, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7267895, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7273924, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.727715, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7282538, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7285888, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.729113, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7293427, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.730452, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7308595, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.731473, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7317863, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.732328, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7326365, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.733251, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.73356, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7341094, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7344255, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7349768, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.735308, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7358556, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7361233, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7378292, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.738224, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.739387, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.739746, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.740039, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.742717, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column", "macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7435615, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.744352, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7451434, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7454906, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7458744, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7468321, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7485359, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7488692, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7513118, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7517707, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7522547, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7528167, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.753141, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7536733, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.753901, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7548292, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7553713, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7561667, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7568176, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.75751, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.75822, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7592235, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.760638, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7613177, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7623131, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7632828, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7648911, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7663374, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7672698, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7677114, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7688282, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7697074, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7712615, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.771834, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7723782, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7735724, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7755697, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.776843, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7772992, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7777562, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7781725, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.778537, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7789567, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7796843, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7808385, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7816758, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7830722, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7838879, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7844913, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7853703, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7856681, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7859623, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.786252, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7879536, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7885606, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.789921, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7917078, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.79245, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.793606, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7954903, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7972717, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7985072, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.7997851, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8002675, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8010166, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8031085, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.806255, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.807239, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8077476, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.808529, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8097796, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8110063, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8128033, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8146834, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8180876, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8187845, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8195343, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8221009, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8228679, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8244126, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8254883, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8260624, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8263476, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8276322, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8286395, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.829049, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.83374, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.84114, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.841833, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8425639, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8447204, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8481596, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8491359, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.849853, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8511388, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8528955, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8537343, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.854704, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8558424, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8565555, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.857524, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8583665, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8631048, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8664756, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.867607, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8686397, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.870328, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8724904, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8736305, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8753095, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8760996, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8768926, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.878157, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8801227, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8815336, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8838134, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8849163, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8866122, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8881254, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.890211, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8913088, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8926613, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8935583, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8941886, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8958192, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8970852, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8976026, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8979714, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.898539, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.898929, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.8998446, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.900401, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.9008112, "supported_languages": null}, "macro.codegen.create_base_models": {"name": "create_base_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/create_base_models.sql", "original_file_path": "macros/create_base_models.sql", "unique_id": "macro.codegen.create_base_models", "macro_sql": "{% macro create_base_models(source_name, tables) %}\n    {{ return(adapter.dispatch('create_base_models', 'codegen')(source_name, tables)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__create_base_models"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.9015968, "supported_languages": null}, "macro.codegen.default__create_base_models": {"name": "default__create_base_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/create_base_models.sql", "original_file_path": "macros/create_base_models.sql", "unique_id": "macro.codegen.default__create_base_models", "macro_sql": "{% macro default__create_base_models(source_name, tables) %}\n\n{% set source_name = \"\"~ source_name ~\"\" %}\n\n{% set zsh_command_models = \"source dbt_packages/codegen/bash_scripts/base_model_creation.sh \"\"\"~ source_name ~\"\"\" \" %}\n\n{%- set models_array = [] -%}\n\n{% for t in tables %}\n    {% set help_command = zsh_command_models + t %}\n    {{ models_array.append(help_command) }}\n{% endfor %}\n\n{{ log(\"Run these commands in your shell to generate the models:\\n\" ~ models_array|join(' && \\n'), info=True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.902742, "supported_languages": null}, "macro.codegen.generate_column_yaml": {"name": "generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types, parent_column_name=\"\") %}\n  {{ return(adapter.dispatch('generate_column_yaml', 'codegen')(column, model_yaml, column_desc_dict, include_data_types, parent_column_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.9059484, "supported_languages": null}, "macro.codegen.default__generate_column_yaml": {"name": "default__generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.default__generate_column_yaml", "macro_sql": "{% macro default__generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types, parent_column_name) %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column_name  | lower ) %}\n    {% if include_data_types %}\n        {% do model_yaml.append('        data_type: ' ~ codegen.data_type_format_model(column)) %}\n    {% endif %}\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, include_data_types, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.data_type_format_model", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.9087012, "supported_languages": null}, "macro.codegen.generate_model_yaml": {"name": "generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_names=[], upstream_descriptions=False, include_data_types=True) -%}\n  {{ return(adapter.dispatch('generate_model_yaml', 'codegen')(model_names, upstream_descriptions, include_data_types)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_model_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.9092715, "supported_languages": null}, "macro.codegen.default__generate_model_yaml": {"name": "default__generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.default__generate_model_yaml", "macro_sql": "{% macro default__generate_model_yaml(model_names, upstream_descriptions, include_data_types) %}\n\n    {% set model_yaml=[] %}\n\n    {% do model_yaml.append('version: 2') %}\n    {% do model_yaml.append('') %}\n    {% do model_yaml.append('models:') %}\n\n    {% if model_names is string %}\n        {{ exceptions.raise_compiler_error(\"The `model_names` argument must always be a list, even if there is only one model.\") }}\n    {% else %}\n        {% for model in model_names %}\n            {% do model_yaml.append('  - name: ' ~ model | lower) %}\n            {% do model_yaml.append('    description: \"\"') %}\n            {% do model_yaml.append('    columns:') %}\n\n            {% set relation=ref(model) %}\n            {%- set columns = adapter.get_columns_in_relation(relation) -%}\n            {% set column_desc_dict =  codegen.build_dict_column_descriptions(model) if upstream_descriptions else {} %}\n\n            {% for column in columns %}\n                {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types) %}\n            {% endfor %}\n        {% endfor %}\n    {% endif %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ print(joined) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.911995, "supported_languages": null}, "macro.codegen.generate_base_model": {"name": "generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False, materialized=None) %}\n  {{ return(adapter.dispatch('generate_base_model', 'codegen')(source_name, table_name, leading_commas, case_sensitive_cols, materialized)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_base_model"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.913963, "supported_languages": null}, "macro.codegen.default__generate_base_model": {"name": "default__generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.default__generate_base_model", "macro_sql": "{% macro default__generate_base_model(source_name, table_name, leading_commas, case_sensitive_cols, materialized) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\n\n{%- if materialized is not none -%}\n    {{ \"{{ config(materialized='\" ~ materialized ~ \"') }}\" }}\n{%- endif %}\n\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ print(base_model_sql) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.9167497, "supported_languages": null}, "macro.codegen.generate_model_import_ctes": {"name": "generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "unique_id": "macro.codegen.generate_model_import_ctes", "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = False) %}\n    {{ return(adapter.dispatch('generate_model_import_ctes', 'codegen')(model_name, leading_commas)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_model_import_ctes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.9258065, "supported_languages": null}, "macro.codegen.default__generate_model_import_ctes": {"name": "default__generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "unique_id": "macro.codegen.default__generate_model_import_ctes", "macro_sql": "{% macro default__generate_model_import_ctes(model_name, leading_commas) %}\n\n    {%- if execute -%}\n    {%- set nodes = graph.nodes.values() -%}\n\n    {%- set model = (nodes\n        | selectattr('name', 'equalto', model_name) \n        | selectattr('resource_type', 'equalto', 'model')\n        | list).pop() -%}\n\n    {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n    {%- else -%}\n    {%- set model_raw_sql = '' -%}\n    {%- endif -%}\n\n    {#-\n\n        REGEX Explanations\n\n        # with_regex\n        - matches (start of file followed by anything then whitespace\n        or whitespace\n        or a comma) followed by the word with then a space   \n\n        # from_ref \n        - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n        # from_source \n        - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n        # from_var_1\n        - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n        # from_var_2\n        - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n        # from_table_1\n        - matches (from or join) followed by some spaces and then <something>.<something_else>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_2\n        - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_3\n        - matches (from or join) followed by some spaces and then <something>\n          where <something> is enclosed by (` or [ or \" or ')\n\n        # config block\n        - matches the start of the file followed by anything and then {{config(<something>)}}\n\n    -#}\n\n    {%- set re = modules.re -%}\n\n    {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n    {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n    {%- set from_regexes = {\n        'from_ref':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), ref, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)\n            \n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n        \n            ',\n        'from_source':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), source, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*source\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark\n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n\n            ',\n        'from_var_1':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n            \n            ',\n        'from_var_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n            \n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark            \n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)            \n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}            \n            (\\)\\s*}})\n            \n            ',\n        'from_table_1':\n            '(?ix)\n            \n            # first matching group\n            # from or join followed by at least 1 whitespace character            \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)\n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period\n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # seventh matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n\n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)            \n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period            \n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n\n            # seventh matching group\n            # at least 1 word character            \n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) \n            ([\\]`\\\"\\']?)\n            \n            # ninth matching group\n            # a period             \n            (\\.)\n            \n            # tenth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)             \n            ([\\[`\\\"\\']?)\n            \n            # eleventh matching group\n            # at least 1 word character   \n            (\\w+)\n\n            # twelfth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_3':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character             \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\'])\n            \n            # third matching group\n            # at least 1 word character or space \n            ([\\w ]+)\n\n            # fourth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\'])(?=\\s|$)\n            \n            ',\n        'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n    } -%}\n\n    {%- set from_list = [] -%}\n    {%- set config_list = [] -%}\n    {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n    {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n        {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n        {%- for match in all_regex_matches -%}\n\n            {%- if regex_name == 'config_block' -%}\n                {%- set match_tuple = (match|trim, regex_name) -%}\n                {%- do config_list.append(match_tuple) -%}\n            {%- elif regex_name == 'from_source' -%}    \n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = 'source_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%} \n            {%- elif regex_name == 'from_table_1' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}   \n            {%- elif regex_name == 'from_table_2' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}                     \n            {%- else -%}\n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = match[2]|trim|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n        {%- if regex_name == 'config_block' -%}\n        {%- elif regex_name == 'from_source' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%}            \n        {%- elif regex_name == 'from_table_1' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%}     \n        {%- elif regex_name == 'from_table_2' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n        {%- else -%}   \n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%}         \n        {% endif %}\n\n    {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n    {%- for config_obj in config_list -%}\n\n    {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n    {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n    select * from {{ from_obj[1] }}\n    {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n    -- CAUTION: It's best practice to create staging layer for raw sources\n    {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n    {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a var\n    {%- endif %}\n  \n){%- if ((loop.last and does_raw_sql_contain_cte) or (not loop.last)) and not leading_commas -%},{%- endif %}\n\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n    {%- if leading_commas -%}\n        {%- set replace_with = '\\g<1>,' -%}\n    {%- else -%}\n        {%- set replace_with = '\\g<1>' -%}\n    {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ print(model_import_ctes) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.9368832, "supported_languages": null}, "macro.codegen.get_tables_in_schema": {"name": "get_tables_in_schema", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.9415848, "supported_languages": null}, "macro.codegen.generate_source": {"name": "generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, include_data_types=True, table_pattern='%', exclude='', name=schema_name, table_names=None, include_database=False, include_schema=False) %}\n    {{ return(adapter.dispatch('generate_source', 'codegen')(schema_name, database_name, generate_columns, include_descriptions, include_data_types, table_pattern, exclude, name, table_names, include_database, include_schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.942699, "supported_languages": null}, "macro.codegen.default__generate_source": {"name": "default__generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.default__generate_source", "macro_sql": "{% macro default__generate_source(schema_name, database_name, generate_columns, include_descriptions, include_data_types, table_pattern, exclude, name, table_names, include_database, include_schema) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database or include_database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name or include_schema %}\n{% do sources_yaml.append('    schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_data_types %}\n                {% do sources_yaml.append('            data_type: ' ~ codegen.data_type_format_source(column)) %}\n            {% endif %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ print(joined) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_tables_in_schema", "macro.codegen.data_type_format_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.9480066, "supported_languages": null}, "macro.codegen.get_model_dependencies": {"name": "get_model_dependencies", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.9504247, "supported_languages": null}, "macro.codegen.add_model_column_descriptions_to_dict": {"name": "add_model_column_descriptions_to_dict", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.9514904, "supported_languages": null}, "macro.codegen.build_dict_column_descriptions": {"name": "build_dict_column_descriptions", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.9524148, "supported_languages": null}, "macro.codegen.get_models": {"name": "get_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_models", "macro_sql": "{% macro get_models(directory=None, prefix=None) %}\n    {% set model_names=[] %}\n    {% set models = graph.nodes.values() | selectattr('resource_type', \"equalto\", 'model') %}\n    {% if directory and prefix %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory and model.name.startswith(prefix) %}\n                {% do model_names.append(model.name) %}\n            {% endif %} \n        {% endfor %}\n    {% elif directory %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory %}\n                {% do model_names.append(model.name) %}\n            {% endif %}\n        {% endfor %}\n    {% elif prefix %}\n        {% for model in models if model.name.startswith(prefix) %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% else %}\n        {% for model in models %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% endif %}\n    {{ return(model_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.9554958, "supported_languages": null}, "macro.codegen.data_type_format_source": {"name": "data_type_format_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.data_type_format_source", "macro_sql": "{% macro data_type_format_source(column) -%}\n  {{ return(adapter.dispatch('data_type_format_source', 'codegen')(column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__data_type_format_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.9559026, "supported_languages": null}, "macro.codegen.default__data_type_format_source": {"name": "default__data_type_format_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.default__data_type_format_source", "macro_sql": "{% macro default__data_type_format_source(column) %}\n    {% set formatted = codegen.format_column(column) %}\n    {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.956408, "supported_languages": null}, "macro.codegen.data_type_format_model": {"name": "data_type_format_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.data_type_format_model", "macro_sql": "{% macro data_type_format_model(column) -%}\n  {{ return(adapter.dispatch('data_type_format_model', 'codegen')(column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__data_type_format_model"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.9568255, "supported_languages": null}, "macro.codegen.default__data_type_format_model": {"name": "default__data_type_format_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.default__data_type_format_model", "macro_sql": "{% macro default__data_type_format_model(column) %}\n    {% set formatted = codegen.format_column(column) %}\n    {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.957334, "supported_languages": null}, "macro.codegen.format_column": {"name": "format_column", "resource_type": "macro", "package_name": "codegen", "path": "macros/vendored/dbt_core/format_column.sql", "original_file_path": "macros/vendored/dbt_core/format_column.sql", "unique_id": "macro.codegen.format_column", "macro_sql": "{% macro format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1716584565.958201, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.aspects.xapi_events_all_parsed": ["source.aspects.xapi.xapi_events_all"], "model.aspects.fact_enrollments": ["model.aspects.course_names", "model.aspects.dim_user_pii", "model.aspects.enrollment_events"], "model.aspects.enrollment_events": ["model.aspects.xapi_events_all_parsed"], "model.aspects.fact_enrollment_status": ["model.aspects.enrollment_events"], "model.aspects.fact_problem_responses_extended": ["model.aspects.dim_user_pii", "model.aspects.int_problem_results", "model.aspects.int_problems_per_subsection"], "model.aspects.section_problem_engagement": ["model.aspects.dim_course_blocks", "model.aspects.int_problems_per_subsection", "model.aspects.problem_events"], "model.aspects.problem_events": ["model.aspects.xapi_events_all_parsed"], "model.aspects.int_problem_results": ["model.aspects.dim_course_blocks", "model.aspects.problem_events", "model.aspects.responses"], "model.aspects.fact_learner_problem_summary": ["model.aspects.dim_user_pii", "model.aspects.int_problem_hints", "model.aspects.int_problem_results"], "model.aspects.subsection_problem_engagement": ["model.aspects.dim_course_blocks", "model.aspects.int_problems_per_subsection", "model.aspects.problem_events"], "model.aspects.int_problems_per_subsection": ["model.aspects.dim_course_blocks"], "model.aspects.responses": ["model.aspects.problem_events"], "model.aspects.fact_problem_engagement_per_subsection": ["model.aspects.fact_problem_responses", "model.aspects.int_problems_per_subsection"], "model.aspects.fact_problem_responses": ["model.aspects.dim_course_blocks", "model.aspects.dim_user_pii", "model.aspects.problem_events"], "model.aspects.int_problem_hints": ["model.aspects.dim_course_blocks", "model.aspects.problem_events"], "model.aspects.fact_problem_engagement": ["model.aspects.dim_course_blocks", "model.aspects.dim_user_pii", "model.aspects.section_problem_engagement", "model.aspects.subsection_problem_engagement"], "model.aspects.fact_forum_interactions": ["model.aspects.course_names", "model.aspects.dim_user_pii", "model.aspects.forum_events"], "model.aspects.forum_events": ["model.aspects.xapi_events_all_parsed"], "model.aspects.dim_at_risk_learners": ["model.aspects.fact_student_status", "model.aspects.navigation_events"], "model.aspects.dim_user_pii": ["model.aspects.user_pii"], "model.aspects.user_pii": ["source.aspects.event_sink.external_id", "source.aspects.event_sink.user_profile"], "model.aspects.grading_events": ["model.aspects.xapi_events_all_parsed"], "model.aspects.fact_grades": ["model.aspects.course_block_names", "model.aspects.course_names", "model.aspects.dim_user_pii", "model.aspects.grading_events"], "model.aspects.fact_learner_course_grade": ["model.aspects.grading_events"], "model.aspects.fact_student_status": ["model.aspects.course_names", "model.aspects.dim_user_pii", "model.aspects.fact_enrollment_status", "model.aspects.fact_learner_course_grade", "model.aspects.fact_learner_course_status"], "model.aspects.fact_learner_course_status": ["model.aspects.grading_events"], "model.aspects.fact_instance_enrollments": ["model.aspects.course_names", "model.aspects.enrollment_events"], "model.aspects.fact_instance_courses": ["model.aspects.xapi_events_all_parsed"], "model.aspects.fact_instance_events": ["model.aspects.xapi_events_all_parsed"], "model.aspects.fact_instance_actors": ["model.aspects.xapi_events_all_parsed"], "model.aspects.subsection_video_engagement": ["model.aspects.fact_video_plays", "model.aspects.int_videos_per_subsection"], "model.aspects.int_videos_per_subsection": ["model.aspects.dim_course_blocks"], "model.aspects.fact_video_engagement": ["model.aspects.dim_course_blocks", "model.aspects.dim_user_pii", "model.aspects.section_video_engagement", "model.aspects.subsection_video_engagement"], "model.aspects.fact_video_plays": ["model.aspects.dim_course_blocks_extended", "model.aspects.dim_user_pii", "model.aspects.video_playback_events"], "model.aspects.video_playback_events": ["model.aspects.xapi_events_all_parsed"], "model.aspects.video_transcript_events": ["model.aspects.xapi_events_all_parsed"], "model.aspects.fact_transcript_usage": ["model.aspects.dim_course_blocks", "model.aspects.dim_user_pii", "model.aspects.video_transcript_events"], "model.aspects.section_video_engagement": ["model.aspects.fact_video_plays", "model.aspects.int_videos_per_subsection"], "model.aspects.fact_watched_video_segments": ["model.aspects.dim_course_blocks_extended", "model.aspects.dim_user_pii", "model.aspects.video_playback_events"], "model.aspects.learner_summary": ["model.aspects.fact_enrollment_status", "model.aspects.fact_navigation", "model.aspects.fact_student_status"], "model.aspects.fact_pageview_engagement": ["model.aspects.dim_user_pii", "model.aspects.fact_navigation_completion"], "model.aspects.fact_navigation_completion": ["model.aspects.dim_user_pii", "model.aspects.fact_navigation", "model.aspects.int_pages_per_subsection"], "model.aspects.fact_navigation_dropoff": ["model.aspects.dim_course_blocks", "model.aspects.dim_user_pii", "model.aspects.fact_navigation"], "model.aspects.int_pages_per_subsection": ["model.aspects.dim_course_blocks"], "model.aspects.fact_learner_last_course_visit": ["model.aspects.navigation_events"], "model.aspects.fact_navigation": ["model.aspects.dim_course_blocks", "model.aspects.dim_user_pii", "model.aspects.navigation_events"], "model.aspects.navigation_events": ["model.aspects.xapi_events_all_parsed"], "model.aspects.dim_course_blocks": ["model.aspects.course_block_names", "model.aspects.course_names"], "model.aspects.dim_course_blocks_extended": ["model.aspects.dim_course_blocks"], "model.aspects.course_names": ["source.aspects.event_sink.course_overviews"], "model.aspects.course_block_names": ["source.aspects.event_sink.course_blocks"], "model.aspects.fact_completions": ["model.aspects.completion_events", "model.aspects.course_block_names", "model.aspects.course_names", "model.aspects.dim_user_pii"], "model.aspects.completion_events": ["model.aspects.xapi_events_all_parsed"], "test.aspects.get_problem_id": [], "test.aspects.a_tag": [], "test.aspects.problem_results_uniqueness": ["model.aspects.int_problem_results"], "test.aspects.learner_problem_summary_uniqueness": ["model.aspects.fact_learner_problem_summary"], "test.aspects.get_problem_id_with_ccx": [], "test.aspects.accepted_values_fact_enrollments_enrollment_status__registered__unregistered.f8d10203f4": ["model.aspects.fact_enrollments"], "test.aspects.accepted_values_fact_enrollment_status_enrollment_status__registered__unregistered.893527c11f": ["model.aspects.fact_enrollment_status"], "test.aspects.not_null_fact_learner_problem_summary_success.76b52cb2da": ["model.aspects.fact_learner_problem_summary"], "test.aspects.not_null_fact_learner_problem_summary_attempts.817beed32b": ["model.aspects.fact_learner_problem_summary"], "test.aspects.accepted_values_fact_problem_engagement_section_subsection_problem_engagement__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted.f98e4bc69f": ["model.aspects.fact_problem_engagement"], "test.aspects.accepted_values_section_problem_engagement_engagement_level__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted.10f2c3b57c": ["model.aspects.section_problem_engagement"], "test.aspects.accepted_values_subsection_problem_engagement_engagement_level__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted.65ea3dc0c7": ["model.aspects.subsection_problem_engagement"], "test.aspects.accepted_values_fact_grades_grade_type__course__subsection__problem.712bd50c2f": ["model.aspects.fact_grades"], "test.aspects.accepted_values_fact_learner_course_status_approving_state__passed__failed.f9c0c1b85f": ["model.aspects.fact_learner_course_status"], "test.aspects.accepted_values_fact_student_status_enrollment_status__registered__unregistered.53cae8a0f3": ["model.aspects.fact_student_status"], "test.aspects.accepted_values_fact_instance_enrollments_enrollment_status__registered__unregistered.305ffdf696": ["model.aspects.fact_instance_enrollments"], "test.aspects.accepted_values_fact_video_engagement_content_level__section__subsection.636c5e7005": ["model.aspects.fact_video_engagement"], "test.aspects.accepted_values_fact_video_engagement_section_subsection_video_engagement__No_videos_viewed_yet__At_least_one_video_viewed__All_videos_viewed.91f6ccbf80": ["model.aspects.fact_video_engagement"], "test.aspects.accepted_values_section_video_engagement_engagement_level__No_videos_viewed_yet__All_videos_viewed__At_least_one_video_viewed.cf55898019": ["model.aspects.section_video_engagement"], "test.aspects.accepted_values_subsection_video_engagement_engagement_level__No_videos_viewed_yet__All_videos_viewed__At_least_one_video_viewed.73602253b6": ["model.aspects.subsection_video_engagement"], "test.aspects.accepted_values_learner_summary_enrollment_status__registered__unregistered.be87359ff8": ["model.aspects.learner_summary"], "test.aspects.accepted_values_fact_navigation_dropoff_rollup_name__section__subsection.8afafb193f": ["model.aspects.fact_navigation_dropoff"], "test.aspects.accepted_values_fact_pageview_engagement_content_level__section__subsection.dd9e9af3ed": ["model.aspects.fact_pageview_engagement"], "source.aspects.xapi.xapi_events_all": [], "source.aspects.event_sink.user_profile": [], "source.aspects.event_sink.external_id": [], "source.aspects.event_sink.course_blocks": [], "source.aspects.event_sink.course_overviews": []}, "child_map": {"model.aspects.xapi_events_all_parsed": ["model.aspects.completion_events", "model.aspects.enrollment_events", "model.aspects.fact_instance_actors", "model.aspects.fact_instance_courses", "model.aspects.fact_instance_events", "model.aspects.forum_events", "model.aspects.grading_events", "model.aspects.navigation_events", "model.aspects.problem_events", "model.aspects.video_playback_events", "model.aspects.video_transcript_events"], "model.aspects.fact_enrollments": ["test.aspects.accepted_values_fact_enrollments_enrollment_status__registered__unregistered.f8d10203f4"], "model.aspects.enrollment_events": ["model.aspects.fact_enrollment_status", "model.aspects.fact_enrollments", "model.aspects.fact_instance_enrollments"], "model.aspects.fact_enrollment_status": ["model.aspects.fact_student_status", "model.aspects.learner_summary", "test.aspects.accepted_values_fact_enrollment_status_enrollment_status__registered__unregistered.893527c11f"], "model.aspects.fact_problem_responses_extended": [], "model.aspects.section_problem_engagement": ["model.aspects.fact_problem_engagement", "test.aspects.accepted_values_section_problem_engagement_engagement_level__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted.10f2c3b57c"], "model.aspects.problem_events": ["model.aspects.fact_problem_responses", "model.aspects.int_problem_hints", "model.aspects.int_problem_results", "model.aspects.responses", "model.aspects.section_problem_engagement", "model.aspects.subsection_problem_engagement"], "model.aspects.int_problem_results": ["model.aspects.fact_learner_problem_summary", "model.aspects.fact_problem_responses_extended", "test.aspects.problem_results_uniqueness"], "model.aspects.fact_learner_problem_summary": ["test.aspects.learner_problem_summary_uniqueness", "test.aspects.not_null_fact_learner_problem_summary_attempts.817beed32b", "test.aspects.not_null_fact_learner_problem_summary_success.76b52cb2da"], "model.aspects.subsection_problem_engagement": ["model.aspects.fact_problem_engagement", "test.aspects.accepted_values_subsection_problem_engagement_engagement_level__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted.65ea3dc0c7"], "model.aspects.int_problems_per_subsection": ["model.aspects.fact_problem_engagement_per_subsection", "model.aspects.fact_problem_responses_extended", "model.aspects.section_problem_engagement", "model.aspects.subsection_problem_engagement"], "model.aspects.responses": ["model.aspects.int_problem_results"], "model.aspects.fact_problem_engagement_per_subsection": [], "model.aspects.fact_problem_responses": ["model.aspects.fact_problem_engagement_per_subsection"], "model.aspects.int_problem_hints": ["model.aspects.fact_learner_problem_summary"], "model.aspects.fact_problem_engagement": ["test.aspects.accepted_values_fact_problem_engagement_section_subsection_problem_engagement__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted.f98e4bc69f"], "model.aspects.fact_forum_interactions": [], "model.aspects.forum_events": ["model.aspects.fact_forum_interactions"], "model.aspects.dim_at_risk_learners": [], "model.aspects.dim_user_pii": ["model.aspects.fact_completions", "model.aspects.fact_enrollments", "model.aspects.fact_forum_interactions", "model.aspects.fact_grades", "model.aspects.fact_learner_problem_summary", "model.aspects.fact_navigation", "model.aspects.fact_navigation_completion", "model.aspects.fact_navigation_dropoff", "model.aspects.fact_pageview_engagement", "model.aspects.fact_problem_engagement", "model.aspects.fact_problem_responses", "model.aspects.fact_problem_responses_extended", "model.aspects.fact_student_status", "model.aspects.fact_transcript_usage", "model.aspects.fact_video_engagement", "model.aspects.fact_video_plays", "model.aspects.fact_watched_video_segments"], "model.aspects.user_pii": ["model.aspects.dim_user_pii"], "model.aspects.grading_events": ["model.aspects.fact_grades", "model.aspects.fact_learner_course_grade", "model.aspects.fact_learner_course_status"], "model.aspects.fact_grades": ["test.aspects.accepted_values_fact_grades_grade_type__course__subsection__problem.712bd50c2f"], "model.aspects.fact_learner_course_grade": ["model.aspects.fact_student_status"], "model.aspects.fact_student_status": ["model.aspects.dim_at_risk_learners", "model.aspects.learner_summary", "test.aspects.accepted_values_fact_student_status_enrollment_status__registered__unregistered.53cae8a0f3"], "model.aspects.fact_learner_course_status": ["model.aspects.fact_student_status", "test.aspects.accepted_values_fact_learner_course_status_approving_state__passed__failed.f9c0c1b85f"], "model.aspects.fact_instance_enrollments": ["test.aspects.accepted_values_fact_instance_enrollments_enrollment_status__registered__unregistered.305ffdf696"], "model.aspects.fact_instance_courses": [], "model.aspects.fact_instance_events": [], "model.aspects.fact_instance_actors": [], "model.aspects.subsection_video_engagement": ["model.aspects.fact_video_engagement", "test.aspects.accepted_values_subsection_video_engagement_engagement_level__No_videos_viewed_yet__All_videos_viewed__At_least_one_video_viewed.73602253b6"], "model.aspects.int_videos_per_subsection": ["model.aspects.section_video_engagement", "model.aspects.subsection_video_engagement"], "model.aspects.fact_video_engagement": ["test.aspects.accepted_values_fact_video_engagement_content_level__section__subsection.636c5e7005", "test.aspects.accepted_values_fact_video_engagement_section_subsection_video_engagement__No_videos_viewed_yet__At_least_one_video_viewed__All_videos_viewed.91f6ccbf80"], "model.aspects.fact_video_plays": ["model.aspects.section_video_engagement", "model.aspects.subsection_video_engagement"], "model.aspects.video_playback_events": ["model.aspects.fact_video_plays", "model.aspects.fact_watched_video_segments"], "model.aspects.video_transcript_events": ["model.aspects.fact_transcript_usage"], "model.aspects.fact_transcript_usage": [], "model.aspects.section_video_engagement": ["model.aspects.fact_video_engagement", "test.aspects.accepted_values_section_video_engagement_engagement_level__No_videos_viewed_yet__All_videos_viewed__At_least_one_video_viewed.cf55898019"], "model.aspects.fact_watched_video_segments": [], "model.aspects.learner_summary": ["test.aspects.accepted_values_learner_summary_enrollment_status__registered__unregistered.be87359ff8"], "model.aspects.fact_pageview_engagement": ["test.aspects.accepted_values_fact_pageview_engagement_content_level__section__subsection.dd9e9af3ed"], "model.aspects.fact_navigation_completion": ["model.aspects.fact_pageview_engagement"], "model.aspects.fact_navigation_dropoff": ["test.aspects.accepted_values_fact_navigation_dropoff_rollup_name__section__subsection.8afafb193f"], "model.aspects.int_pages_per_subsection": ["model.aspects.fact_navigation_completion"], "model.aspects.fact_learner_last_course_visit": [], "model.aspects.fact_navigation": ["model.aspects.fact_navigation_completion", "model.aspects.fact_navigation_dropoff", "model.aspects.learner_summary"], "model.aspects.navigation_events": ["model.aspects.dim_at_risk_learners", "model.aspects.fact_learner_last_course_visit", "model.aspects.fact_navigation"], "model.aspects.dim_course_blocks": ["model.aspects.dim_course_blocks_extended", "model.aspects.fact_navigation", "model.aspects.fact_navigation_dropoff", "model.aspects.fact_problem_engagement", "model.aspects.fact_problem_responses", "model.aspects.fact_transcript_usage", "model.aspects.fact_video_engagement", "model.aspects.int_pages_per_subsection", "model.aspects.int_problem_hints", "model.aspects.int_problem_results", "model.aspects.int_problems_per_subsection", "model.aspects.int_videos_per_subsection", "model.aspects.section_problem_engagement", "model.aspects.subsection_problem_engagement"], "model.aspects.dim_course_blocks_extended": ["model.aspects.fact_video_plays", "model.aspects.fact_watched_video_segments"], "model.aspects.course_names": ["model.aspects.dim_course_blocks", "model.aspects.fact_completions", "model.aspects.fact_enrollments", "model.aspects.fact_forum_interactions", "model.aspects.fact_grades", "model.aspects.fact_instance_enrollments", "model.aspects.fact_student_status"], "model.aspects.course_block_names": ["model.aspects.dim_course_blocks", "model.aspects.fact_completions", "model.aspects.fact_grades"], "model.aspects.fact_completions": [], "model.aspects.completion_events": ["model.aspects.fact_completions"], "test.aspects.get_problem_id": [], "test.aspects.a_tag": [], "test.aspects.problem_results_uniqueness": [], "test.aspects.learner_problem_summary_uniqueness": [], "test.aspects.get_problem_id_with_ccx": [], "test.aspects.accepted_values_fact_enrollments_enrollment_status__registered__unregistered.f8d10203f4": [], "test.aspects.accepted_values_fact_enrollment_status_enrollment_status__registered__unregistered.893527c11f": [], "test.aspects.not_null_fact_learner_problem_summary_success.76b52cb2da": [], "test.aspects.not_null_fact_learner_problem_summary_attempts.817beed32b": [], "test.aspects.accepted_values_fact_problem_engagement_section_subsection_problem_engagement__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted.f98e4bc69f": [], "test.aspects.accepted_values_section_problem_engagement_engagement_level__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted.10f2c3b57c": [], "test.aspects.accepted_values_subsection_problem_engagement_engagement_level__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted.65ea3dc0c7": [], "test.aspects.accepted_values_fact_grades_grade_type__course__subsection__problem.712bd50c2f": [], "test.aspects.accepted_values_fact_learner_course_status_approving_state__passed__failed.f9c0c1b85f": [], "test.aspects.accepted_values_fact_student_status_enrollment_status__registered__unregistered.53cae8a0f3": [], "test.aspects.accepted_values_fact_instance_enrollments_enrollment_status__registered__unregistered.305ffdf696": [], "test.aspects.accepted_values_fact_video_engagement_content_level__section__subsection.636c5e7005": [], "test.aspects.accepted_values_fact_video_engagement_section_subsection_video_engagement__No_videos_viewed_yet__At_least_one_video_viewed__All_videos_viewed.91f6ccbf80": [], "test.aspects.accepted_values_section_video_engagement_engagement_level__No_videos_viewed_yet__All_videos_viewed__At_least_one_video_viewed.cf55898019": [], "test.aspects.accepted_values_subsection_video_engagement_engagement_level__No_videos_viewed_yet__All_videos_viewed__At_least_one_video_viewed.73602253b6": [], "test.aspects.accepted_values_learner_summary_enrollment_status__registered__unregistered.be87359ff8": [], "test.aspects.accepted_values_fact_navigation_dropoff_rollup_name__section__subsection.8afafb193f": [], "test.aspects.accepted_values_fact_pageview_engagement_content_level__section__subsection.dd9e9af3ed": [], "source.aspects.xapi.xapi_events_all": ["model.aspects.xapi_events_all_parsed"], "source.aspects.event_sink.user_profile": ["model.aspects.user_pii"], "source.aspects.event_sink.external_id": ["model.aspects.user_pii"], "source.aspects.event_sink.course_blocks": ["model.aspects.course_block_names"], "source.aspects.event_sink.course_overviews": ["model.aspects.course_names"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}}