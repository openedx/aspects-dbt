{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.0", "generated_at": "2024-03-05T16:58:22.568895Z", "invocation_id": "b464d2dc-503e-4e1a-8f45-588f37caf48e", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.211148Z", "completed_at": "2024-03-05T16:58:22.221325Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.222902Z", "completed_at": "2024-03-05T16:58:22.222916Z"}], "thread_id": "Thread-1", "execution_time": 0.014668941497802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_course_blocks", "compiled": true, "compiled_code": "select\n    courses.org as org,\n    courses.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    blocks.location as block_id,\n    blocks.block_name as block_name,\n    blocks.display_name_with_location as display_name_with_location,\n    graded,\n    case\n        when block_id like '%@chapter+block@%'\n        then 'section'\n        when block_id like '%@sequential+block@%'\n        then 'subsection'\n        when block_id like '%@vertical+block@%'\n        then 'unit'\n        else regexpExtract(block_id, '@([^+]+)\\+block@', 1)\n    end as block_type\nfrom `event_sink`.`course_block_names` blocks\njoin\n    `event_sink`.`course_names` courses\n    on blocks.course_key = courses.course_key\n    settings join_algorithm = 'direct'", "relation_name": "`xapi`.`dim_course_blocks`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.228009Z", "completed_at": "2024-03-05T16:58:22.233782Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.235392Z", "completed_at": "2024-03-05T16:58:22.235404Z"}], "thread_id": "Thread-1", "execution_time": 0.01033473014831543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.xapi_events_all_parsed", "compiled": true, "compiled_code": "\n\nselect\n    event_id as event_id,\n    JSON_VALUE(event::String, '$.verb.id') as verb_id,\n    COALESCE(\n        NULLIF(JSON_VALUE(event::String, '$.actor.account.name'), ''),\n        NULLIF(JSON_VALUE(event::String, '$.actor.mbox'), ''),\n        JSON_VALUE(event::String, '$.actor.mbox_sha1sum')\n    ) as actor_id,\n    JSON_VALUE(event::String, '$.object.id') as object_id,\n    -- If the contextActivities parent is a course, use that. It can be a \"course\"\n    -- type, or a \"cmi.interaction\" type for multiple question problem submissions.\n    -- Otherwise use the object id for the course id.\n    multiIf(\n        -- If the contextActivities parent is a course, use that\n        JSON_VALUE(\n            event::String, '$.context.contextActivities.parent[0].definition.type'\n        )\n        = 'http://adlnet.gov/expapi/activities/course',\n        JSON_VALUE(event::String, '$.context.contextActivities.parent[0].id'),\n        -- Else if the contextActivities parent is a GroupActivity, it's a multi\n        -- question problem and we use the grouping id\n        JSON_VALUE(event::String, '$.context.contextActivities.parent[0].objectType')\n        in ('Activity', 'GroupActivity'),\n        JSON_VALUE(event::String, '$.context.contextActivities.grouping[0].id'),\n        -- Otherwise use the object id\n        JSON_VALUE(event::String, '$.object.id')\n    ) as course_id,\n    coalesce(\n        get_org_from_course_url(course_id), get_org_from_ccx_course_url(course_id), ''\n    ) as org,\n    emission_time as emission_time,\n    event::String as event\nfrom `xapi`.`xapi_events_all`", "relation_name": "`xapi`.`xapi_events_all_parsed`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.240511Z", "completed_at": "2024-03-05T16:58:22.246121Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.247815Z", "completed_at": "2024-03-05T16:58:22.247829Z"}], "thread_id": "Thread-1", "execution_time": 0.01066446304321289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.get_problem_id", "compiled": true, "compiled_code": "select\n    'http://local.edly.io:8000/xblock/block-v1:edunext+demo+demo+ccx+type@problem+block@3c1646f7133a4c5fb4557d649e22c251'\n    as object_id\nfrom system.one\nwhere\n    \n    regexpExtract(\n        object_id, 'xblock/([\\w\\d-\\+:@]*@problem\\+block@[\\w\\d][^_]*)(_\\d_\\d)?', 1\n    )\n\n    != 'block-v1:edunext+demo+demo+ccx+type@problem+block@3c1646f7133a4c5fb4557d649e22c251'", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.252553Z", "completed_at": "2024-03-05T16:58:22.256861Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.258367Z", "completed_at": "2024-03-05T16:58:22.258378Z"}], "thread_id": "Thread-1", "execution_time": 0.008664846420288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.get_problem_id_with_ccx", "compiled": true, "compiled_code": "select\n    'http://local.edly.io:8000/xblock/ccx-block-v1:edunext+demo+demo+ccx@1+type@problem+block@3c1646f7133a4c5fb4557d649e22c251'\n    as object_id\nfrom system.one\nwhere\n    \n    regexpExtract(\n        object_id, 'xblock/([\\w\\d-\\+:@]*@problem\\+block@[\\w\\d][^_]*)(_\\d_\\d)?', 1\n    )\n\n    != 'ccx-block-v1:edunext+demo+demo+ccx@1+type@problem+block@3c1646f7133a4c5fb4557d649e22c251'", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.262879Z", "completed_at": "2024-03-05T16:58:22.268351Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.269848Z", "completed_at": "2024-03-05T16:58:22.269858Z"}], "thread_id": "Thread-1", "execution_time": 0.009679794311523438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.completion_events", "compiled": true, "compiled_code": "\n\nselect\n    event_id,\n    CAST(emission_time, 'DateTime') as emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] as course_key,\n    org,\n    verb_id,\n    JSON_VALUE(\n        event,\n        '$.result.extensions.\"https://w3id.org/xapi/cmi5/result/extensions/progress\"'\n    ) as progress_percent\nfrom `xapi`.`xapi_events_all_parsed`\nwhere verb_id = 'http://adlnet.gov/expapi/verbs/progressed'", "relation_name": "`xapi`.`completion_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.274370Z", "completed_at": "2024-03-05T16:58:22.279929Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.281449Z", "completed_at": "2024-03-05T16:58:22.281460Z"}], "thread_id": "Thread-1", "execution_time": 0.009775400161743164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.enrollment_events", "compiled": true, "compiled_code": "\n\nselect\n    event_id,\n    cast(emission_time as DateTime) as emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] as course_key,\n    org,\n    verb_id,\n    JSON_VALUE(\n        event,\n        '$.object.definition.extensions.\"https://w3id.org/xapi/acrossx/extensions/type\"'\n    ) as enrollment_mode\nfrom `xapi`.`xapi_events_all_parsed`\nwhere\n    verb_id in (\n        'http://adlnet.gov/expapi/verbs/registered',\n        'http://id.tincanapi.com/verb/unregistered'\n    )", "relation_name": "`xapi`.`enrollment_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.285846Z", "completed_at": "2024-03-05T16:58:22.291338Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.292861Z", "completed_at": "2024-03-05T16:58:22.292871Z"}], "thread_id": "Thread-1", "execution_time": 0.00971674919128418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.forum_events", "compiled": true, "compiled_code": "\n\nselect\n    event_id,\n    CAST(emission_time, 'DateTime') as emission_time,\n    org,\n    splitByString('/', course_id)[-1] as course_key,\n    object_id,\n    actor_id,\n    verb_id\nfrom `xapi`.`xapi_events_all_parsed`\nwhere\n    JSON_VALUE(event, '$.object.definition.type')\n    = 'http://id.tincanapi.com/activitytype/discussion'", "relation_name": "`xapi`.`forum_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.297556Z", "completed_at": "2024-03-05T16:58:22.303181Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.304809Z", "completed_at": "2024-03-05T16:58:22.304822Z"}], "thread_id": "Thread-1", "execution_time": 0.010157108306884766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.grading_events", "compiled": true, "compiled_code": "\n\n\nselect\n    event_id,\n    CAST(emission_time, 'DateTime') as emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] as course_key,\n    org,\n    verb_id,\n    JSONExtractFloat(event, 'result', 'score', 'scaled') as scaled_score\nfrom `xapi`.`xapi_events_all_parsed`\nwhere\n    verb_id in (\n        'http://id.tincanapi.com/verb/earned',\n        'https://w3id.org/xapi/acrossx/verbs/evaluated'\n    )", "relation_name": "`xapi`.`grading_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.309689Z", "completed_at": "2024-03-05T16:58:22.316704Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.318303Z", "completed_at": "2024-03-05T16:58:22.318316Z"}], "thread_id": "Thread-1", "execution_time": 0.011687755584716797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.navigation_events", "compiled": true, "compiled_code": "\n\nselect\n    event_id,\n    cast(emission_time as DateTime) as emission_time,\n    actor_id,\n    splitByString('/xblock/', object_id)[-1] as block_id,\n    splitByString('/', course_id)[-1] as course_key,\n    org,\n    verb_id,\n    JSONExtractString(event, 'object', 'definition', 'type') as object_type,\n    -- clicking a link and selecting a module outline have no starting-position field\n    if(\n        object_type in (\n            'http://adlnet.gov/expapi/activities/link',\n            'http://adlnet.gov/expapi/activities/module'\n        ),\n        0,\n        JSONExtractInt(\n            event,\n            'context',\n            'extensions',\n            'http://id.tincanapi.com/extension/starting-position'\n        )\n    ) as starting_position,\n    JSONExtractString(\n        event, 'context', 'extensions', 'http://id.tincanapi.com/extension/ending-point'\n    ) as ending_point\nfrom `xapi`.`xapi_events_all_parsed`\nwhere verb_id in ('https://w3id.org/xapi/dod-isd/verbs/navigated')", "relation_name": "`xapi`.`navigation_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.323140Z", "completed_at": "2024-03-05T16:58:22.328885Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.330445Z", "completed_at": "2024-03-05T16:58:22.330459Z"}], "thread_id": "Thread-1", "execution_time": 0.010352849960327148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.problem_events", "compiled": true, "compiled_code": "\n\nselect\n    event_id,\n    cast(emission_time as DateTime) as emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] as course_key,\n    org,\n    verb_id,\n    JSON_VALUE(event, '$.result.response') as responses,\n    JSON_VALUE(event, '$.result.score.scaled') as scaled_score,\n    if(\n        verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated',\n        cast(JSON_VALUE(event, '$.result.success') as Bool),\n        false\n    ) as success,\n    JSON_VALUE(event, '$.object.definition.interactionType') as interaction_type,\n    if(\n        verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated',\n        cast(\n            JSON_VALUE(\n                event,\n                '$.object.definition.extensions.\"http://id.tincanapi.com/extension/attempt-id\"'\n            ) as Int16\n        ),\n        0\n    ) as attempts\nfrom `xapi`.`xapi_events_all_parsed`\nwhere\n    verb_id in (\n        'https://w3id.org/xapi/acrossx/verbs/evaluated',\n        'http://adlnet.gov/expapi/verbs/passed',\n        'http://adlnet.gov/expapi/verbs/asked'\n    )", "relation_name": "`xapi`.`problem_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.335070Z", "completed_at": "2024-03-05T16:58:22.341256Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.343018Z", "completed_at": "2024-03-05T16:58:22.343030Z"}], "thread_id": "Thread-1", "execution_time": 0.01087641716003418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.video_playback_events", "compiled": true, "compiled_code": "\n\nselect\n    event_id,\n    CAST(emission_time, 'DateTime') as emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] as course_key,\n    org,\n    verb_id,\n    ceil(\n        CAST(\n            coalesce(\n                nullIf(\n                    JSON_VALUE(\n                        event,\n                        '$.result.extensions.\"https://w3id.org/xapi/video/extensions/time\"'\n                    ),\n                    ''\n                ),\n                nullIf(\n                    JSON_VALUE(\n                        event,\n                        '$.result.extensions.\"https://w3id.org/xapi/video/extensions/time-from\"'\n                    ),\n                    ''\n                ),\n                '0.0'\n            ),\n            'Decimal32(2)'\n        )\n    ) as video_position,\n    JSONExtractInt(\n        event, 'context', 'extensions', 'https://w3id.org/xapi/video/extensions/length'\n    ) as video_duration\nfrom `xapi`.`xapi_events_all_parsed`\nwhere\n    (\n        verb_id in (\n            'http://adlnet.gov/expapi/verbs/completed',\n            'http://adlnet.gov/expapi/verbs/initialized',\n            'http://adlnet.gov/expapi/verbs/terminated',\n            'https://w3id.org/xapi/video/verbs/paused',\n            'https://w3id.org/xapi/video/verbs/played',\n            'https://w3id.org/xapi/video/verbs/seeked'\n        )\n    )\n    and (object_id like '%video+block%')", "relation_name": "`xapi`.`video_playback_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.347962Z", "completed_at": "2024-03-05T16:58:22.353719Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.355334Z", "completed_at": "2024-03-05T16:58:22.355348Z"}], "thread_id": "Thread-1", "execution_time": 0.010399580001831055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.video_transcript_events", "compiled": true, "compiled_code": "\n\nselect\n    event_id,\n    CAST(emission_time, 'DateTime') as emission_time,\n    org,\n    splitByString('/', course_id)[-1] as course_key,\n    splitByString('/xblock/', object_id)[2] as video_id,\n    actor_id,\n    JSONExtractBool(\n        event,\n        'result',\n        'extensions',\n        'https://w3id.org/xapi/video/extensions/cc-enabled'\n    ) as cc_enabled\nfrom `xapi`.`xapi_events_all_parsed`\nwhere\n    verb_id in ('http://adlnet.gov/expapi/verbs/interacted')\n    and JSONHas(\n        event,\n        'result',\n        'extensions',\n        'https://w3id.org/xapi/video/extensions/cc-enabled'\n    )", "relation_name": "`xapi`.`video_transcript_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.360441Z", "completed_at": "2024-03-05T16:58:22.366279Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.367923Z", "completed_at": "2024-03-05T16:58:22.367936Z"}], "thread_id": "Thread-1", "execution_time": 0.010858297348022461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_completions", "compiled": true, "compiled_code": "with\n    completions as (\n        select\n            emission_time,\n            org,\n            course_key,\n            actor_id,\n            progress_percent,\n            if(\n                object_id like '%/course/%',\n                splitByString('/course/', object_id)[-1],\n                splitByString('/xblock/', object_id)[-1]\n            ) as entity_id,\n            cast(progress_percent as Float) / 100 as scaled_progress\n        from `xapi`.`completion_events`\n    )\n\nselect\n    completions.emission_time as emission_time,\n    completions.org as org,\n    completions.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    completions.entity_id as entity_id,\n    if(blocks.block_name != '', blocks.block_name, courses.course_name) as entity_name,\n    if(\n        blocks.block_name != '', blocks.display_name_with_location, null\n    ) as entity_name_with_location,\n    completions.actor_id as actor_id,\n    cast(completions.scaled_progress as Float) as scaled_progress,\n    case\n        when scaled_progress >= 0.9\n        then '90-100%'\n        when scaled_progress >= 0.8 and scaled_progress < 0.9\n        then '80-89%'\n        when scaled_progress >= 0.7 and scaled_progress < 0.8\n        then '70-79%'\n        when scaled_progress >= 0.6 and scaled_progress < 0.7\n        then '60-69%'\n        when scaled_progress >= 0.5 and scaled_progress < 0.6\n        then '50-59%'\n        when scaled_progress >= 0.4 and scaled_progress < 0.5\n        then '40-49%'\n        when scaled_progress >= 0.3 and scaled_progress < 0.4\n        then '30-39%'\n        when scaled_progress >= 0.2 and scaled_progress < 0.3\n        then '20-29%'\n        when scaled_progress >= 0.1 and scaled_progress < 0.2\n        then '10-19%'\n        else '0-9%'\n    end as completion_bucket\nfrom completions\njoin\n    `event_sink`.`course_names` courses\n    on completions.course_key = courses.course_key\nleft join\n    `event_sink`.`course_block_names` blocks\n    on completions.entity_id = blocks.location", "relation_name": "`xapi`.`fact_completions`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.372746Z", "completed_at": "2024-03-05T16:58:22.377816Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.379664Z", "completed_at": "2024-03-05T16:58:22.379689Z"}], "thread_id": "Thread-1", "execution_time": 0.010027408599853516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_enrollments", "compiled": true, "compiled_code": "with\n    enrollments as (\n        select\n            emission_time,\n            org,\n            course_key,\n            actor_id,\n            enrollment_mode,\n            splitByString('/', verb_id)[-1] as enrollment_status\n        from `xapi`.`enrollment_events`\n    )\n\nselect\n    enrollments.emission_time as emission_time,\n    enrollments.org as org,\n    enrollments.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    enrollments.actor_id as actor_id,\n    enrollments.enrollment_mode as enrollment_mode,\n    enrollments.enrollment_status as enrollment_status\nfrom enrollments\njoin\n    `event_sink`.`course_names` courses\n    on enrollments.course_key = courses.course_key", "relation_name": "`xapi`.`fact_enrollments`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.384662Z", "completed_at": "2024-03-05T16:58:22.390020Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.391894Z", "completed_at": "2024-03-05T16:58:22.391910Z"}], "thread_id": "Thread-1", "execution_time": 0.010548114776611328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_forum_interactions", "compiled": true, "compiled_code": "select\n    forum.event_id as event_id,\n    forum.emission_time as emission_time,\n    forum.org as org,\n    forum.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    forum.object_id as object_id,\n    forum.actor_id as actor_id,\n    forum.verb_id as verb_id\nfrom `xapi`.`forum_events` forum\njoin\n    `event_sink`.`course_names` courses\n    on (forum.course_key = courses.course_key)", "relation_name": "`xapi`.`fact_forum_interactions`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.397203Z", "completed_at": "2024-03-05T16:58:22.405010Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.406697Z", "completed_at": "2024-03-05T16:58:22.406711Z"}], "thread_id": "Thread-1", "execution_time": 0.012783288955688477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_grades", "compiled": true, "compiled_code": "with\n    grades as (\n        select\n            emission_time,\n            org,\n            course_key,\n            case\n                when object_id like '%/course/%'\n                then 'course'\n                when object_id like '%@sequential+block@%'\n                then 'subsection'\n                when object_id like '%@problem+block@%'\n                then 'problem'\n            end as grade_type,\n            if(\n                grade_type = 'course',\n                splitByString('/course/', object_id)[-1],\n                splitByString('/xblock/', object_id)[-1]\n            ) as entity_id,\n            actor_id,\n            scaled_score\n        from `xapi`.`grading_events`\n    )\n\nselect\n    grades.emission_time as emission_time,\n    grades.org as org,\n    grades.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    grades.entity_id as entity_id,\n    if(blocks.block_name != '', blocks.block_name, courses.course_name) as entity_name,\n    if(\n        blocks.block_name != '', blocks.display_name_with_location, null\n    ) as entity_name_with_location,\n    grades.grade_type as grade_type,\n    grades.actor_id as actor_id,\n    grades.scaled_score as scaled_score,\n    case\n        when scaled_score >= 0.9\n        then '90-100%'\n        when scaled_score >= 0.8 and scaled_score < 0.9\n        then '80-89%'\n        when scaled_score >= 0.7 and scaled_score < 0.8\n        then '70-79%'\n        when scaled_score >= 0.6 and scaled_score < 0.7\n        then '60-69%'\n        when scaled_score >= 0.5 and scaled_score < 0.6\n        then '50-59%'\n        when scaled_score >= 0.4 and scaled_score < 0.5\n        then '40-49%'\n        when scaled_score >= 0.3 and scaled_score < 0.4\n        then '30-39%'\n        when scaled_score >= 0.2 and scaled_score < 0.3\n        then '20-29%'\n        when scaled_score >= 0.1 and scaled_score < 0.2\n        then '10-19%'\n        else '0-9%'\n    end as grade_bucket\nfrom grades\njoin\n    `event_sink`.`course_names` courses\n    on grades.course_key = courses.course_key\nleft join\n    `event_sink`.`course_block_names` blocks\n    on grades.entity_id = blocks.location", "relation_name": "`xapi`.`fact_grades`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.411642Z", "completed_at": "2024-03-05T16:58:22.416327Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.417827Z", "completed_at": "2024-03-05T16:58:22.417838Z"}], "thread_id": "Thread-1", "execution_time": 0.009097814559936523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_navigation", "compiled": true, "compiled_code": "select\n    navigation.emission_time as emission_time,\n    navigation.org as org,\n    navigation.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    navigation.actor_id as actor_id,\n    navigation.block_id as block_id,\n    blocks.block_name as block_name,\n    blocks.display_name_with_location as block_name_with_location,\n    navigation.object_type as object_type,\n    navigation.starting_position as starting_position,\n    navigation.ending_point as ending_point\nfrom `xapi`.`navigation_events` navigation\njoin\n    `xapi`.`dim_course_blocks` blocks\n    on (\n        navigation.course_key = blocks.course_key\n        and navigation.block_id = blocks.block_id\n    )", "relation_name": "`xapi`.`fact_navigation`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.422383Z", "completed_at": "2024-03-05T16:58:22.427299Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.428880Z", "completed_at": "2024-03-05T16:58:22.428891Z"}], "thread_id": "Thread-1", "execution_time": 0.009280920028686523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_problem_responses", "compiled": true, "compiled_code": "with\n    responses as (\n        select\n            emission_time,\n            org,\n            course_key,\n            \n    regexpExtract(\n        object_id, 'xblock/([\\w\\d-\\+:@]*@problem\\+block@[\\w\\d][^_]*)(_\\d_\\d)?', 1\n    )\n as problem_id,\n            actor_id,\n            responses,\n            success,\n            attempts\n        from `xapi`.`problem_events`\n        where verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated'\n    )\n\nselect\n    responses.emission_time as emission_time,\n    responses.org as org,\n    responses.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    responses.problem_id as problem_id,\n    blocks.block_name as problem_name,\n    blocks.display_name_with_location as problem_name_with_location,\n    responses.actor_id as actor_id,\n    responses.responses as responses,\n    responses.success as success,\n    responses.attempts as attempts\nfrom responses\njoin\n    `xapi`.`dim_course_blocks` blocks\n    on (\n        responses.course_key = blocks.course_key\n        and responses.problem_id = blocks.block_id\n    )\ngroup by\n    -- multi-part questions include an extra record for the response to the first\n    -- part of the question. this group by clause eliminates the duplicate record\n    emission_time,\n    org,\n    course_key,\n    course_name,\n    course_run,\n    problem_id,\n    problem_name,\n    problem_name_with_location,\n    actor_id,\n    responses,\n    success,\n    attempts", "relation_name": "`xapi`.`fact_problem_responses`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.433606Z", "completed_at": "2024-03-05T16:58:22.438459Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.440034Z", "completed_at": "2024-03-05T16:58:22.440045Z"}], "thread_id": "Thread-1", "execution_time": 0.009214162826538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.int_problem_hints", "compiled": true, "compiled_code": "with\n    hints as (\n        select\n            emission_time,\n            org,\n            course_key,\n            \n    regexpExtract(\n        object_id, 'xblock/([\\w\\d-\\+:@]*@problem\\+block@[\\w\\d][^_]*)(_\\d_\\d)?', 1\n    )\n as problem_id,\n            actor_id,\n            case\n                when object_id like '%/hint%'\n                then 'hint'\n                when object_id like '%/answer%'\n                then 'answer'\n                else 'N/A'\n            end as help_type\n        from `xapi`.`problem_events`\n        where verb_id = 'http://adlnet.gov/expapi/verbs/asked'\n    )\n\nselect\n    hints.emission_time as emission_time,\n    hints.org as org,\n    hints.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    hints.problem_id as problem_id,\n    blocks.block_name as problem_name,\n    blocks.display_name_with_location as problem_name_with_location,\n    hints.actor_id as actor_id,\n    hints.help_type as help_type\nfrom hints\njoin\n    `xapi`.`dim_course_blocks` blocks\n    on (hints.course_key = blocks.course_key and hints.problem_id = blocks.block_id)", "relation_name": "`xapi`.`int_problem_hints`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.444464Z", "completed_at": "2024-03-05T16:58:22.448978Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.450484Z", "completed_at": "2024-03-05T16:58:22.450495Z"}], "thread_id": "Thread-1", "execution_time": 0.008856058120727539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_video_plays", "compiled": true, "compiled_code": "-- model to support number of watches per video\n-- ref:\n-- https://edx.readthedocs.io/projects/edx-insights/en/latest/Reference.html#engagement-computations\nwith\n    plays as (\n        select\n            emission_time,\n            org,\n            course_key,\n            splitByString('/xblock/', object_id)[-1] as video_id,\n            actor_id\n        from `xapi`.`video_playback_events`\n        where verb_id = 'https://w3id.org/xapi/video/verbs/played'\n    )\n\nselect\n    plays.emission_time as emission_time,\n    plays.org as org,\n    plays.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    plays.video_id as video_id,\n    blocks.block_name as video_name,\n    blocks.display_name_with_location as video_name_with_location,\n    plays.actor_id as actor_id\nfrom plays\njoin\n    `xapi`.`dim_course_blocks` blocks\n    on (plays.course_key = blocks.course_key and plays.video_id = blocks.block_id)", "relation_name": "`xapi`.`fact_video_plays`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.454917Z", "completed_at": "2024-03-05T16:58:22.459718Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.461296Z", "completed_at": "2024-03-05T16:58:22.461308Z"}], "thread_id": "Thread-1", "execution_time": 0.009124994277954102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_transcript_usage", "compiled": true, "compiled_code": "select\n    transcripts.emission_time as emission_time,\n    transcripts.org as org,\n    transcripts.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    transcripts.video_id as video_id,\n    blocks.block_name as video_name,\n    blocks.display_name_with_location as video_name_with_location,\n    transcripts.actor_id as actor_id\nfrom `xapi`.`video_transcript_events` transcripts\njoin\n    `xapi`.`dim_course_blocks` blocks\n    on (\n        transcripts.course_key = blocks.course_key\n        and transcripts.video_id = blocks.block_id\n    )\nwhere transcripts.cc_enabled", "relation_name": "`xapi`.`fact_transcript_usage`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.465875Z", "completed_at": "2024-03-05T16:58:22.473396Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.475023Z", "completed_at": "2024-03-05T16:58:22.475035Z"}], "thread_id": "Thread-1", "execution_time": 0.01201486587524414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.accepted_values_fact_enrollments_enrollment_status__registered__unregistered.f8d10203f4", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        enrollment_status as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_enrollments`\n    group by enrollment_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'registered','unregistered'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.479633Z", "completed_at": "2024-03-05T16:58:22.485365Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.486887Z", "completed_at": "2024-03-05T16:58:22.486897Z"}], "thread_id": "Thread-1", "execution_time": 0.010114908218383789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.accepted_values_fact_grades_grade_type__course__subsection__problem.712bd50c2f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        grade_type as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_grades`\n    group by grade_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'course','subsection','problem'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.491472Z", "completed_at": "2024-03-05T16:58:22.496182Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.497677Z", "completed_at": "2024-03-05T16:58:22.497687Z"}], "thread_id": "Thread-1", "execution_time": 0.008955001831054688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.int_problem_results", "compiled": true, "compiled_code": "-- select one record per (learner, problem, course, org) tuple\n-- contains either the first successful attempt\n-- or the most recent unsuccessful attempt\n-- find the timestamp of the earliest successful response\n-- this will be used to pick the xAPI event corresponding to that submission\nwith\n    successful_responses as (\n        select\n            org,\n            course_key,\n            problem_id,\n            actor_id,\n            min(emission_time) as first_success_at\n        from `xapi`.`fact_problem_responses`\n        where\n            -- clickhouse throws an error when shortening this to `where success`\n            success = true\n        group by org, course_key, problem_id, actor_id\n    ),\n    -- for all learners who did not submit a successful response,\n    -- find the timestamp of the most recent unsuccessful response\n    unsuccessful_responses as (\n        select\n            org,\n            course_key,\n            problem_id,\n            actor_id,\n            max(emission_time) as last_response_at\n        from `xapi`.`fact_problem_responses`\n        where actor_id not in (select distinct actor_id from successful_responses)\n        group by org, course_key, problem_id, actor_id\n    ),\n    -- combine result sets for successful and unsuccessful problem submissions\n    responses as (\n        select org, course_key, problem_id, actor_id, first_success_at as emission_time\n        from successful_responses\n        union all\n        select org, course_key, problem_id, actor_id, last_response_at as emission_time\n        from unsuccessful_responses\n    )\n\nselect\n    emission_time,\n    org,\n    course_key,\n    course_name,\n    course_run,\n    problem_id,\n    problem_name,\n    problem_name_with_location,\n    actor_id,\n    responses,\n    success,\n    attempts\nfrom `xapi`.`fact_problem_responses` problem_responses\njoin responses using (org, course_key, problem_id, actor_id, emission_time)", "relation_name": "`xapi`.`int_problem_results`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.502534Z", "completed_at": "2024-03-05T16:58:22.507018Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.508676Z", "completed_at": "2024-03-05T16:58:22.508689Z"}], "thread_id": "Thread-1", "execution_time": 0.008922338485717773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_learner_problem_summary", "compiled": true, "compiled_code": "-- summary table for a learner's performance on and interactions with a\n-- particular problem\nwith\n    results_with_hints as (\n        select\n            org,\n            course_key,\n            course_name,\n            course_run,\n            problem_id,\n            problem_name,\n            problem_name_with_location,\n            actor_id,\n            success,\n            attempts,\n            0 as num_hints_displayed,\n            0 as num_answers_displayed\n        from `xapi`.`int_problem_results`\n        union all\n        select\n            org,\n            course_key,\n            course_name,\n            course_run,\n            problem_id,\n            problem_name,\n            problem_name_with_location,\n            actor_id,\n            null as success,\n            null as attempts,\n            case help_type when 'hint' then 1 else 0 end as num_hints_displayed,\n            case help_type when 'answer' then 1 else 0 end as num_answers_displayed\n        from `xapi`.`int_problem_hints`\n    )\n\n-- n.b.: there should only be one row per org, course, problem, and actor\n-- in problem_results, so any(success) and any(attempts) should return the\n-- values from that part of the union and not the null values used as\n-- placeholders in the problem_hints part of the union\nselect\n    org,\n    course_key,\n    course_name,\n    course_run,\n    problem_id,\n    problem_name,\n    problem_name_with_location,\n    actor_id,\n    coalesce(any(success), false) as success,\n    coalesce(any(attempts), 0) as attempts,\n    sum(num_hints_displayed) as num_hints_displayed,\n    sum(num_answers_displayed) as num_answers_displayed\nfrom results_with_hints\ngroup by\n    org,\n    course_key,\n    course_name,\n    course_run,\n    problem_id,\n    problem_name,\n    problem_name_with_location,\n    actor_id", "relation_name": "`xapi`.`fact_learner_problem_summary`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.513806Z", "completed_at": "2024-03-05T16:58:22.518747Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.520587Z", "completed_at": "2024-03-05T16:58:22.520603Z"}], "thread_id": "Thread-1", "execution_time": 0.009983301162719727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.problem_results_uniqueness", "compiled": true, "compiled_code": "-- problem_results should only have one record for the following\n-- combination of values:\n-- actor_id, problem_id, course_id, org\nselect org, course_key, problem_id, actor_id, responses, count(*) as num_rows\nfrom `xapi`.`int_problem_results`\ngroup by org, course_key, problem_id, actor_id, responses\nhaving num_rows > 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.525704Z", "completed_at": "2024-03-05T16:58:22.530050Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.531626Z", "completed_at": "2024-03-05T16:58:22.531640Z"}], "thread_id": "Thread-1", "execution_time": 0.009119987487792969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.learner_problem_summary_uniqueness", "compiled": true, "compiled_code": "select org, course_key, problem_id, actor_id, count(*) as num_rows\nfrom `xapi`.`fact_learner_problem_summary`\ngroup by org, course_key, problem_id, actor_id\nhaving num_rows > 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.536599Z", "completed_at": "2024-03-05T16:58:22.549264Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.551002Z", "completed_at": "2024-03-05T16:58:22.551016Z"}], "thread_id": "Thread-1", "execution_time": 0.017464160919189453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.not_null_fact_learner_problem_summary_attempts.817beed32b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect attempts\nfrom `xapi`.`fact_learner_problem_summary`\nwhere attempts is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-03-05T16:58:22.555796Z", "completed_at": "2024-03-05T16:58:22.562074Z"}, {"name": "execute", "started_at": "2024-03-05T16:58:22.563740Z", "completed_at": "2024-03-05T16:58:22.563752Z"}], "thread_id": "Thread-1", "execution_time": 0.010865211486816406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.not_null_fact_learner_problem_summary_success.76b52cb2da", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect success\nfrom `xapi`.`fact_learner_problem_summary`\nwhere success is null\n\n\n", "relation_name": null}], "elapsed_time": 0.5384547710418701, "args": {"exclude": [], "compile": true, "warn_error_options": {"include": [], "exclude": []}, "strict_mode": false, "project_dir": "/home/runner/work/aspects-dbt/aspects-dbt", "print": true, "vars": {}, "favor_state": false, "indirect_selection": "eager", "show_resource_report": false, "write_json": true, "macro_debugging": false, "partial_parse_file_diff": true, "populate_cache": true, "log_path": "/home/runner/work/aspects-dbt/aspects-dbt/logs", "send_anonymous_usage_stats": true, "use_colors": true, "version_check": true, "log_level": "info", "quiet": false, "log_file_max_bytes": 10485760, "introspect": true, "defer": false, "empty_catalog": false, "log_level_file": "debug", "cache_selected_only": false, "invocation_command": "dbt docs generate", "partial_parse": true, "printer_width": 80, "profiles_dir": "./.github/", "use_colors_file": true, "select": [], "which": "generate", "enable_legacy_logger": false, "log_format": "default", "static_parser": true, "log_format_file": "debug", "static": false}}