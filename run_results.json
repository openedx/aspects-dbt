{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.0", "generated_at": "2023-12-18T18:59:41.850107Z", "invocation_id": "0cc984de-58ed-4e0c-aa31-1f948f8cd715", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.583586Z", "completed_at": "2023-12-18T18:59:41.593059Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.594553Z", "completed_at": "2023-12-18T18:59:41.594566Z"}], "thread_id": "Thread-1", "execution_time": 0.013712406158447266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_course_blocks", "compiled": true, "compiled_code": "select\n    courses.org as org,\n    courses.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    blocks.location as block_id,\n    blocks.block_name as block_name,\n    blocks.display_name_with_location as display_name_with_location\nfrom\n    `event_sink`.`course_block_names` blocks\n    join `event_sink`.`course_names` courses\n        on blocks.course_key = courses.course_key\nsettings join_algorithm='direct'", "relation_name": "`xapi`.`dim_course_blocks`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.598957Z", "completed_at": "2023-12-18T18:59:41.603520Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.604981Z", "completed_at": "2023-12-18T18:59:41.604989Z"}], "thread_id": "Thread-1", "execution_time": 0.008715629577636719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.xapi_events_all_parsed", "compiled": true, "compiled_code": "\n\nSELECT\n    event_id as event_id,\n    JSON_VALUE(event_str, '$.verb.id') as verb_id,\n    COALESCE(\n        NULLIF(JSON_VALUE(event_str, '$.actor.account.name'), ''),\n        NULLIF(JSON_VALUE(event_str, '$.actor.mbox'), ''),\n        JSON_VALUE(event_str, '$.actor.mbox_sha1sum')\n    ) as actor_id,\n    JSON_VALUE(event_str, '$.object.id') as object_id,\n    -- If the contextActivities parent is a course, use that. Otherwise use the object id for the course id\n    if(\n        JSON_VALUE(\n            event_str,\n            '$.context.contextActivities.parent[0].definition.type')\n                = 'http://adlnet.gov/expapi/activities/course',\n            JSON_VALUE(event_str, '$.context.contextActivities.parent[0].id'),\n            JSON_VALUE(event_str, '$.object.id')\n        ) as course_id,\n    coalesce(get_org_from_course_url(course_id), '') as org,\n    emission_time as emission_time,\n    event_str as event_str\nFROM `xapi`.`xapi_events_all`", "relation_name": "`xapi`.`xapi_events_all_parsed`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.609773Z", "completed_at": "2023-12-18T18:59:41.614143Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.615664Z", "completed_at": "2023-12-18T18:59:41.615671Z"}], "thread_id": "Thread-1", "execution_time": 0.008531808853149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.completion_events", "compiled": true, "compiled_code": "\n\nSELECT\n    event_id,\n    CAST(emission_time, 'DateTime') AS emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] AS course_key,\n    org,\n    verb_id,\n    JSON_VALUE(event_str, '$.result.extensions.\"https://w3id.org/xapi/cmi5/result/extensions/progress\"') AS progress_percent\nFROM `xapi`.`xapi_events_all_parsed`\nWHERE verb_id = 'http://adlnet.gov/expapi/verbs/progressed'", "relation_name": "`xapi`.`completion_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.620109Z", "completed_at": "2023-12-18T18:59:41.624523Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.626115Z", "completed_at": "2023-12-18T18:59:41.626123Z"}], "thread_id": "Thread-1", "execution_time": 0.00885152816772461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.enrollment_events", "compiled": true, "compiled_code": "\n\nSELECT\n    event_id,\n    cast(emission_time as DateTime) as emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] AS course_key,\n    org,\n    verb_id,\n    JSON_VALUE(event_str, '$.object.definition.extensions.\"https://w3id.org/xapi/acrossx/extensions/type\"') AS enrollment_mode\nFROM `xapi`.`xapi_events_all_parsed`\nWHERE verb_id IN (\n    'http://adlnet.gov/expapi/verbs/registered',\n    'http://id.tincanapi.com/verb/unregistered'\n)", "relation_name": "`xapi`.`enrollment_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.630567Z", "completed_at": "2023-12-18T18:59:41.635655Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.637120Z", "completed_at": "2023-12-18T18:59:41.637128Z"}], "thread_id": "Thread-1", "execution_time": 0.009299516677856445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.forum_events", "compiled": true, "compiled_code": "\n\nSELECT\n    event_id,\n    CAST(emission_time, 'DateTime') AS emission_time,\n    org,\n    splitByString('/', course_id)[-1] AS course_key,\n    object_id,\n    actor_id,\n    verb_id\nFROM `xapi`.`xapi_events_all_parsed`\nWHERE JSON_VALUE(event_str, '$.object.definition.type') = 'http://id.tincanapi.com/activitytype/discussion'", "relation_name": "`xapi`.`forum_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.641492Z", "completed_at": "2023-12-18T18:59:41.645795Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.647314Z", "completed_at": "2023-12-18T18:59:41.647321Z"}], "thread_id": "Thread-1", "execution_time": 0.008537769317626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.grading_events", "compiled": true, "compiled_code": "\n\n\nSELECT\n    event_id,\n    CAST(emission_time, 'DateTime') AS emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] AS course_key,\n    org,\n    verb_id,\n    JSONExtractFloat(event_str, 'result', 'score', 'scaled') AS scaled_score\nFROM `xapi`.`xapi_events_all_parsed`\nWHERE verb_id IN ('http://id.tincanapi.com/verb/earned', 'https://w3id.org/xapi/acrossx/verbs/evaluated')", "relation_name": "`xapi`.`grading_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.651696Z", "completed_at": "2023-12-18T18:59:41.655984Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.657448Z", "completed_at": "2023-12-18T18:59:41.657454Z"}], "thread_id": "Thread-1", "execution_time": 0.008376359939575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.problem_events", "compiled": true, "compiled_code": "\n\nSELECT\n    event_id,\n    cast(emission_time as DateTime) as emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] AS course_key,\n    org,\n    verb_id,\n    JSON_VALUE(event_str, '$.result.response') as responses,\n    JSON_VALUE(event_str, '$.result.score.scaled') as scaled_score,\n    if(\n        verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated',\n        cast(JSON_VALUE(event_str, '$.result.success') as Bool),\n        false\n    ) as success,\n    JSON_VALUE(event_str, '$.object.definition.interactionType') as interaction_type,\n    if(\n        verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated',\n        cast(JSON_VALUE(event_str, '$.object.definition.extensions.\"http://id.tincanapi.com/extension/attempt-id\"') as Int16),\n        0\n    ) as attempts\nFROM\n    `xapi`.`xapi_events_all_parsed`\nWHERE\n    verb_id in (\n        'https://w3id.org/xapi/acrossx/verbs/evaluated',\n        'http://adlnet.gov/expapi/verbs/passed',\n        'http://adlnet.gov/expapi/verbs/asked'\n    )", "relation_name": "`xapi`.`problem_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.661867Z", "completed_at": "2023-12-18T18:59:41.666114Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.667629Z", "completed_at": "2023-12-18T18:59:41.667636Z"}], "thread_id": "Thread-1", "execution_time": 0.008405923843383789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.video_playback_events", "compiled": true, "compiled_code": "\n\nSELECT\n    event_id,\n    CAST(emission_time, 'DateTime') AS emission_time,\n    actor_id,\n    object_id,\n    splitByString('/', course_id)[-1] AS course_key,\n    org,\n    verb_id,\n    ceil(CAST(coalesce(nullIf(JSON_VALUE(event_str, '$.result.extensions.\"https://w3id.org/xapi/video/extensions/time\"'), ''), nullIf(JSON_VALUE(event_str, '$.result.extensions.\"https://w3id.org/xapi/video/extensions/time-from\"'), ''), '0.0'), 'Decimal32(2)')) AS video_position\nFROM `xapi`.`xapi_events_all_parsed`\nWHERE (verb_id IN ('http://adlnet.gov/expapi/verbs/completed', 'http://adlnet.gov/expapi/verbs/initialized', 'http://adlnet.gov/expapi/verbs/terminated', 'https://w3id.org/xapi/video/verbs/paused', 'https://w3id.org/xapi/video/verbs/played', 'https://w3id.org/xapi/video/verbs/seeked')) AND (object_id LIKE '%video+block%')", "relation_name": "`xapi`.`video_playback_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.672060Z", "completed_at": "2023-12-18T18:59:41.676233Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.677713Z", "completed_at": "2023-12-18T18:59:41.677719Z"}], "thread_id": "Thread-1", "execution_time": 0.008406877517700195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.video_transcript_events", "compiled": true, "compiled_code": "\n\nSELECT\n    event_id,\n    CAST(emission_time, 'DateTime') AS emission_time,\n    org,\n    splitByString('/', course_id)[-1] AS course_key,\n    splitByString('/xblock/', object_id)[2] as video_id,\n    actor_id,\n    JSONExtractBool(event_str, 'result','extensions','https://w3id.org/xapi/video/extensions/cc-enabled') as cc_enabled\nFROM `xapi`.`xapi_events_all_parsed`\nWHERE\n    verb_id IN ('http://adlnet.gov/expapi/verbs/interacted')\n    AND JSONHas(event_str, 'result', 'extensions', 'https://w3id.org/xapi/video/extensions/cc-enabled')", "relation_name": "`xapi`.`video_transcript_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.682320Z", "completed_at": "2023-12-18T18:59:41.686640Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.688155Z", "completed_at": "2023-12-18T18:59:41.688161Z"}], "thread_id": "Thread-1", "execution_time": 0.008702993392944336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_completions", "compiled": true, "compiled_code": "with completions as (\n    select\n        emission_time,\n        org,\n        course_key,\n        actor_id,\n        progress_percent,\n        if(\n            object_id like '%/course/%',\n            splitByString('/course/', object_id)[-1],\n            splitByString('/xblock/', object_id)[-1]\n        ) as entity_id,\n        cast(progress_percent as Float)/100 as scaled_progress\n    from\n        `xapi`.`completion_events`\n)\n\nselect\n    completions.emission_time as emission_time,\n    completions.org as org,\n    completions.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    completions.entity_id as entity_id,\n    if(blocks.block_name != '', blocks.block_name, courses.course_name) as entity_name,\n    if(blocks.block_name != '', blocks.display_name_with_location, null) as entity_name_with_location,\n    completions.actor_id as actor_id,\n    cast(completions.scaled_progress as Float) as scaled_progress,\n    case\n        when scaled_progress >= 0.9 then '90-100%'\n        when scaled_progress >= 0.8 and scaled_progress < 0.9 then '80-89%'\n        when scaled_progress >= 0.7 and scaled_progress < 0.8 then '70-79%'\n        when scaled_progress >= 0.6 and scaled_progress < 0.7 then '60-69%'\n        when scaled_progress >= 0.5 and scaled_progress < 0.6 then '50-59%'\n        when scaled_progress >= 0.4 and scaled_progress < 0.5 then '40-49%'\n        when scaled_progress >= 0.3 and scaled_progress < 0.4 then '30-39%'\n        when scaled_progress >= 0.2 and scaled_progress < 0.3 then '20-29%'\n        when scaled_progress >= 0.1 and scaled_progress < 0.2 then '10-19%'\n        else '0-9%'\n    end as completion_bucket\nfrom\n    completions\n    join `event_sink`.`course_names` courses\n        on completions.course_key = courses.course_key\n    left join `event_sink`.`course_block_names` blocks\n        on completions.entity_id = blocks.location", "relation_name": "`xapi`.`fact_completions`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.692490Z", "completed_at": "2023-12-18T18:59:41.697204Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.698674Z", "completed_at": "2023-12-18T18:59:41.698681Z"}], "thread_id": "Thread-1", "execution_time": 0.008893728256225586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_enrollments", "compiled": true, "compiled_code": "with enrollments as (\n    select\n        emission_time,\n        org,\n        course_key,\n        actor_id,\n        enrollment_mode,\n        splitByString('/', verb_id)[-1] as enrollment_status\n    from\n        `xapi`.`enrollment_events`\n)\n\nselect\n    enrollments.emission_time as emission_time,\n    enrollments.org as org,\n    enrollments.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    enrollments.actor_id as actor_id,\n    enrollments.enrollment_mode as enrollment_mode,\n    enrollments.enrollment_status as enrollment_status\nfrom\n    enrollments\n    join `event_sink`.`course_names` courses\n        on enrollments.course_key = courses.course_key", "relation_name": "`xapi`.`fact_enrollments`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.703156Z", "completed_at": "2023-12-18T18:59:41.706903Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.708423Z", "completed_at": "2023-12-18T18:59:41.708429Z"}], "thread_id": "Thread-1", "execution_time": 0.008113384246826172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_forum_interactions", "compiled": true, "compiled_code": "select\n    forum.event_id as event_id,\n    forum.emission_time as emission_time,\n    forum.org as org,\n    forum.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    forum.object_id as object_id,\n    forum.actor_id as actor_id,\n    forum.verb_id as verb_id\nfrom\n    `xapi`.`forum_events` forum\n    join `event_sink`.`course_names` courses\n        on (forum.course_key = courses.course_key)", "relation_name": "`xapi`.`fact_forum_interactions`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.712804Z", "completed_at": "2023-12-18T18:59:41.717045Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.718504Z", "completed_at": "2023-12-18T18:59:41.718511Z"}], "thread_id": "Thread-1", "execution_time": 0.008307933807373047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_grades", "compiled": true, "compiled_code": "with grades as (\n    select\n        emission_time,\n        org,\n        course_key,\n        case\n            when object_id like '%/course/%' then 'course'\n            when object_id like '%@sequential+block@%' then 'subsection'\n            when object_id like '%@problem+block@%' then 'problem'\n        end as grade_type,\n        if(\n            grade_type = 'course',\n            splitByString('/course/', object_id)[-1],\n            splitByString('/xblock/', object_id)[-1]\n        ) as entity_id,\n        actor_id,\n        scaled_score\n    from\n        `xapi`.`grading_events`\n)\n\nselect\n    grades.emission_time as emission_time,\n    grades.org as org,\n    grades.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    grades.entity_id as entity_id,\n    if(blocks.block_name != '', blocks.block_name, courses.course_name) as entity_name,\n    if(blocks.block_name != '', blocks.display_name_with_location, null) as entity_name_with_location,\n    grades.grade_type as grade_type,\n    grades.actor_id as actor_id,\n    grades.scaled_score as scaled_score,\n    case\n        when scaled_score >= 0.9 then '90-100%'\n        when scaled_score >= 0.8 and scaled_score < 0.9 then '80-89%'\n        when scaled_score >= 0.7 and scaled_score < 0.8 then '70-79%'\n        when scaled_score >= 0.6 and scaled_score < 0.7 then '60-69%'\n        when scaled_score >= 0.5 and scaled_score < 0.6 then '50-59%'\n        when scaled_score >= 0.4 and scaled_score < 0.5 then '40-49%'\n        when scaled_score >= 0.3 and scaled_score < 0.4 then '30-39%'\n        when scaled_score >= 0.2 and scaled_score < 0.3 then '20-29%'\n        when scaled_score >= 0.1 and scaled_score < 0.2 then '10-19%'\n        else '0-9%'\n    end as grade_bucket\nfrom\n    grades\n    join `event_sink`.`course_names` courses\n        on grades.course_key = courses.course_key\n    left join `event_sink`.`course_block_names` blocks\n        on grades.entity_id = blocks.location", "relation_name": "`xapi`.`fact_grades`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.722886Z", "completed_at": "2023-12-18T18:59:41.727157Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.728637Z", "completed_at": "2023-12-18T18:59:41.728643Z"}], "thread_id": "Thread-1", "execution_time": 0.008478403091430664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_problem_responses", "compiled": true, "compiled_code": "with responses as (\n    select\n        emission_time,\n        org,\n        course_key,\n        \n   regexpExtract(object_id, 'xblock/([\\w\\d-\\+:]*@problem\\+block@[\\w\\d][^_]*)(_\\d_\\d)?', 1)\n as problem_id,\n        actor_id,\n        responses,\n        success,\n        attempts\n    from\n        `xapi`.`problem_events`\n    where\n        verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated'\n)\n\nselect\n    responses.emission_time as emission_time,\n    responses.org as org,\n    responses.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    responses.problem_id as problem_id,\n    blocks.block_name as problem_name,\n    blocks.display_name_with_location as problem_name_with_location,\n    responses.actor_id as actor_id,\n    responses.responses as responses,\n    responses.success as success,\n    responses.attempts as attempts\nfrom\n    responses\n    join `xapi`.`dim_course_blocks` blocks\n         on (responses.course_key = blocks.course_key\n             and responses.problem_id = blocks.block_id)\ngroup by\n    -- multi-part questions include an extra record for the response to the first\n    -- part of the question. this group by clause eliminates the duplicate record\n    emission_time,\n    org,\n    course_key,\n    course_name,\n    course_run,\n    problem_id,\n    problem_name,\n    problem_name_with_location,\n    actor_id,\n    responses,\n    success,\n    attempts", "relation_name": "`xapi`.`fact_problem_responses`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.732921Z", "completed_at": "2023-12-18T18:59:41.737099Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.738574Z", "completed_at": "2023-12-18T18:59:41.738581Z"}], "thread_id": "Thread-1", "execution_time": 0.008285045623779297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.int_problem_hints", "compiled": true, "compiled_code": "with hints as (\n    select\n        emission_time,\n        org,\n        course_key,\n        \n   regexpExtract(object_id, 'xblock/([\\w\\d-\\+:]*@problem\\+block@[\\w\\d][^_]*)(_\\d_\\d)?', 1)\n as problem_id,\n        actor_id,\n        case\n            when object_id like '%/hint%' then 'hint'\n            when object_id like '%/answer%' then 'answer'\n            else 'N/A'\n        end as help_type\n    from\n        `xapi`.`problem_events`\n    where\n        verb_id = 'http://adlnet.gov/expapi/verbs/asked'\n)\n\nselect\n    hints.emission_time as emission_time,\n    hints.org as org,\n    hints.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    hints.problem_id as problem_id,\n    blocks.block_name as problem_name,\n    blocks.display_name_with_location as problem_name_with_location,\n    hints.actor_id as actor_id,\n    hints.help_type as help_type\nfrom\n    hints\n    join `xapi`.`dim_course_blocks` blocks\n         on (hints.course_key = blocks.course_key\n             and hints.problem_id = blocks.block_id)", "relation_name": "`xapi`.`int_problem_hints`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.742894Z", "completed_at": "2023-12-18T18:59:41.746725Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.748203Z", "completed_at": "2023-12-18T18:59:41.748210Z"}], "thread_id": "Thread-1", "execution_time": 0.007906675338745117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_video_plays", "compiled": true, "compiled_code": "-- model to support number of watches per video\n-- ref: https://edx.readthedocs.io/projects/edx-insights/en/latest/Reference.html#engagement-computations\nwith plays as (\n    select\n        emission_time,\n        org,\n        course_key,\n        splitByString('/xblock/', object_id)[-1] as video_id,\n        actor_id\n    from\n        `xapi`.`video_playback_events`\n    where\n        verb_id = 'https://w3id.org/xapi/video/verbs/played'\n)\n\nselect\n    plays.emission_time as emission_time,\n    plays.org as org,\n    plays.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    plays.video_id as video_id,\n    blocks.block_name as video_name,\n    blocks.display_name_with_location as video_name_with_location,\n    plays.actor_id as actor_id\nfrom\n    plays\n    join `xapi`.`dim_course_blocks` blocks\n         on (plays.course_key = blocks.course_key\n             and plays.video_id = blocks.block_id)", "relation_name": "`xapi`.`fact_video_plays`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.752517Z", "completed_at": "2023-12-18T18:59:41.756325Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.757776Z", "completed_at": "2023-12-18T18:59:41.757783Z"}], "thread_id": "Thread-1", "execution_time": 0.007944583892822266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_transcript_usage", "compiled": true, "compiled_code": "select\n    transcripts.emission_time as emission_time,\n    transcripts.org as org,\n    transcripts.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    transcripts.video_id as video_id,\n    blocks.block_name as video_name,\n    blocks.display_name_with_location as video_name_with_location,\n    transcripts.actor_id as actor_id\nfrom\n    `xapi`.`video_transcript_events` transcripts\n    join `xapi`.`dim_course_blocks` blocks\n         on (transcripts.course_key = blocks.course_key\n             and transcripts.video_id = blocks.block_id)\nwhere\n    transcripts.cc_enabled", "relation_name": "`xapi`.`fact_transcript_usage`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.762098Z", "completed_at": "2023-12-18T18:59:41.767989Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.769475Z", "completed_at": "2023-12-18T18:59:41.769482Z"}], "thread_id": "Thread-1", "execution_time": 0.010015010833740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.accepted_values_fact_enrollments_enrollment_status__registered__unregistered.f8d10203f4", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        enrollment_status as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_enrollments`\n    group by enrollment_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'registered','unregistered'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.773794Z", "completed_at": "2023-12-18T18:59:41.778733Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.780241Z", "completed_at": "2023-12-18T18:59:41.780248Z"}], "thread_id": "Thread-1", "execution_time": 0.00907444953918457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.accepted_values_fact_grades_grade_type__course__subsection__problem.712bd50c2f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        grade_type as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_grades`\n    group by grade_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'course','subsection','problem'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.784611Z", "completed_at": "2023-12-18T18:59:41.788791Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.790250Z", "completed_at": "2023-12-18T18:59:41.790257Z"}], "thread_id": "Thread-1", "execution_time": 0.008361577987670898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.int_problem_results", "compiled": true, "compiled_code": "-- select one record per (learner, problem, course, org) tuple\n-- contains either the first successful attempt\n-- or the most recent unsuccessful attempt\n\n\n-- find the timestamp of the earliest successful response\n-- this will be used to pick the xAPI event corresponding to that submission\nwith successful_responses as (\n    select\n        org,\n        course_key,\n        problem_id,\n        actor_id,\n        min(emission_time) as first_success_at\n    from\n        `xapi`.`fact_problem_responses`\n    where\n        -- clickhouse throws an error when shortening this to `where success`\n        success = true\n    group by\n        org,\n        course_key,\n        problem_id,\n        actor_id\n),\n-- for all learners who did not submit a successful response,\n-- find the timestamp of the most recent unsuccessful response\nunsuccessful_responses as (\n    select\n        org,\n        course_key,\n        problem_id,\n        actor_id,\n        max(emission_time) as last_response_at\n    from\n        `xapi`.`fact_problem_responses`\n    where\n        actor_id not in (select distinct actor_id from successful_responses)\n    group by\n        org,\n        course_key,\n        problem_id,\n        actor_id\n),\n-- combine result sets for successful and unsuccessful problem submissions\nresponses as (\n    select\n        org,\n        course_key,\n        problem_id,\n        actor_id,\n        first_success_at as emission_time\n    from\n        successful_responses\n    union all\n    select\n        org,\n        course_key,\n        problem_id,\n        actor_id,\n        last_response_at as emission_time\n    from\n        unsuccessful_responses\n)\n\nselect\n    emission_time,\n    org,\n    course_key,\n    course_name,\n    course_run,\n    problem_id,\n    problem_name,\n    problem_name_with_location,\n    actor_id,\n    responses,\n    success,\n    attempts\nfrom\n    `xapi`.`fact_problem_responses` problem_responses\n    join responses\n        using (org, course_key, problem_id, actor_id, emission_time)", "relation_name": "`xapi`.`int_problem_results`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.794829Z", "completed_at": "2023-12-18T18:59:41.798734Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.800224Z", "completed_at": "2023-12-18T18:59:41.800231Z"}], "thread_id": "Thread-1", "execution_time": 0.007986783981323242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_learner_problem_summary", "compiled": true, "compiled_code": "-- summary table for a learner's performance on and interactions with a\n-- particular problem\nwith results_with_hints as (\n    select\n        org,\n        course_key,\n        course_name,\n        course_run,\n        problem_id,\n        problem_name,\n        problem_name_with_location,\n        actor_id,\n        success,\n        attempts,\n        0 as num_hints_displayed,\n        0 as num_answers_displayed\n    from `xapi`.`int_problem_results`\n    union all\n    select\n        org,\n        course_key,\n        course_name,\n        course_run,\n        problem_id,\n        problem_name,\n        problem_name_with_location,\n        actor_id,\n        null as success,\n        null as attempts,\n        case help_type\n            when 'hint' then 1\n            else 0\n        end as num_hints_displayed,\n        case help_type\n            when 'answer' then 1\n            else 0\n        end as num_answers_displayed\n    from `xapi`.`int_problem_hints`\n)\n\n-- n.b.: there should only be one row per org, course, problem, and actor\n-- in problem_results, so any(success) and any(attempts) should return the\n-- values from that part of the union and not the null values used as\n-- placeholders in the problem_hints part of the union\nselect\n    org,\n    course_key,\n    course_name,\n    course_run,\n    problem_id,\n    problem_name,\n    problem_name_with_location,\n    actor_id,\n    coalesce(any(success), false) as success,\n    coalesce(any(attempts), 0) as attempts,\n    sum(num_hints_displayed) as num_hints_displayed,\n    sum(num_answers_displayed) as num_answers_displayed\nfrom\n    results_with_hints\ngroup by\n    org,\n    course_key,\n    course_name,\n    course_run,\n    problem_id,\n    problem_name,\n    problem_name_with_location,\n    actor_id", "relation_name": "`xapi`.`fact_learner_problem_summary`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.804645Z", "completed_at": "2023-12-18T18:59:41.808236Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.809701Z", "completed_at": "2023-12-18T18:59:41.809708Z"}], "thread_id": "Thread-1", "execution_time": 0.007845640182495117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.problem_results_uniqueness", "compiled": true, "compiled_code": "-- problem_results should only have one record for the following\n-- combination of values:\n-- actor_id, problem_id, course_id, org\n\nselect\n    org,\n    course_key,\n    problem_id,\n    actor_id,\n    responses,\n    count(*) as num_rows\nfrom\n    `xapi`.`int_problem_results`\ngroup by\n    org,\n    course_key,\n    problem_id,\n    actor_id,\n    responses\nhaving num_rows > 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.813954Z", "completed_at": "2023-12-18T18:59:41.817387Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.818845Z", "completed_at": "2023-12-18T18:59:41.818852Z"}], "thread_id": "Thread-1", "execution_time": 0.007506847381591797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.learner_problem_summary_uniqueness", "compiled": true, "compiled_code": "select\n    org,\n    course_key,\n    problem_id,\n    actor_id,\n    count(*) as num_rows\nfrom\n    `xapi`.`fact_learner_problem_summary`\ngroup by\n    org,\n    course_key,\n    problem_id,\n    actor_id\nhaving num_rows > 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.823310Z", "completed_at": "2023-12-18T18:59:41.833537Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.835089Z", "completed_at": "2023-12-18T18:59:41.835096Z"}], "thread_id": "Thread-1", "execution_time": 0.014585733413696289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.not_null_fact_learner_problem_summary_attempts.817beed32b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect attempts\nfrom `xapi`.`fact_learner_problem_summary`\nwhere attempts is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-18T18:59:41.839470Z", "completed_at": "2023-12-18T18:59:41.844148Z"}, {"name": "execute", "started_at": "2023-12-18T18:59:41.845626Z", "completed_at": "2023-12-18T18:59:41.845633Z"}], "thread_id": "Thread-1", "execution_time": 0.008867740631103516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.not_null_fact_learner_problem_summary_success.76b52cb2da", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect success\nfrom `xapi`.`fact_learner_problem_summary`\nwhere success is null\n\n\n", "relation_name": null}], "elapsed_time": 0.4305236339569092, "args": {"warn_error_options": {"include": [], "exclude": []}, "which": "generate", "enable_legacy_logger": false, "log_path": "/home/runner/work/aspects-dbt/aspects-dbt/logs", "indirect_selection": "eager", "send_anonymous_usage_stats": true, "partial_parse": true, "log_format_file": "debug", "empty_catalog": false, "introspect": true, "log_file_max_bytes": 10485760, "log_level_file": "debug", "cache_selected_only": false, "log_format": "default", "strict_mode": false, "quiet": false, "project_dir": "/home/runner/work/aspects-dbt/aspects-dbt", "compile": true, "log_level": "info", "static_parser": true, "macro_debugging": false, "version_check": true, "use_colors_file": true, "populate_cache": true, "write_json": true, "profiles_dir": "./.github/", "printer_width": 80, "favor_state": false, "use_colors": true, "partial_parse_file_diff": true, "static": false, "invocation_command": "dbt docs generate", "defer": false, "show_resource_report": false, "exclude": [], "print": true, "vars": {}, "select": []}}