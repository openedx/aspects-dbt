{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.9", "generated_at": "2025-08-18T12:22:33.742395Z", "invocation_id": "03acd6d0-b6ba-494a-baae-2765c57deacf", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.263492Z", "completed_at": "2025-08-18T12:22:33.274143Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.274648Z", "completed_at": "2025-08-18T12:22:33.274661Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012228250503540039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_course_names", "compiled": true, "compiled_code": "\n\nwith\n    latest as (\n        select org, course_key, max(modified) as last_modified\n        from `event_sink`.`course_overviews`\n        group by org, course_key\n    )\nselect\n    course_key,\n    display_name as course_name,\n    splitByString('+', course_key)[-1] as course_run,\n    org,\n    JSONExtract(course_data_json, 'tags', 'String') as tags_str\nfrom `event_sink`.`course_overviews` co\ninner join\n    latest mr\n    on mr.org = co.org\n    and mr.course_key = co.course_key\n    and co.modified = mr.last_modified", "relation_name": "`xapi`.`dim_course_names`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.277114Z", "completed_at": "2025-08-18T12:22:33.283566Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.284114Z", "completed_at": "2025-08-18T12:22:33.284127Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008365631103515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_most_recent_course_blocks", "compiled": true, "compiled_code": "\n\nselect\n    location,\n    display_name as block_name,\n    toString(section)\n    || ':'\n    || toString(subsection)\n    || ':'\n    || toString(unit)\n    || ' - '\n    || display_name as display_name_with_location,\n    JSONExtractInt(xblock_data_json, 'section') as section,\n    JSONExtractInt(xblock_data_json, 'subsection') as subsection,\n    JSONExtractInt(xblock_data_json, 'unit') as unit,\n    JSONExtractBool(xblock_data_json, 'graded') as graded,\n    order as course_order,\n    course_key,\n    dump_id,\n    time_last_dumped\nfrom `event_sink`.`course_blocks` course_blocks\njoin\n    (\n        select location, max(time_last_dumped) as max_time_last_dumped\n        from `event_sink`.`course_blocks`\n        group by location\n    ) latest_course_blocks\n    on course_blocks.location = latest_course_blocks.location\n    and course_blocks.time_last_dumped = latest_course_blocks.max_time_last_dumped", "relation_name": "`xapi`.`dim_most_recent_course_blocks`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.286688Z", "completed_at": "2025-08-18T12:22:33.290669Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.291141Z", "completed_at": "2025-08-18T12:22:33.291148Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005638599395751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_most_recent_object_tags", "compiled": true, "compiled_code": "\nwith\n    latest as (\n        select id, max(time_last_dumped) as last_modified\n        from `event_sink`.`object_tag`\n        group by id\n    )\nselect id, object_id, taxonomy, _value, _export_id, lineage\nfrom `event_sink`.`object_tag` ot\ninner join latest mrot on mrot.id = ot.id and ot.time_last_dumped = mrot.last_modified", "relation_name": "`xapi`.`dim_most_recent_object_tags`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.293290Z", "completed_at": "2025-08-18T12:22:33.297060Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.297525Z", "completed_at": "2025-08-18T12:22:33.297532Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005282163619995117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_most_recent_tags", "compiled": true, "compiled_code": "\nwith\n    latest as (\n        select id, max(time_last_dumped) as last_modified\n        from `event_sink`.`tag`\n        group by id\n    )\nselect id, taxonomy, parent, value, external_id, lineage\nfrom `event_sink`.`tag` ot\ninner join latest mrot on mrot.id = ot.id and ot.time_last_dumped = mrot.last_modified", "relation_name": "`xapi`.`dim_most_recent_tags`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.299628Z", "completed_at": "2025-08-18T12:22:33.303524Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.303994Z", "completed_at": "2025-08-18T12:22:33.304004Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005348920822143555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_most_recent_taxonomies", "compiled": true, "compiled_code": "\nwith\n    latest as (\n        select id, max(time_last_dumped) as last_modified\n        from `event_sink`.`taxonomy`\n        group by id\n    )\nselect id, name\nfrom `event_sink`.`taxonomy` ot\ninner join latest mrot on mrot.id = ot.id and ot.time_last_dumped = mrot.last_modified", "relation_name": "`xapi`.`dim_most_recent_taxonomies`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.306170Z", "completed_at": "2025-08-18T12:22:33.312390Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.312955Z", "completed_at": "2025-08-18T12:22:33.312968Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007767677307128906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.user_pii", "compiled": true, "compiled_code": "\n\nwith\n    most_recent_user_profile as (\n        select user_id, max(time_last_dumped) as time_last_dumped\n        from `event_sink`.`user_profile`\n        group by user_id\n    )\nselect\n    ex.user_id as user_id,\n    if(\n        empty(ex.external_user_id),\n        concat('mailto:', email),\n        ex.external_user_id::String\n    ) as external_user_id,\n    up.username as username,\n    up.name as name,\n    up.email as email\nfrom most_recent_user_profile mrup\nleft outer join\n    `event_sink`.`external_id` ex on mrup.user_id = ex.user_id\nleft outer join\n    `event_sink`.`user_profile` up\n    on up.user_id = mrup.user_id\n    and up.time_last_dumped = mrup.time_last_dumped", "relation_name": "`xapi`.`user_pii`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.315600Z", "completed_at": "2025-08-18T12:22:33.320321Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.320781Z", "completed_at": "2025-08-18T12:22:33.320788Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006342172622680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.xapi_events_all_parsed", "compiled": true, "compiled_code": "\n\nselect\n    event_id as event_id,\n    toLowCardinality(JSON_VALUE(event::String, '$.verb.id')) as verb_id,\n    COALESCE(\n        NULLIF(JSON_VALUE(event::String, '$.actor.account.name'), ''),\n        NULLIF(JSON_VALUE(event::String, '$.actor.mbox'), ''),\n        JSON_VALUE(event::String, '$.actor.mbox_sha1sum')\n    ) as actor_id,\n    JSON_VALUE(event::String, '$.object.id') as object_id,\n    -- If the contextActivities parent is a course, use that. It can be a \"course\"\n    -- type, or a \"cmi.interaction\" type for multiple question problem submissions.\n    -- Otherwise use the object id for the course id.\n    toLowCardinality(\n        multiIf(\n            -- If the contextActivities parent is a course, use that\n            JSON_VALUE(\n                event::String, '$.context.contextActivities.parent[0].definition.type'\n            )\n            = 'http://adlnet.gov/expapi/activities/course',\n            JSON_VALUE(event::String, '$.context.contextActivities.parent[0].id'),\n            -- Else if the contextActivities parent is a GroupActivity, it's a multi\n            -- question problem and we use the grouping id\n            JSON_VALUE(\n                event::String, '$.context.contextActivities.parent[0].objectType'\n            )\n            in ('Activity', 'GroupActivity'),\n            JSON_VALUE(event::String, '$.context.contextActivities.grouping[0].id'),\n            -- Otherwise use the object id\n            JSON_VALUE(event::String, '$.object.id')\n        )\n    ) as course_id,\n    toLowCardinality(splitByString('/', course_id)[-1]) as course_key,\n    toLowCardinality(\n        coalesce(\n            get_org_from_course_url(course_id),\n            get_org_from_ccx_course_url(course_id),\n            ''\n        )\n    ) as org,\n    emission_time as emission_time,\n    event::String as event\nfrom `xapi`.`xapi_events_all`", "relation_name": "`xapi`.`xapi_events_all_parsed`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.323232Z", "completed_at": "2025-08-18T12:22:33.329328Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.329925Z", "completed_at": "2025-08-18T12:22:33.329936Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007791757583618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.a_tag", "compiled": true, "compiled_code": "select\n    'http://local.edly.io/xblock/block-v1:OpenedX+DemoX+DemoCourse+type@video+block@d5a54ce52f464acfa7a83ae155712cc3' as object_id,\n    'The Purpose, Power and Reach of the Open edX\u00ae Platform' as video_name,\n    \n    concat(\n        '<a href=\"', object_id, '\" target=\"_blank\">', video_name, '</a>'\n    )\n as object_a_tag\nfrom\n    system.numbers\nwhere object_a_tag != '<a href=\"http://local.edly.io/xblock/block-v1:OpenedX+DemoX+DemoCourse+type@video+block@d5a54ce52f464acfa7a83ae155712cc3\" target=\"_blank\">The Purpose, Power and Reach of the Open edX\u00ae Platform</a>'", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.332192Z", "completed_at": "2025-08-18T12:22:33.338774Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.339340Z", "completed_at": "2025-08-18T12:22:33.339357Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008225679397583008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.get_bucket", "compiled": true, "compiled_code": "select 0.95 as field\nfrom system.one\nwhere \n    case\n        when field >= 0.9\n        then '90-100%'\n        when field >= 0.8 and field < 0.9\n        then '80-89%'\n        when field >= 0.7 and field < 0.8\n        then '70-79%'\n        when field >= 0.6 and field < 0.7\n        then '60-69%'\n        when field >= 0.5 and field < 0.6\n        then '50-59%'\n        when field >= 0.4 and field < 0.5\n        then '40-49%'\n        when field >= 0.3 and field < 0.4\n        then '30-39%'\n        when field >= 0.2 and field < 0.3\n        then '20-29%'\n        when field >= 0.1 and field < 0.2\n        then '10-19%'\n        else '0-9%'\n    end != '90-100%'\n\nunion all \n\nselect 0.8 as field\nfrom system.one\nwhere \n    case\n        when field >= 0.9\n        then '90-100%'\n        when field >= 0.8 and field < 0.9\n        then '80-89%'\n        when field >= 0.7 and field < 0.8\n        then '70-79%'\n        when field >= 0.6 and field < 0.7\n        then '60-69%'\n        when field >= 0.5 and field < 0.6\n        then '50-59%'\n        when field >= 0.4 and field < 0.5\n        then '40-49%'\n        when field >= 0.3 and field < 0.4\n        then '30-39%'\n        when field >= 0.2 and field < 0.3\n        then '20-29%'\n        when field >= 0.1 and field < 0.2\n        then '10-19%'\n        else '0-9%'\n    end != '80-89%'\n\nunion all \n\nselect 0.700009 as field\nfrom system.one\nwhere \n    case\n        when field >= 0.9\n        then '90-100%'\n        when field >= 0.8 and field < 0.9\n        then '80-89%'\n        when field >= 0.7 and field < 0.8\n        then '70-79%'\n        when field >= 0.6 and field < 0.7\n        then '60-69%'\n        when field >= 0.5 and field < 0.6\n        then '50-59%'\n        when field >= 0.4 and field < 0.5\n        then '40-49%'\n        when field >= 0.3 and field < 0.4\n        then '30-39%'\n        when field >= 0.2 and field < 0.3\n        then '20-29%'\n        when field >= 0.1 and field < 0.2\n        then '10-19%'\n        else '0-9%'\n    end != '70-79%'\n\nunion all \n\nselect 0.69999 as field\nfrom system.one\nwhere \n    case\n        when field >= 0.9\n        then '90-100%'\n        when field >= 0.8 and field < 0.9\n        then '80-89%'\n        when field >= 0.7 and field < 0.8\n        then '70-79%'\n        when field >= 0.6 and field < 0.7\n        then '60-69%'\n        when field >= 0.5 and field < 0.6\n        then '50-59%'\n        when field >= 0.4 and field < 0.5\n        then '40-49%'\n        when field >= 0.3 and field < 0.4\n        then '30-39%'\n        when field >= 0.2 and field < 0.3\n        then '20-29%'\n        when field >= 0.1 and field < 0.2\n        then '10-19%'\n        else '0-9%'\n    end != '60-69%'\n\nunion all \n\nselect 0.5 as field\nfrom system.one\nwhere \n    case\n        when field >= 0.9\n        then '90-100%'\n        when field >= 0.8 and field < 0.9\n        then '80-89%'\n        when field >= 0.7 and field < 0.8\n        then '70-79%'\n        when field >= 0.6 and field < 0.7\n        then '60-69%'\n        when field >= 0.5 and field < 0.6\n        then '50-59%'\n        when field >= 0.4 and field < 0.5\n        then '40-49%'\n        when field >= 0.3 and field < 0.4\n        then '30-39%'\n        when field >= 0.2 and field < 0.3\n        then '20-29%'\n        when field >= 0.1 and field < 0.2\n        then '10-19%'\n        else '0-9%'\n    end != '50-59%'\n\nunion all \n\nselect 0.4123 as field\nfrom system.one\nwhere \n    case\n        when field >= 0.9\n        then '90-100%'\n        when field >= 0.8 and field < 0.9\n        then '80-89%'\n        when field >= 0.7 and field < 0.8\n        then '70-79%'\n        when field >= 0.6 and field < 0.7\n        then '60-69%'\n        when field >= 0.5 and field < 0.6\n        then '50-59%'\n        when field >= 0.4 and field < 0.5\n        then '40-49%'\n        when field >= 0.3 and field < 0.4\n        then '30-39%'\n        when field >= 0.2 and field < 0.3\n        then '20-29%'\n        when field >= 0.1 and field < 0.2\n        then '10-19%'\n        else '0-9%'\n    end != '40-49%'\n\nunion all \n\nselect 0.3000000000 as field\nfrom system.one\nwhere \n    case\n        when field >= 0.9\n        then '90-100%'\n        when field >= 0.8 and field < 0.9\n        then '80-89%'\n        when field >= 0.7 and field < 0.8\n        then '70-79%'\n        when field >= 0.6 and field < 0.7\n        then '60-69%'\n        when field >= 0.5 and field < 0.6\n        then '50-59%'\n        when field >= 0.4 and field < 0.5\n        then '40-49%'\n        when field >= 0.3 and field < 0.4\n        then '30-39%'\n        when field >= 0.2 and field < 0.3\n        then '20-29%'\n        when field >= 0.1 and field < 0.2\n        then '10-19%'\n        else '0-9%'\n    end != '30-39%'\n\nunion all \n\nselect 0.276734 as field\nfrom system.one\nwhere \n    case\n        when field >= 0.9\n        then '90-100%'\n        when field >= 0.8 and field < 0.9\n        then '80-89%'\n        when field >= 0.7 and field < 0.8\n        then '70-79%'\n        when field >= 0.6 and field < 0.7\n        then '60-69%'\n        when field >= 0.5 and field < 0.6\n        then '50-59%'\n        when field >= 0.4 and field < 0.5\n        then '40-49%'\n        when field >= 0.3 and field < 0.4\n        then '30-39%'\n        when field >= 0.2 and field < 0.3\n        then '20-29%'\n        when field >= 0.1 and field < 0.2\n        then '10-19%'\n        else '0-9%'\n    end != '20-29%'\n\nunion all \n\nselect 0.11111 as field\nfrom system.one\nwhere \n    case\n        when field >= 0.9\n        then '90-100%'\n        when field >= 0.8 and field < 0.9\n        then '80-89%'\n        when field >= 0.7 and field < 0.8\n        then '70-79%'\n        when field >= 0.6 and field < 0.7\n        then '60-69%'\n        when field >= 0.5 and field < 0.6\n        then '50-59%'\n        when field >= 0.4 and field < 0.5\n        then '40-49%'\n        when field >= 0.3 and field < 0.4\n        then '30-39%'\n        when field >= 0.2 and field < 0.3\n        then '20-29%'\n        when field >= 0.1 and field < 0.2\n        then '10-19%'\n        else '0-9%'\n    end != '10-19%'\n\nunion all \n\nselect 0.0342 as field\nfrom system.one\nwhere \n    case\n        when field >= 0.9\n        then '90-100%'\n        when field >= 0.8 and field < 0.9\n        then '80-89%'\n        when field >= 0.7 and field < 0.8\n        then '70-79%'\n        when field >= 0.6 and field < 0.7\n        then '60-69%'\n        when field >= 0.5 and field < 0.6\n        then '50-59%'\n        when field >= 0.4 and field < 0.5\n        then '40-49%'\n        when field >= 0.3 and field < 0.4\n        then '30-39%'\n        when field >= 0.2 and field < 0.3\n        then '20-29%'\n        when field >= 0.1 and field < 0.2\n        then '10-19%'\n        else '0-9%'\n    end != '0-9%'\n\nunion all \n\nselect 0.00000005 as field\nfrom system.one\nwhere \n    case\n        when field >= 0.9\n        then '90-100%'\n        when field >= 0.8 and field < 0.9\n        then '80-89%'\n        when field >= 0.7 and field < 0.8\n        then '70-79%'\n        when field >= 0.6 and field < 0.7\n        then '60-69%'\n        when field >= 0.5 and field < 0.6\n        then '50-59%'\n        when field >= 0.4 and field < 0.5\n        then '40-49%'\n        when field >= 0.3 and field < 0.4\n        then '30-39%'\n        when field >= 0.2 and field < 0.3\n        then '20-29%'\n        when field >= 0.1 and field < 0.2\n        then '10-19%'\n        else '0-9%'\n    end != '0-9%'\n\nunion all \n\nselect -0.1 as field\nfrom system.one\nwhere \n    case\n        when field >= 0.9\n        then '90-100%'\n        when field >= 0.8 and field < 0.9\n        then '80-89%'\n        when field >= 0.7 and field < 0.8\n        then '70-79%'\n        when field >= 0.6 and field < 0.7\n        then '60-69%'\n        when field >= 0.5 and field < 0.6\n        then '50-59%'\n        when field >= 0.4 and field < 0.5\n        then '40-49%'\n        when field >= 0.3 and field < 0.4\n        then '30-39%'\n        when field >= 0.2 and field < 0.3\n        then '20-29%'\n        when field >= 0.1 and field < 0.2\n        then '10-19%'\n        else '0-9%'\n    end != '0-9%'\n\nunion all \n\nselect 123 as field\nfrom system.one\nwhere \n    case\n        when field >= 0.9\n        then '90-100%'\n        when field >= 0.8 and field < 0.9\n        then '80-89%'\n        when field >= 0.7 and field < 0.8\n        then '70-79%'\n        when field >= 0.6 and field < 0.7\n        then '60-69%'\n        when field >= 0.5 and field < 0.6\n        then '50-59%'\n        when field >= 0.4 and field < 0.5\n        then '40-49%'\n        when field >= 0.3 and field < 0.4\n        then '30-39%'\n        when field >= 0.2 and field < 0.3\n        then '20-29%'\n        when field >= 0.1 and field < 0.2\n        then '10-19%'\n        else '0-9%'\n    end != '90-100%'", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.342005Z", "completed_at": "2025-08-18T12:22:33.347281Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.347753Z", "completed_at": "2025-08-18T12:22:33.347761Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006817817687988281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.get_problem_id", "compiled": true, "compiled_code": "select\n    'http://local.edly.io:8000/xblock/block-v1:edunext+demo+demo+ccx+type@problem+block@3c1646f7133a4c5fb4557d649e22c251'\n    as object_id\nfrom system.one\nwhere\n    \n    regexpExtract(\n        object_id, 'xblock/([\\w\\d-\\+:@]*@problem\\+block@[\\w\\d][^_\\/]*)(_\\d_\\d)?', 1\n    )\n\n    != 'block-v1:edunext+demo+demo+ccx+type@problem+block@3c1646f7133a4c5fb4557d649e22c251'\n\nunion all\n\nselect\n    'http://localhost:18000/course/course-v1:Org1+DemoX+1937e7'\n    as object_id\nfrom system.one\nwhere\n    \n    regexpExtract(\n        object_id, 'xblock/([\\w\\d-\\+:@]*@problem\\+block@[\\w\\d][^_\\/]*)(_\\d_\\d)?', 1\n    )\n\n    != ''\n\nunion all\n\nselect\n    'http://localhost:18000/xblock/block-v1:course-v1:Org0+DemoX+2bc51b+type@problem+block@09b07a8d'\n    as object_id\nfrom system.one\nwhere\n    \n    regexpExtract(\n        object_id, 'xblock/([\\w\\d-\\+:@]*@problem\\+block@[\\w\\d][^_\\/]*)(_\\d_\\d)?', 1\n    )\n\n    != 'block-v1:course-v1:Org0+DemoX+2bc51b+type@problem+block@09b07a8d'\n\nunion all\n\nselect\n    'http://localhost:18000/xblock/block-v1:course-v1:Org0+DemoX+2bc51b+type@problem+block@09b07a8d/answer'\n    as object_id\nfrom system.one\nwhere\n    \n    regexpExtract(\n        object_id, 'xblock/([\\w\\d-\\+:@]*@problem\\+block@[\\w\\d][^_\\/]*)(_\\d_\\d)?', 1\n    )\n\n    != 'block-v1:course-v1:Org0+DemoX+2bc51b+type@problem+block@09b07a8d'\n\nunion all\n\nselect\n    'http://localhost:18000/xblock/block-v1:course-v1:Org0+DemoX+81bba1+type@problem+block@20d3f709/hint/1'\n    as object_id\nfrom system.one\nwhere\n    \n    regexpExtract(\n        object_id, 'xblock/([\\w\\d-\\+:@]*@problem\\+block@[\\w\\d][^_\\/]*)(_\\d_\\d)?', 1\n    )\n\n    != 'block-v1:course-v1:Org0+DemoX+81bba1+type@problem+block@20d3f709'\n\nunion all\n\nselect\n    'http://localhost:18000/xblock/block-v1:course-v1:Org0+DemoX+81bba1+type@problem+block@20d3f709/hint/1'\n    as object_id\nfrom system.one\nwhere\n    \n    regexpExtract(\n        object_id, 'xblock/([\\w\\d-\\+:@]*@problem\\+block@[\\w\\d][^_\\/]*)(_\\d_\\d)?', 1\n    )\n\n    != 'block-v1:course-v1:Org0+DemoX+81bba1+type@problem+block@20d3f709'", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.350176Z", "completed_at": "2025-08-18T12:22:33.353086Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.353539Z", "completed_at": "2025-08-18T12:22:33.353545Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004394054412841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.get_problem_id_with_ccx", "compiled": true, "compiled_code": "select\n    'http://local.edly.io:8000/xblock/ccx-block-v1:edunext+demo+demo+ccx@1+type@problem+block@3c1646f7133a4c5fb4557d649e22c251'\n    as object_id\nfrom system.one\nwhere\n    \n    regexpExtract(\n        object_id, 'xblock/([\\w\\d-\\+:@]*@problem\\+block@[\\w\\d][^_\\/]*)(_\\d_\\d)?', 1\n    )\n\n    != 'ccx-block-v1:edunext+demo+demo+ccx@1+type@problem+block@3c1646f7133a4c5fb4557d649e22c251'", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.355692Z", "completed_at": "2025-08-18T12:22:33.359678Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.360131Z", "completed_at": "2025-08-18T12:22:33.360139Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005421638488769531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.section_from_display", "compiled": true, "compiled_code": "select \n    '1:2:3 - Course 1a2b3c' as display_name_with_location\nfrom system.one\nwhere \n    \n    concat(\n        splitByString(\n            ':', splitByString(' - ', display_name_with_location)[1], 1\n        )[1],\n        ':0:0'\n    )\n\n    != '1:0:0'\n\nunion all \n\nselect \n    '1:2:33 - Video 12' as display_name_with_location\nfrom system.one\nwhere \n    \n    concat(\n        splitByString(\n            ':', splitByString(' - ', display_name_with_location)[1], 1\n        )[1],\n        ':0:0'\n    )\n\n    != '1:0:0'\n\nunion all \n\nselect \n    '1:22:3 - Vertical 345' as display_name_with_location\nfrom system.one\nwhere \n    \n    concat(\n        splitByString(\n            ':', splitByString(' - ', display_name_with_location)[1], 1\n        )[1],\n        ':0:0'\n    )\n\n    != '1:0:0'\n\nunion all \n\nselect \n    '11:2:3 - Sequential 678' as display_name_with_location\nfrom system.one\nwhere \n    \n    concat(\n        splitByString(\n            ':', splitByString(' - ', display_name_with_location)[1], 1\n        )[1],\n        ':0:0'\n    )\n\n    != '11:0:0'", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.362211Z", "completed_at": "2025-08-18T12:22:33.366203Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.366663Z", "completed_at": "2025-08-18T12:22:33.366668Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005378007888793945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.subsection_from_display", "compiled": true, "compiled_code": "select \n    '1:2:3 - Chapter 123' as display_name_with_location\nfrom system.one\nwhere \n    \n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', display_name_with_location)[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n\n    != '1:2:0'\n\nunion all \n\nselect \n    '1:2:33 - Problem 456' as display_name_with_location\nfrom system.one\nwhere \n    \n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', display_name_with_location)[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n\n    != '1:2:0'\n\nunion all \n\nselect \n    '1:22:3 - Sequential 789' as display_name_with_location\nfrom system.one\nwhere \n    \n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', display_name_with_location)[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n\n    != '1:22:0'\n\nunion all \n\nselect \n    '11:2:3 - Vertical 123' as display_name_with_location\nfrom system.one\nwhere \n    \n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', display_name_with_location)[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n\n    != '11:2:0'", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.368730Z", "completed_at": "2025-08-18T12:22:33.373850Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.374404Z", "completed_at": "2025-08-18T12:22:33.374413Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006672859191894531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_course_block_names", "compiled": true, "compiled_code": "\nselect\n    location, block_name, course_key, graded, course_order, display_name_with_location\nfrom `xapi`.`dim_most_recent_course_blocks`", "relation_name": "`xapi`.`dim_course_block_names`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.376900Z", "completed_at": "2025-08-18T12:22:33.382099Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.382560Z", "completed_at": "2025-08-18T12:22:33.382566Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0068645477294921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_most_recent_course_tags", "compiled": true, "compiled_code": "\n\nwith\n    parsed_tags as (\n        select\n            course_key,\n            course_name,\n            arrayJoin(JSONExtractArrayRaw(tags_str))::Int32 as tag_id\n        from `xapi`.`dim_course_names`\n    )\nselect course_key, value as tag, course_name, mrt.name as taxonomy_name, lineage, tag_id\nfrom parsed_tags\ninner join `xapi`.`dim_most_recent_tags` mrot FINAL on mrot.id = tag_id\ninner join `xapi`.`dim_most_recent_taxonomies` mrt FINAL on mrt.id = mrot.taxonomy", "relation_name": "`xapi`.`dim_most_recent_course_tags`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.384719Z", "completed_at": "2025-08-18T12:22:33.387588Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.388012Z", "completed_at": "2025-08-18T12:22:33.388017Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004285097122192383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_user_pii", "compiled": true, "compiled_code": "select external_user_id, username, name, email from `xapi`.`user_pii` user_pii", "relation_name": "`xapi`.`dim_user_pii`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.390061Z", "completed_at": "2025-08-18T12:22:33.394063Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.394529Z", "completed_at": "2025-08-18T12:22:33.394537Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005425453186035156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.enrollment_events", "compiled": true, "compiled_code": "\n\nselect\n    event_id,\n    cast(emission_time as DateTime) as emission_time,\n    actor_id,\n    object_id,\n    course_key,\n    org,\n    verb_id,\n    toLowCardinality(\n        JSON_VALUE(\n            event,\n            '$.object.definition.extensions.\"https://w3id.org/xapi/acrossx/extensions/type\"'\n        )\n    ) as enrollment_mode,\n    splitByString('/', verb_id)[-1] as enrollment_status\nfrom `xapi`.`xapi_events_all_parsed`\nwhere\n    verb_id in (\n        'http://adlnet.gov/expapi/verbs/registered',\n        'http://id.tincanapi.com/verb/unregistered'\n    )", "relation_name": "`xapi`.`enrollment_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.396827Z", "completed_at": "2025-08-18T12:22:33.402583Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.403054Z", "completed_at": "2025-08-18T12:22:33.403064Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00729060173034668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_instance_actors", "compiled": true, "compiled_code": "\n\nselect\n    date_trunc('day', emission_time) as emission_day,\n    uniqCombinedState(actor_id) as actors_cnt\nfrom `xapi`.`xapi_events_all_parsed`\ngroup by emission_day", "relation_name": "`xapi`.`fact_instance_actors`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.405530Z", "completed_at": "2025-08-18T12:22:33.409439Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.409882Z", "completed_at": "2025-08-18T12:22:33.409888Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005499362945556641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_instance_courses", "compiled": true, "compiled_code": "\n\nselect\n    date_trunc('hour', emission_time) as emission_hour,\n    uniqCombinedState(course_id) as courses_cnt\nfrom `xapi`.`xapi_events_all_parsed`\ngroup by emission_hour", "relation_name": "`xapi`.`fact_instance_courses`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.412058Z", "completed_at": "2025-08-18T12:22:33.415847Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.416296Z", "completed_at": "2025-08-18T12:22:33.416303Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005273580551147461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_instance_events", "compiled": true, "compiled_code": "\n\nselect\n    date_trunc('day', emission_time) as emission_day,\n    uniqCombinedState(event_id) as events_cnt\nfrom `xapi`.`xapi_events_all_parsed`\ngroup by emission_day", "relation_name": "`xapi`.`fact_instance_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.418401Z", "completed_at": "2025-08-18T12:22:33.422614Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.423050Z", "completed_at": "2025-08-18T12:22:33.423055Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0056209564208984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.grading_events", "compiled": true, "compiled_code": "\n\n\nselect\n    event_id,\n    CAST(emission_time, 'DateTime') as emission_time,\n    actor_id,\n    object_id,\n    course_key,\n    org,\n    verb_id,\n    JSONExtractFloat(event, 'result', 'score', 'scaled') as scaled_score,\n    case\n        when\n            JSONExtractString(\n                event,\n                'result',\n                'extensions',\n                'http://www.tincanapi.co.uk/activitytypes/grade_classification'\n            )\n            = 'Fail'\n        then 'failed'\n        when\n            JSONExtractString(\n                event,\n                'result',\n                'extensions',\n                'http://www.tincanapi.co.uk/activitytypes/grade_classification'\n            )\n            = 'Pass'\n        then 'passed'\n        when\n            verb_id in (\n                'http://adlnet.gov/expapi/verbs/passed',\n                'http://adlnet.gov/expapi/verbs/failed'\n            )\n        then splitByString('/', verb_id)[-1]\n        else ''\n    end as approving_state\nfrom `xapi`.`xapi_events_all_parsed`\nwhere\n    verb_id in (\n        'http://id.tincanapi.com/verb/earned',\n        'https://w3id.org/xapi/acrossx/verbs/evaluated'\n    )\n    or (\n        verb_id in (\n            'http://adlnet.gov/expapi/verbs/passed',\n            'http://adlnet.gov/expapi/verbs/failed'\n        )\n        and JSON_VALUE(event::String, '$.object.definition.type')\n        = 'http://adlnet.gov/expapi/activities/course'\n    )", "relation_name": "`xapi`.`grading_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.425316Z", "completed_at": "2025-08-18T12:22:33.429487Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.429931Z", "completed_at": "2025-08-18T12:22:33.429936Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005687713623046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.navigation_events", "compiled": true, "compiled_code": "\n\nselect\n    event_id,\n    cast(emission_time as DateTime) as emission_time,\n    actor_id,\n    splitByString('/xblock/', object_id)[-1] as block_id,\n    course_key,\n    org,\n    verb_id,\n    JSONExtractString(event, 'object', 'definition', 'type') as object_type,\n    -- clicking a link and selecting a module outline have no starting-position field\n    if(\n        object_type in (\n            'http://adlnet.gov/expapi/activities/link',\n            'http://adlnet.gov/expapi/activities/module'\n        ),\n        0,\n        JSONExtractInt(\n            event,\n            'context',\n            'extensions',\n            'http://id.tincanapi.com/extension/starting-position'\n        )\n    ) as starting_position,\n    JSONExtractString(\n        event, 'context', 'extensions', 'http://id.tincanapi.com/extension/ending-point'\n    ) as ending_point\nfrom `xapi`.`xapi_events_all_parsed`\nwhere verb_id in ('https://w3id.org/xapi/dod-isd/verbs/navigated')", "relation_name": "`xapi`.`navigation_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.432073Z", "completed_at": "2025-08-18T12:22:33.436900Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.437510Z", "completed_at": "2025-08-18T12:22:33.437521Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00645899772644043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.video_playback_events", "compiled": true, "compiled_code": "\n\nwith\n    final_results as (\n        select\n            event_id,\n            emission_time,\n            actor_id,\n            object_id,\n            course_key,\n            org,\n            verb_id,\n            ceil(\n                CAST(\n                    coalesce(\n                        nullIf(\n                            JSON_VALUE(\n                                event,\n                                '$.result.extensions.\"https://w3id.org/xapi/video/extensions/time\"'\n                            ),\n                            ''\n                        ),\n                        nullIf(\n                            JSON_VALUE(\n                                event,\n                                '$.result.extensions.\"https://w3id.org/xapi/video/extensions/time-from\"'\n                            ),\n                            ''\n                        ),\n                        '0.0'\n                    ),\n                    'Decimal32(2)'\n                )\n            ) as _video_position,\n            JSONExtractInt(\n                event,\n                'context',\n                'extensions',\n                'https://w3id.org/xapi/video/extensions/length'\n            ) as video_duration\n        from `xapi`.`xapi_events_all_parsed`\n        where\n            (\n                verb_id in (\n                    'http://adlnet.gov/expapi/verbs/completed',\n                    'http://adlnet.gov/expapi/verbs/initialized',\n                    'http://adlnet.gov/expapi/verbs/terminated',\n                    'https://w3id.org/xapi/video/verbs/paused',\n                    'https://w3id.org/xapi/video/verbs/played',\n                    'https://w3id.org/xapi/video/verbs/seeked'\n                )\n            )\n            and (object_id like '%video+block%')\n    )\nselect\n    event_id,\n    emission_time as emission_time_long,\n    CAST(emission_time, 'DateTime') as emission_time,\n    actor_id,\n    object_id,\n    course_key,\n    org,\n    verb_id,\n    -- reset video position when it has been re-played from the end\n    case\n        when\n            _video_position = video_duration\n            and verb_id = 'https://w3id.org/xapi/video/verbs/played'\n        then 0\n        else _video_position\n    end as video_position,\n    video_duration\nfrom final_results", "relation_name": "`xapi`.`video_playback_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.440181Z", "completed_at": "2025-08-18T12:22:33.444235Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.444690Z", "completed_at": "2025-08-18T12:22:33.444698Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0056111812591552734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_course_blocks", "compiled": true, "compiled_code": "with\n    dim_course_blocks as (\n        select\n            courses.org as org,\n            courses.course_key as course_key,\n            courses.course_name as course_name,\n            courses.course_run as course_run,\n            blocks.location as block_id,\n            blocks.block_name as block_name,\n            \n    concat(\n        splitByString(\n            ':', splitByString(' - ', blocks.display_name_with_location)[1], 1\n        )[1],\n        ':0:0'\n    )\n\n            as section_number,\n            \n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', blocks.display_name_with_location)[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n\n            as subsection_number,\n            splitByString(' - ', blocks.display_name_with_location)[\n                1\n            ] as hierarchy_location,\n            blocks.display_name_with_location as display_name_with_location,\n            course_order,\n            graded,\n            case\n                when block_id like '%@chapter+block@%'\n                then 'section'\n                when block_id like '%@sequential+block@%'\n                then 'subsection'\n                when block_id like '%@vertical+block@%'\n                then 'unit'\n                else regexpExtract(block_id, '@([^+]+)\\+block@', 1)\n            end as block_type\n        from `xapi`.`dim_course_block_names` blocks\n        join\n            `xapi`.`dim_course_names` courses\n            on blocks.course_key = courses.course_key\n    )\nselect\n    blocks.org as org,\n    blocks.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    blocks.block_id as block_id,\n    blocks.block_name as block_name,\n    blocks.section_number as section_number,\n    blocks.subsection_number as subsection_number,\n    blocks.hierarchy_location as hierarchy_location,\n    blocks.display_name_with_location as display_name_with_location,\n    blocks.course_order as course_order,\n    blocks.graded as graded,\n    blocks.block_type as block_type,\n    section_blocks.display_name_with_location as section_with_name,\n    subsection_blocks.display_name_with_location as subsection_with_name\nfrom dim_course_blocks as blocks\nleft join\n    dim_course_blocks as section_blocks\n    on (\n        blocks.section_number = section_blocks.hierarchy_location\n        and blocks.org = section_blocks.org\n        and blocks.course_key = section_blocks.course_key\n        and section_blocks.block_id like '%@chapter+block@%'\n    )\nleft join\n    dim_course_blocks as subsection_blocks\n    on (\n        blocks.subsection_number = subsection_blocks.hierarchy_location\n        and blocks.org = subsection_blocks.org\n        and blocks.course_key = subsection_blocks.course_key\n        and subsection_blocks.block_id like '%@sequential+block@%'\n    )", "relation_name": "`xapi`.`dim_course_blocks`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.447017Z", "completed_at": "2025-08-18T12:22:33.450549Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.451011Z", "completed_at": "2025-08-18T12:22:33.451017Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004987955093383789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_most_recent_enrollment", "compiled": true, "compiled_code": "\n\nwith\n    ranked_enrollments as (\n        select\n            emission_time,\n            org,\n            course_key,\n            actor_id,\n            enrollment_mode,\n            enrollment_status,\n            row_number() over (\n                partition by org, course_key, actor_id order by emission_time desc\n            ) as rn\n        from `xapi`.`enrollment_events`\n    )\n\nselect org, course_key, actor_id, enrollment_status, enrollment_mode, emission_time\nfrom ranked_enrollments\nwhere rn = 1", "relation_name": "`xapi`.`dim_most_recent_enrollment`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.453308Z", "completed_at": "2025-08-18T12:22:33.456658Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.457085Z", "completed_at": "2025-08-18T12:22:33.457090Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004851341247558594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_enrollments", "compiled": true, "compiled_code": "select\n    enrollments.emission_time as emission_time,\n    enrollments.org as org,\n    enrollments.course_key as course_key,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    enrollments.actor_id as actor_id,\n    enrollments.enrollment_mode as enrollment_mode,\n    enrollments.enrollment_status as enrollment_status,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom `xapi`.`enrollment_events` enrollments\njoin\n    `xapi`.`dim_course_names` courses on enrollments.course_key = courses.course_key\nleft outer join\n    `xapi`.`dim_user_pii` users\n    on (actor_id like 'mailto:%' and SUBSTRING(actor_id, 8) = users.email)\n    or actor_id = toString(users.external_user_id)", "relation_name": "`xapi`.`fact_enrollments`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.459439Z", "completed_at": "2025-08-18T12:22:33.466130Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.466648Z", "completed_at": "2025-08-18T12:22:33.466656Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008306741714477539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_instance_enrollments", "compiled": true, "compiled_code": "\n\nwith\n    enrollments as (\n        select\n            emission_time,\n            course_key,\n            enrollment_mode,\n            splitByString('/', verb_id)[-1] as enrollment_status\n        from `xapi`.`enrollment_events`\n    )\n\nselect\n    date_trunc('day', emission_time) as emission_day,\n    enrollments.course_key,\n    enrollments.enrollment_mode as enrollment_mode,\n    enrollments.enrollment_status as enrollment_status,\n    count() as course_enrollment_mode_status_cnt\nfrom enrollments\ngroup by emission_day, course_key, enrollment_mode, enrollment_status", "relation_name": "`xapi`.`fact_instance_enrollments`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.469136Z", "completed_at": "2025-08-18T12:22:33.481992Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.482515Z", "completed_at": "2025-08-18T12:22:33.482523Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014481306076049805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.accepted_values_enrollment_events_enrollment_status__registered__unregistered.6e8262fef1", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        enrollment_status as value_field,\n        count(*) as n_records\n\n    from `xapi`.`enrollment_events`\n    group by enrollment_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'registered','unregistered'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.484746Z", "completed_at": "2025-08-18T12:22:33.488442Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.488875Z", "completed_at": "2025-08-18T12:22:33.488880Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005148649215698242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_learner_most_recent_course_grade", "compiled": true, "compiled_code": "\n\nwith\n    ranked_grades as (\n        select\n            emission_time,\n            org,\n            course_key,\n            actor_id,\n            scaled_score as course_grade,\n            row_number() over (\n                partition by org, course_key, actor_id order by emission_time desc\n            ) as rn\n        from `xapi`.`grading_events`\n        where\n            object_id like '%/course/%'\n            and (\n                (\n                    verb_id = 'http://adlnet.gov/expapi/verbs/passed'\n                    and scaled_score <> 0\n                )\n                or (verb_id <> 'http://adlnet.gov/expapi/verbs/passed')\n            )\n    )\n\nselect org, course_key, actor_id, course_grade, emission_time\nfrom ranked_grades\nwhere rn = 1", "relation_name": "`xapi`.`dim_learner_most_recent_course_grade`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.490979Z", "completed_at": "2025-08-18T12:22:33.494927Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.495454Z", "completed_at": "2025-08-18T12:22:33.495461Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00547480583190918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_learner_most_recent_course_state", "compiled": true, "compiled_code": "\n\nwith\n    ranked_status as (\n        select\n            org,\n            course_key,\n            actor_id,\n            approving_state,\n            emission_time,\n            row_number() over (\n                partition by org, course_key, actor_id order by emission_time desc\n            ) as rn\n        from `xapi`.`grading_events`\n        where not empty(approving_state)\n    )\n\nselect org, course_key, actor_id, approving_state, emission_time\nfrom ranked_status\nwhere rn = 1", "relation_name": "`xapi`.`dim_learner_most_recent_course_state`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.498467Z", "completed_at": "2025-08-18T12:22:33.502817Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.503275Z", "completed_at": "2025-08-18T12:22:33.503282Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0063097476959228516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_learner_last_course_visit", "compiled": true, "compiled_code": "\n\nselect org, course_key, actor_id, max(emission_time) as emission_time\nfrom `xapi`.`navigation_events`\ngroup by org, course_key, actor_id", "relation_name": "`xapi`.`dim_learner_last_course_visit`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.505465Z", "completed_at": "2025-08-18T12:22:33.509470Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.509905Z", "completed_at": "2025-08-18T12:22:33.509911Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005469560623168945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_video_segments", "compiled": true, "compiled_code": "\n\nwith\n    data as (\n        select\n            event_id,\n            org,\n            course_key,\n            actor_id,\n            emission_time_long,\n            video_position,\n            object_id,\n            video_duration,\n            if(\n                verb_id = 'https://w3id.org/xapi/video/verbs/played', 'start', 'end'\n            ) as verb\n        from `xapi`.`video_playback_events`\n        where verb_id <> 'http://adlnet.gov/expapi/verbs/initialized'\n    ),\n    matches as (\n        select\n            *,\n            first_value(event_id) filter (where verb = 'start') over (\n                partition by org, course_key, actor_id, object_id\n                order by emission_time_long, verb\n                rows between 1 following and unbounded following\n            ) as matching_event_id\n        from data\n    ),\n    final_matches as (\n        select\n            *,\n            last_value(event_id) over (\n                partition by matching_event_id, object_id, actor_id\n                order by emission_time_long\n                rows between unbounded preceding and unbounded following\n            ) as end_id\n        from matches\n        order by emission_time_long\n    ),\n    ends as (select * from final_matches where verb = 'end' and event_id = end_id),\n    starts as (select * from final_matches where verb = 'start'),\n    final_results as (\n        select\n            starts.event_id as event_id,\n            starts.org as org,\n            starts.course_key as course_key,\n            starts.actor_id as actor_id,\n            starts.object_id as object_id,\n            starts.video_duration as video_duration,\n            arrayJoin(\n                range(\n                    cast(starts.video_position as int) + 1,\n                    cast(ends.video_position as int) + 1,\n                    1\n                )\n            ) as watched_segment\n        from starts\n        inner join ends on starts.end_id = ends.event_id\n        where ends.video_position > starts.video_position\n    )\nselect\n    org,\n    course_key,\n    actor_id,\n    object_id,\n    video_duration,\n    watched_segment,\n    count(1) as watch_count\nfrom final_results\ngroup by org, course_key, actor_id, object_id, video_duration, watched_segment", "relation_name": "`xapi`.`fact_video_segments`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.512129Z", "completed_at": "2025-08-18T12:22:33.518098Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.518578Z", "completed_at": "2025-08-18T12:22:33.518584Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007602691650390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_navigation_completion", "compiled": true, "compiled_code": "-- number of learners who've viewed all pages in a section/subsection\nwith\n    visited_subsection_pages as (\n        select distinct\n            date(navigation.emission_time) as visited_on,\n            navigation.org as org,\n            navigation.course_key as course_key,\n            blocks.course_name as course_name,\n            blocks.course_run as course_run,\n            \n    concat(\n        splitByString(\n            ':', splitByString(' - ', blocks.display_name_with_location)[1], 1\n        )[1],\n        ':0:0'\n    )\n\n            as section_number,\n            \n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', blocks.display_name_with_location)[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n\n            as subsection_number,\n            navigation.actor_id as actor_id,\n            navigation.block_id as block_id,\n            users.username as username,\n            users.name as name,\n            users.email as email\n        from `xapi`.`navigation_events` navigation\n        join\n            `xapi`.`dim_course_blocks` blocks\n            on (\n                navigation.course_key = blocks.course_key\n                and navigation.block_id = blocks.block_id\n            )\n        left outer join\n            `xapi`.`dim_user_pii` users\n            on (actor_id like 'mailto:%' and SUBSTRING(actor_id, 8) = users.email)\n            or actor_id = toString(users.external_user_id)\n    ),\n    pages_per_subsection as (\n        select * from (\n    with\n        items_per_subsection as (\n            select\n                org,\n                course_key,\n                section_number,\n                subsection_number,\n                min(course_order) as course_order,\n                graded,\n                count(*) as item_count\n            from `xapi`.`dim_course_blocks`\n            where block_id like '%@vertical+block@%'\n            group by org, course_key, section_number, subsection_number, graded\n        )\n\n    select\n        ips.org as org,\n        ips.course_key as course_key,\n        ips.section_number as section_number,\n        section_blocks.display_name_with_location as section_with_name,\n        ips.subsection_number as subsection_number,\n        subsection_blocks.display_name_with_location as subsection_with_name,\n        ips.course_order as course_order,\n        ips.graded as graded,\n        ips.item_count as item_count,\n        subsection_blocks.block_id as subsection_block_id,\n        section_blocks.block_id as section_block_id,\n        section_blocks.course_order as section_course_order,\n        subsection_blocks.course_order as subsection_course_order\n    from items_per_subsection ips\n    left join\n        `xapi`.`dim_course_blocks` section_blocks\n        on (\n            ips.section_number = section_blocks.hierarchy_location\n            and ips.org = section_blocks.org\n            and ips.course_key = section_blocks.course_key\n            and section_blocks.block_id like '%@chapter+block@%'\n        )\n    left join\n        `xapi`.`dim_course_blocks` subsection_blocks\n        on (\n            ips.subsection_number = subsection_blocks.hierarchy_location\n            and ips.org = subsection_blocks.org\n            and ips.course_key = subsection_blocks.course_key\n            and subsection_blocks.block_id like '%@sequential+block@%'\n        )\n)\n    )\nselect\n    visits.visited_on as visited_on,\n    visits.org as org,\n    visits.course_key as course_key,\n    visits.course_name as course_name,\n    visits.course_run as course_run,\n    pages.section_with_name as section_with_name,\n    pages.subsection_with_name as subsection_with_name,\n    pages.course_order as course_order,\n    pages.item_count as page_count,\n    visits.actor_id as actor_id,\n    visits.block_id as block_id,\n    visits.username as username,\n    visits.name as name,\n    visits.email as email\nfrom visited_subsection_pages visits\njoin\n    pages_per_subsection pages\n    on (\n        visits.org = pages.org\n        and visits.course_key = pages.course_key\n        and visits.section_number = pages.section_number\n        and visits.subsection_number = pages.subsection_number\n    )", "relation_name": "`xapi`.`fact_navigation_completion`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.520680Z", "completed_at": "2025-08-18T12:22:33.525287Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.525776Z", "completed_at": "2025-08-18T12:22:33.525781Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006112098693847656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_section_page_engagement", "compiled": true, "compiled_code": "\n\nwith\n    fact_navigation as (\n        select\n            navigation.emission_time as emission_time,\n            navigation.org as org,\n            navigation.course_key as course_key,\n            navigation.actor_id as actor_id,\n            navigation.block_id as block_id,\n            blocks.display_name_with_location as block_name_with_location\n        from `xapi`.`navigation_events` navigation\n        join\n            `xapi`.`dim_course_blocks` blocks\n            on (\n                navigation.course_key = blocks.course_key\n                and navigation.block_id = blocks.block_id\n            )\n    ),\n    visited_subsection_pages as (\n        select distinct\n            date(emission_time) as visited_on,\n            org,\n            course_key,\n            \n    concat(\n        splitByString(\n            ':', splitByString(' - ', block_name_with_location)[1], 1\n        )[1],\n        ':0:0'\n    )\n as section_number,\n            \n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', block_name_with_location)[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n\n            as subsection_number,\n            actor_id,\n            block_id\n        from fact_navigation\n    ),\n    pages_per_subsection as (\n        select * from (\n    with\n        items_per_subsection as (\n            select\n                org,\n                course_key,\n                section_number,\n                subsection_number,\n                min(course_order) as course_order,\n                graded,\n                count(*) as item_count\n            from `xapi`.`dim_course_blocks`\n            where block_id like '%@vertical+block@%'\n            group by org, course_key, section_number, subsection_number, graded\n        )\n\n    select\n        ips.org as org,\n        ips.course_key as course_key,\n        ips.section_number as section_number,\n        section_blocks.display_name_with_location as section_with_name,\n        ips.subsection_number as subsection_number,\n        subsection_blocks.display_name_with_location as subsection_with_name,\n        ips.course_order as course_order,\n        ips.graded as graded,\n        ips.item_count as item_count,\n        subsection_blocks.block_id as subsection_block_id,\n        section_blocks.block_id as section_block_id,\n        section_blocks.course_order as section_course_order,\n        subsection_blocks.course_order as subsection_course_order\n    from items_per_subsection ips\n    left join\n        `xapi`.`dim_course_blocks` section_blocks\n        on (\n            ips.section_number = section_blocks.hierarchy_location\n            and ips.org = section_blocks.org\n            and ips.course_key = section_blocks.course_key\n            and section_blocks.block_id like '%@chapter+block@%'\n        )\n    left join\n        `xapi`.`dim_course_blocks` subsection_blocks\n        on (\n            ips.subsection_number = subsection_blocks.hierarchy_location\n            and ips.org = subsection_blocks.org\n            and ips.course_key = subsection_blocks.course_key\n            and subsection_blocks.block_id like '%@sequential+block@%'\n        )\n)\n    ),\n    fact_navigation_completion as (\n        select\n            visits.visited_on as visited_on,\n            visits.org as org,\n            visits.course_key as course_key,\n            pages.section_with_name as section_with_name,\n            pages.subsection_with_name as subsection_with_name,\n            pages.item_count as item_count,\n            visits.actor_id as actor_id,\n            visits.block_id as block_id,\n            pages.section_block_id as section_block_id\n        from visited_subsection_pages visits\n        join\n            pages_per_subsection pages\n            on (\n                visits.org = pages.org\n                and visits.course_key = pages.course_key\n                and visits.section_number = pages.section_number\n                and visits.subsection_number = pages.subsection_number\n            )\n    ),\n    subsection_counts as (\n        select\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            count(distinct block_id) as pages_visited,\n            case\n                when pages_visited = 0\n                then 'No pages viewed yet'\n                when pages_visited = item_count\n                then 'All pages viewed'\n                else 'At least one page viewed'\n            end as engagement_level,\n            section_block_id\n        from fact_navigation_completion\n        group by\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            section_block_id\n    ),\n    section_counts as (\n        select\n            org,\n            course_key,\n            actor_id,\n            sum(item_count) as item_count,\n            sum(pages_visited) as pages_visited,\n            case\n                when pages_visited = 0\n                then 'No pages viewed yet'\n                when pages_visited = item_count\n                then 'All pages viewed'\n                else 'At least one page viewed'\n            end as engagement_level,\n            section_block_id\n        from subsection_counts\n        group by org, course_key, section_block_id, actor_id\n    )\n\nselect org, course_key, actor_id, section_block_id, engagement_level\nfrom section_counts", "relation_name": "`xapi`.`fact_section_page_engagement`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.528418Z", "completed_at": "2025-08-18T12:22:33.533688Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.534144Z", "completed_at": "2025-08-18T12:22:33.534151Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00675511360168457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_subsection_page_engagement", "compiled": true, "compiled_code": "\n\nwith\n    fact_navigation as (\n        select\n            navigation.emission_time as emission_time,\n            navigation.org as org,\n            navigation.course_key as course_key,\n            navigation.actor_id as actor_id,\n            navigation.block_id as block_id,\n            blocks.display_name_with_location as block_name_with_location\n        from `xapi`.`navigation_events` navigation\n        join\n            `xapi`.`dim_course_blocks` blocks\n            on (\n                navigation.course_key = blocks.course_key\n                and navigation.block_id = blocks.block_id\n            )\n    ),\n    visited_subsection_pages as (\n        select distinct\n            date(emission_time) as visited_on,\n            org,\n            course_key,\n            \n    concat(\n        splitByString(\n            ':', splitByString(' - ', block_name_with_location)[1], 1\n        )[1],\n        ':0:0'\n    )\n as section_number,\n            \n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', block_name_with_location)[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n\n            as subsection_number,\n            actor_id,\n            block_id\n        from fact_navigation\n    ),\n    pages_per_subsection as (\n        select * from (\n    with\n        items_per_subsection as (\n            select\n                org,\n                course_key,\n                section_number,\n                subsection_number,\n                min(course_order) as course_order,\n                graded,\n                count(*) as item_count\n            from `xapi`.`dim_course_blocks`\n            where block_id like '%@vertical+block@%'\n            group by org, course_key, section_number, subsection_number, graded\n        )\n\n    select\n        ips.org as org,\n        ips.course_key as course_key,\n        ips.section_number as section_number,\n        section_blocks.display_name_with_location as section_with_name,\n        ips.subsection_number as subsection_number,\n        subsection_blocks.display_name_with_location as subsection_with_name,\n        ips.course_order as course_order,\n        ips.graded as graded,\n        ips.item_count as item_count,\n        subsection_blocks.block_id as subsection_block_id,\n        section_blocks.block_id as section_block_id,\n        section_blocks.course_order as section_course_order,\n        subsection_blocks.course_order as subsection_course_order\n    from items_per_subsection ips\n    left join\n        `xapi`.`dim_course_blocks` section_blocks\n        on (\n            ips.section_number = section_blocks.hierarchy_location\n            and ips.org = section_blocks.org\n            and ips.course_key = section_blocks.course_key\n            and section_blocks.block_id like '%@chapter+block@%'\n        )\n    left join\n        `xapi`.`dim_course_blocks` subsection_blocks\n        on (\n            ips.subsection_number = subsection_blocks.hierarchy_location\n            and ips.org = subsection_blocks.org\n            and ips.course_key = subsection_blocks.course_key\n            and subsection_blocks.block_id like '%@sequential+block@%'\n        )\n)\n    ),\n    fact_navigation_completion as (\n        select\n            visits.visited_on as visited_on,\n            visits.org as org,\n            visits.course_key as course_key,\n            pages.section_with_name as section_with_name,\n            pages.subsection_with_name as subsection_with_name,\n            pages.item_count as item_count,\n            visits.actor_id as actor_id,\n            visits.block_id as block_id,\n            pages.subsection_block_id as subsection_block_id\n        from visited_subsection_pages visits\n        join\n            pages_per_subsection pages\n            on (\n                visits.org = pages.org\n                and visits.course_key = pages.course_key\n                and visits.section_number = pages.section_number\n                and visits.subsection_number = pages.subsection_number\n            )\n    ),\n    subsection_counts as (\n        select\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            count(distinct block_id) as pages_visited,\n            case\n                when pages_visited = 0\n                then 'No pages viewed yet'\n                when pages_visited = item_count\n                then 'All pages viewed'\n                else 'At least one page viewed'\n            end as engagement_level,\n            subsection_block_id\n        from fact_navigation_completion\n        group by\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            subsection_block_id\n    )\n\nselect org, course_key, actor_id, subsection_block_id, engagement_level\nfrom subsection_counts", "relation_name": "`xapi`.`fact_subsection_page_engagement`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.536552Z", "completed_at": "2025-08-18T12:22:33.543901Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.544359Z", "completed_at": "2025-08-18T12:22:33.544365Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009024620056152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.problem_events", "compiled": true, "compiled_code": "\n\nwith\n    events as (\n        select\n            event_id,\n            cast(emission_time as DateTime) as emission_time,\n            actor_id,\n            object_id,\n            course_key,\n            org,\n            verb_id,\n            JSON_VALUE(event, '$.result.response') as responses,\n            JSONExtractFloat(event, 'result', 'score', 'scaled') as scaled_score,\n            if(\n                verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated',\n                cast(JSON_VALUE(event, '$.result.success') as Bool),\n                false\n            ) as success,\n            toLowCardinality(\n                JSON_VALUE(event, '$.object.definition.interactionType')\n            ) as interaction_type,\n            if(\n                verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated',\n                cast(\n                    JSON_VALUE(\n                        event,\n                        '$.object.definition.extensions.\"http://id.tincanapi.com/extension/attempt-id\"'\n                    ) as Int16\n                ),\n                0\n            ) as attempts,\n            \n    regexpExtract(\n        object_id, 'xblock/([\\w\\d-\\+:@]*@problem\\+block@[\\w\\d][^_\\/]*)(_\\d_\\d)?', 1\n    )\n as problem_id\n        from `xapi`.`xapi_events_all_parsed` xapi\n        where\n            verb_id in (\n                'https://w3id.org/xapi/acrossx/verbs/evaluated',\n                'http://adlnet.gov/expapi/verbs/passed',\n                'http://adlnet.gov/expapi/verbs/asked'\n            )\n    )\nselect\n    events.*,\n    course_name,\n    block_name,\n    display_name_with_location,\n    \n    concat(\n        '<a href=\"', object_id, '\" target=\"_blank\">', display_name_with_location, '</a>'\n    )\n as problem_link,\n    graded,\n    course_order\nfrom events\nleft join\n    `xapi`.`dim_course_blocks` blocks\n    on (events.course_key = blocks.course_key and events.problem_id = blocks.block_id)", "relation_name": "`xapi`.`problem_events`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.546782Z", "completed_at": "2025-08-18T12:22:33.550846Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.551317Z", "completed_at": "2025-08-18T12:22:33.551323Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005767107009887695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.accepted_values_dim_most_recent_enrollment_enrollment_status__registered__unregistered.85182a49cb", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        enrollment_status as value_field,\n        count(*) as n_records\n\n    from `xapi`.`dim_most_recent_enrollment`\n    group by enrollment_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'registered','unregistered'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.553486Z", "completed_at": "2025-08-18T12:22:33.557615Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.558055Z", "completed_at": "2025-08-18T12:22:33.558061Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005566120147705078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.accepted_values_fact_enrollments_enrollment_status__registered__unregistered.f8d10203f4", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        enrollment_status as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_enrollments`\n    group by enrollment_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'registered','unregistered'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.560211Z", "completed_at": "2025-08-18T12:22:33.565178Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.565659Z", "completed_at": "2025-08-18T12:22:33.565666Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0064389705657958984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.accepted_values_fact_instance_enrollments_enrollment_status__registered__unregistered.305ffdf696", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        enrollment_status as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_instance_enrollments`\n    group by enrollment_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'registered','unregistered'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.567944Z", "completed_at": "2025-08-18T12:22:33.572314Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.572758Z", "completed_at": "2025-08-18T12:22:33.572764Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005814075469970703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_student_status", "compiled": true, "compiled_code": "select\n    fes.org as org,\n    fes.course_key as course_key,\n    fes.actor_id as actor_id,\n    courses.course_name as course_name,\n    courses.course_run as course_run,\n    if(empty(approving_state), 'failed', approving_state) as approving_state,\n    enrollment_mode,\n    enrollment_status,\n    course_grade,\n    case\n        when course_grade >= 0.9\n        then '90-100%'\n        when course_grade >= 0.8 and course_grade < 0.9\n        then '80-89%'\n        when course_grade >= 0.7 and course_grade < 0.8\n        then '70-79%'\n        when course_grade >= 0.6 and course_grade < 0.7\n        then '60-69%'\n        when course_grade >= 0.5 and course_grade < 0.6\n        then '50-59%'\n        when course_grade >= 0.4 and course_grade < 0.5\n        then '40-49%'\n        when course_grade >= 0.3 and course_grade < 0.4\n        then '30-39%'\n        when course_grade >= 0.2 and course_grade < 0.3\n        then '20-29%'\n        when course_grade >= 0.1 and course_grade < 0.2\n        then '10-19%'\n        else '0-9%'\n    end as grade_bucket,\n    users.username as username,\n    users.name as name,\n    users.email as email,\n    fes.emission_time as enrolled_at\nfrom `xapi`.`dim_most_recent_enrollment` fes\nleft join\n    `xapi`.`dim_learner_most_recent_course_state` lg\n    on fes.org = lg.org\n    and fes.course_key = lg.course_key\n    and fes.actor_id = lg.actor_id\nleft join\n    `xapi`.`dim_learner_most_recent_course_grade` ls\n    on fes.org = ls.org\n    and fes.course_key = ls.course_key\n    and fes.actor_id = ls.actor_id\njoin\n    `xapi`.`dim_course_names` courses\n    on fes.org = courses.org\n    and fes.course_key = courses.course_key\nleft outer join\n    `xapi`.`dim_user_pii` users\n    on (actor_id like 'mailto:%' and SUBSTRING(actor_id, 8) = users.email)\n    or actor_id = toString(users.external_user_id)", "relation_name": "`xapi`.`dim_student_status`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.575062Z", "completed_at": "2025-08-18T12:22:33.580409Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.580857Z", "completed_at": "2025-08-18T12:22:33.580863Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0069844722747802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.accepted_values_dim_learner_most_recent_course_state_approving_state__passed__failed.b6c7cf1dfb", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        approving_state as value_field,\n        count(*) as n_records\n\n    from `xapi`.`dim_learner_most_recent_course_state`\n    group by approving_state\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'passed','failed'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.583015Z", "completed_at": "2025-08-18T12:22:33.587634Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.588072Z", "completed_at": "2025-08-18T12:22:33.588078Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006029367446899414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_video_engagement", "compiled": true, "compiled_code": "\n\nwith\n    fact_video_segments as (\n        select\n            segments.org as org,\n            segments.course_key as course_key,\n            blocks.section_number as section_number,\n            blocks.subsection_number as subsection_number,\n            segments.actor_id as actor_id,\n            count(distinct blocks.block_id) as videos_viewed\n        from `xapi`.`fact_video_segments` segments\n        join\n            `xapi`.`dim_course_blocks` blocks\n            on (\n                segments.course_key = blocks.course_key\n                and splitByString('/xblock/', segments.object_id)[-1] = blocks.block_id\n            )\n        group by org, course_key, section_number, subsection_number, actor_id\n    ),\n    fact_videos_per_subsection as (\n        select * from (\n    with\n        items_per_subsection as (\n            select\n                org,\n                course_key,\n                section_number,\n                subsection_number,\n                min(course_order) as course_order,\n                graded,\n                count(*) as item_count\n            from `xapi`.`dim_course_blocks`\n            where block_id like '%@video+block@%'\n            group by org, course_key, section_number, subsection_number, graded\n        )\n\n    select\n        ips.org as org,\n        ips.course_key as course_key,\n        ips.section_number as section_number,\n        section_blocks.display_name_with_location as section_with_name,\n        ips.subsection_number as subsection_number,\n        subsection_blocks.display_name_with_location as subsection_with_name,\n        ips.course_order as course_order,\n        ips.graded as graded,\n        ips.item_count as item_count,\n        subsection_blocks.block_id as subsection_block_id,\n        section_blocks.block_id as section_block_id,\n        section_blocks.course_order as section_course_order,\n        subsection_blocks.course_order as subsection_course_order\n    from items_per_subsection ips\n    left join\n        `xapi`.`dim_course_blocks` section_blocks\n        on (\n            ips.section_number = section_blocks.hierarchy_location\n            and ips.org = section_blocks.org\n            and ips.course_key = section_blocks.course_key\n            and section_blocks.block_id like '%@chapter+block@%'\n        )\n    left join\n        `xapi`.`dim_course_blocks` subsection_blocks\n        on (\n            ips.subsection_number = subsection_blocks.hierarchy_location\n            and ips.org = subsection_blocks.org\n            and ips.course_key = subsection_blocks.course_key\n            and subsection_blocks.block_id like '%@sequential+block@%'\n        )\n)\n    ),\n    fact_video_section_subsection as (\n        select\n            videos.org as org,\n            videos.course_key as course_key,\n            videos.subsection_course_order as course_order,\n            plays.actor_id as actor_id,\n            'section' as section_content_level,\n            'subsection' as subsection_content_level,\n            videos.item_count as item_count,\n            sum(plays.videos_viewed) as videos_viewed,\n            videos.section_block_id as section_block_id,\n            videos.subsection_block_id as subsection_block_id,\n            videos.section_with_name as section_with_name,\n            videos.subsection_with_name as subsection_with_name\n        from fact_video_segments plays\n        full join\n            fact_videos_per_subsection videos\n            on (\n                videos.org = plays.org\n                and videos.course_key = plays.course_key\n                and videos.section_number = plays.section_number\n                and videos.subsection_number = plays.subsection_number\n            )\n        group by\n            org,\n            course_key,\n            course_order,\n            actor_id,\n            item_count,\n            section_block_id,\n            subsection_block_id,\n            section_with_name,\n            subsection_with_name\n    ),\n    video_engagment as (\n        select\n            org,\n            course_key,\n            actor_id,\n            sum(videos_viewed) as videos_viewed,\n            sum(item_count) as item_count,\n            case\n                when videos_viewed = 0\n                then 'No videos viewed yet'\n                when videos_viewed = item_count\n                then 'All videos viewed'\n                else 'At least one video viewed'\n            end as section_subsection_video_engagement,\n            block_id,\n            section_subsection_name,\n            content_level\n        from fact_video_section_subsection ARRAY\n        join\n            arrayConcat([subsection_block_id], [section_block_id]) as block_id,\n            arrayConcat(\n                [subsection_with_name], [section_with_name]\n            ) as section_subsection_name,\n            arrayConcat(\n                [subsection_content_level], [section_content_level]\n            ) as content_level\n        group by\n            org, course_key, actor_id, block_id, section_subsection_name, content_level\n    ),\n    final_results as (\n        select\n            video_engagment.org as org,\n            video_engagment.course_key as course_key,\n            video_engagment.section_subsection_name as section_subsection_name,\n            video_engagment.content_level as content_level,\n            video_engagment.actor_id as actor_id,\n            video_engagment.section_subsection_video_engagement\n            as section_subsection_video_engagement,\n            video_engagment.block_id as block_id,\n            users.username as username,\n            users.name as name,\n            users.email as email\n        from video_engagment\n        left outer join\n            `xapi`.`dim_user_pii` users\n            on (\n                video_engagment.actor_id like 'mailto:%'\n                and SUBSTRING(video_engagment.actor_id, 8) = users.email\n            )\n            or video_engagment.actor_id = toString(users.external_user_id)\n        where section_subsection_name <> ''\n    )\nselect *\nfrom final_results", "relation_name": "`xapi`.`fact_video_engagement`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.590971Z", "completed_at": "2025-08-18T12:22:33.598057Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.598539Z", "completed_at": "2025-08-18T12:22:33.598547Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00867772102355957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.accepted_values_fact_section_page_engagement_engagement_level__No_pages_viewed_yet__All_pages_viewed__At_least_one_page_viewed.8df1a6eaec", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        engagement_level as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_section_page_engagement`\n    group by engagement_level\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'No pages viewed yet','All pages viewed','At least one page viewed'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.600754Z", "completed_at": "2025-08-18T12:22:33.604655Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.605111Z", "completed_at": "2025-08-18T12:22:33.605117Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0053555965423583984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_pageview_engagement", "compiled": true, "compiled_code": "with\n    subsection_engagement as (\n        select\n            org,\n            course_key,\n            'subsection' as content_level,\n            actor_id,\n            subsection_block_id as block_id,\n            engagement_level as section_subsection_page_engagement\n        from `xapi`.`fact_subsection_page_engagement`\n    ),\n    section_engagement as (\n        select\n            org,\n            course_key,\n            'section' as content_level,\n            actor_id,\n            section_block_id as block_id,\n            engagement_level as section_subsection_page_engagement\n        from `xapi`.`fact_section_page_engagement`\n    ),\n    page_engagement as (\n        select *\n        from subsection_engagement\n        union all\n        select *\n        from section_engagement\n    )\n\nselect\n    pv.org as org,\n    pv.course_key as course_key,\n    course_blocks.course_run as course_run,\n    course_blocks.display_name_with_location as section_subsection_name,\n    pv.content_level as content_level,\n    pv.actor_id as actor_id,\n    pv.section_subsection_page_engagement as section_subsection_page_engagement,\n    users.username as username,\n    users.name as name,\n    users.email as email\nfrom page_engagement pv\njoin\n    `xapi`.`dim_course_blocks` course_blocks\n    on (\n        pv.org = course_blocks.org\n        and pv.course_key = course_blocks.course_key\n        and pv.block_id = course_blocks.block_id\n    )\nleft outer join\n    `xapi`.`dim_user_pii` users\n    on (pv.actor_id like 'mailto:%' and SUBSTRING(pv.actor_id, 8) = users.email)\n    or pv.actor_id = toString(users.external_user_id)", "relation_name": "`xapi`.`fact_pageview_engagement`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.607467Z", "completed_at": "2025-08-18T12:22:33.613995Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.614463Z", "completed_at": "2025-08-18T12:22:33.614469Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008126020431518555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.accepted_values_fact_subsection_page_engagement_engagement_level__No_pages_viewed_yet__All_pages_viewed__At_least_one_page_viewed.f4c62badeb", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        engagement_level as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_subsection_page_engagement`\n    group by engagement_level\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'No pages viewed yet','All pages viewed','At least one page viewed'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.616671Z", "completed_at": "2025-08-18T12:22:33.619934Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.620502Z", "completed_at": "2025-08-18T12:22:33.620515Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004935741424560547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_learner_first_response", "compiled": true, "compiled_code": "\n\nselect\n    org,\n    course_key,\n    object_id,\n    problem_id,\n    actor_id,\n    interaction_type,\n    MIN(attempts) as attempt,\n    argMin(success, attempts) as success,\n    argMin(emission_time, attempts) as emission_time,\n    argMin(responses, attempts) as responses,\n    argMin(scaled_score, attempts) as scaled_score\nfrom `xapi`.`problem_events`\nwhere verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated'\ngroup by org, course_key, object_id, problem_id, actor_id, interaction_type", "relation_name": "`xapi`.`dim_learner_first_response`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.623381Z", "completed_at": "2025-08-18T12:22:33.627306Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.627763Z", "completed_at": "2025-08-18T12:22:33.627769Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005377769470214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_learner_first_success_response", "compiled": true, "compiled_code": "\n\nwith\n    problem_events as (\n        select\n            org,\n            course_key,\n            object_id,\n            problem_id,\n            actor_id,\n            interaction_type,\n            argMin(attempts, emission_time) as attempt,\n            success,\n            argMin(responses, emission_time) as responses,\n            argMin(scaled_score, emission_time) as scaled_score,\n            MIN(emission_time) as _emission_time\n        from `xapi`.`problem_events`\n        where verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated' and success\n        group by\n            org, course_key, object_id, problem_id, actor_id, interaction_type, success\n    )\nselect\n    org,\n    course_key,\n    object_id,\n    problem_id,\n    actor_id,\n    interaction_type,\n    attempt,\n    success,\n    responses,\n    scaled_score,\n    _emission_time as emission_time\nfrom problem_events", "relation_name": "`xapi`.`dim_learner_first_success_response`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.629983Z", "completed_at": "2025-08-18T12:22:33.633781Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.634229Z", "completed_at": "2025-08-18T12:22:33.634234Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005285024642944336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_learner_last_response", "compiled": true, "compiled_code": "\n\nselect\n    org,\n    course_key,\n    object_id,\n    problem_id,\n    actor_id,\n    interaction_type,\n    MAX(attempts) as attempt,\n    argMax(success, attempts) as success,\n    argMax(emission_time, attempts) as emission_time,\n    argMax(responses, attempts) as responses,\n    argMax(scaled_score, attempts) as scaled_score\nfrom `xapi`.`problem_events`\nwhere verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated'\ngroup by org, course_key, object_id, problem_id, actor_id, interaction_type", "relation_name": "`xapi`.`dim_learner_last_response`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.636549Z", "completed_at": "2025-08-18T12:22:33.640322Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.640766Z", "completed_at": "2025-08-18T12:22:33.640771Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005227804183959961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_learner_response_attempt", "compiled": true, "compiled_code": "-- select one record per (learner, problem, course, org) tuple\n-- contains either the first successful attempt\n-- or the most recent unsuccessful attempt\n-- find the timestamp of the earliest successful response\n-- this will be used to pick the xAPI event corresponding to that submission\n\n\nwith\n    responses as (\n        select\n            emission_time,\n            org,\n            course_key,\n            object_id,\n            problem_id,\n            actor_id,\n            success,\n            responses,\n            attempts,\n            interaction_type\n        from `xapi`.`problem_events`\n        where verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated'\n    ),\n    response_status as (\n        select\n            org,\n            course_key,\n            problem_id,\n            actor_id,\n            MIN(case when success then emission_time else NULL end) as first_success_at,\n            MAX(emission_time) as last_attempt_at\n        from responses\n        group by org, course_key, problem_id, actor_id\n    )\nselect\n    org,\n    course_key,\n    problem_id,\n    actor_id,\n    first_success_at,\n    last_attempt_at,\n    coalesce(first_success_at, last_attempt_at) as emission_time\nfrom response_status", "relation_name": "`xapi`.`dim_learner_response_attempt`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.643028Z", "completed_at": "2025-08-18T12:22:33.647717Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.648157Z", "completed_at": "2025-08-18T12:22:33.648163Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006230831146240234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_section_problem_engagement", "compiled": true, "compiled_code": "\n\nwith\n    fact_problem_responses as (\n        select\n            emission_time as emission_time,\n            org as org,\n            course_key as course_key,\n            course_name as course_name,\n            problem_id as problem_id,\n            block_name as problem_name,\n            display_name_with_location as problem_name_with_location,\n            problem_link,\n            graded as graded,\n            course_order as course_order,\n            actor_id as actor_id,\n            responses as responses,\n            success as success,\n            attempts as attempts,\n            interaction_type as interaction_type\n        from `xapi`.`problem_events`\n        where verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated'\n        group by\n            -- multi-part questions include an extra record for the response to the\n            -- first\n            -- part of the question. this group by clause eliminates the duplicate\n            -- record\n            emission_time,\n            org,\n            course_key,\n            course_name,\n            problem_id,\n            problem_name,\n            problem_name_with_location,\n            problem_link,\n            actor_id,\n            responses,\n            success,\n            attempts,\n            course_order,\n            graded,\n            interaction_type\n    ),\n    attempted_subsection_problems as (\n        select distinct\n            date(emission_time) as attempted_on,\n            org,\n            course_key,\n            \n    concat(\n        splitByString(\n            ':', splitByString(' - ', problem_name_with_location)[1], 1\n        )[1],\n        ':0:0'\n    )\n as section_number,\n            \n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', problem_name_with_location)[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n\n            as subsection_number,\n            course_order as course_order,\n            graded,\n            actor_id,\n            problem_id\n        from fact_problem_responses\n    ),\n    problems_per_subsection as (\n        select * from (\n    with\n        items_per_subsection as (\n            select\n                org,\n                course_key,\n                section_number,\n                subsection_number,\n                min(course_order) as course_order,\n                graded,\n                count(*) as item_count\n            from `xapi`.`dim_course_blocks`\n            where block_id like '%@problem+block@%'\n            group by org, course_key, section_number, subsection_number, graded\n        )\n\n    select\n        ips.org as org,\n        ips.course_key as course_key,\n        ips.section_number as section_number,\n        section_blocks.display_name_with_location as section_with_name,\n        ips.subsection_number as subsection_number,\n        subsection_blocks.display_name_with_location as subsection_with_name,\n        ips.course_order as course_order,\n        ips.graded as graded,\n        ips.item_count as item_count,\n        subsection_blocks.block_id as subsection_block_id,\n        section_blocks.block_id as section_block_id,\n        section_blocks.course_order as section_course_order,\n        subsection_blocks.course_order as subsection_course_order\n    from items_per_subsection ips\n    left join\n        `xapi`.`dim_course_blocks` section_blocks\n        on (\n            ips.section_number = section_blocks.hierarchy_location\n            and ips.org = section_blocks.org\n            and ips.course_key = section_blocks.course_key\n            and section_blocks.block_id like '%@chapter+block@%'\n        )\n    left join\n        `xapi`.`dim_course_blocks` subsection_blocks\n        on (\n            ips.subsection_number = subsection_blocks.hierarchy_location\n            and ips.org = subsection_blocks.org\n            and ips.course_key = subsection_blocks.course_key\n            and subsection_blocks.block_id like '%@sequential+block@%'\n        )\n)\n    ),\n    fact_problem_engagement_per_subsection as (\n        select\n            attempts.org as org,\n            attempts.course_key as course_key,\n            problems.section_with_name as section_with_name,\n            problems.subsection_with_name as subsection_with_name,\n            problems.item_count as item_count,\n            attempts.actor_id as actor_id,\n            attempts.problem_id as problem_id,\n            problems.section_block_id as section_block_id\n        from attempted_subsection_problems attempts\n        join\n            problems_per_subsection problems\n            on (\n                attempts.org = problems.org\n                and attempts.course_key = problems.course_key\n                and attempts.section_number = problems.section_number\n                and attempts.subsection_number = problems.subsection_number\n            )\n    ),\n    subsection_counts as (\n        select\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            count(distinct problem_id) as problems_attempted,\n            case\n                when problems_attempted = 0\n                then 'No problems attempted yet'\n                when problems_attempted = item_count\n                then 'All problems attempted'\n                else 'At least one problem attempted'\n            end as engagement_level,\n            section_block_id\n        from fact_problem_engagement_per_subsection\n        group by\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            section_block_id\n    ),\n    section_counts as (\n        select\n            org,\n            course_key,\n            actor_id,\n            sum(item_count) as item_count,\n            sum(problems_attempted) as problems_attempted,\n            case\n                when problems_attempted = 0\n                then 'No problems attempted yet'\n                when problems_attempted = item_count\n                then 'All problems attempted'\n                else 'At least one problem attempted'\n            end as engagement_level,\n            section_block_id\n        from subsection_counts\n        group by org, course_key, section_block_id, actor_id\n    )\n\nselect org, course_key, actor_id, section_block_id, engagement_level\nfrom section_counts", "relation_name": "`xapi`.`fact_section_problem_engagement`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.650491Z", "completed_at": "2025-08-18T12:22:33.655767Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.656282Z", "completed_at": "2025-08-18T12:22:33.656290Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007040739059448242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_subsection_problem_engagement", "compiled": true, "compiled_code": "\n\nwith\n    fact_problem_responses as (\n        select\n            emission_time as emission_time,\n            org as org,\n            course_key as course_key,\n            course_name as course_name,\n            problem_id as problem_id,\n            block_name as problem_name,\n            display_name_with_location as problem_name_with_location,\n            problem_link,\n            graded as graded,\n            course_order as course_order,\n            actor_id as actor_id,\n            responses as responses,\n            success as success,\n            attempts as attempts,\n            interaction_type as interaction_type\n        from `xapi`.`problem_events`\n        where verb_id = 'https://w3id.org/xapi/acrossx/verbs/evaluated'\n        group by\n            -- multi-part questions include an extra record for the response to the\n            -- first\n            -- part of the question. this group by clause eliminates the duplicate\n            -- record\n            emission_time,\n            org,\n            course_key,\n            course_name,\n            problem_id,\n            problem_name,\n            problem_name_with_location,\n            problem_link,\n            actor_id,\n            responses,\n            success,\n            attempts,\n            course_order,\n            graded,\n            interaction_type\n    ),\n    attempted_subsection_problems as (\n        select distinct\n            date(emission_time) as attempted_on,\n            org,\n            course_key,\n            \n    concat(\n        splitByString(\n            ':', splitByString(' - ', problem_name_with_location)[1], 1\n        )[1],\n        ':0:0'\n    )\n as section_number,\n            \n    concat(\n        arrayStringConcat(\n            splitByString(\n                ':', splitByString(' - ', problem_name_with_location)[1], 2\n            ),\n            ':'\n        ),\n        ':0'\n    )\n\n            as subsection_number,\n            course_order as course_order,\n            graded,\n            actor_id,\n            problem_id\n        from fact_problem_responses\n    ),\n    problems_per_subsection as (\n        select * from (\n    with\n        items_per_subsection as (\n            select\n                org,\n                course_key,\n                section_number,\n                subsection_number,\n                min(course_order) as course_order,\n                graded,\n                count(*) as item_count\n            from `xapi`.`dim_course_blocks`\n            where block_id like '%@problem+block@%'\n            group by org, course_key, section_number, subsection_number, graded\n        )\n\n    select\n        ips.org as org,\n        ips.course_key as course_key,\n        ips.section_number as section_number,\n        section_blocks.display_name_with_location as section_with_name,\n        ips.subsection_number as subsection_number,\n        subsection_blocks.display_name_with_location as subsection_with_name,\n        ips.course_order as course_order,\n        ips.graded as graded,\n        ips.item_count as item_count,\n        subsection_blocks.block_id as subsection_block_id,\n        section_blocks.block_id as section_block_id,\n        section_blocks.course_order as section_course_order,\n        subsection_blocks.course_order as subsection_course_order\n    from items_per_subsection ips\n    left join\n        `xapi`.`dim_course_blocks` section_blocks\n        on (\n            ips.section_number = section_blocks.hierarchy_location\n            and ips.org = section_blocks.org\n            and ips.course_key = section_blocks.course_key\n            and section_blocks.block_id like '%@chapter+block@%'\n        )\n    left join\n        `xapi`.`dim_course_blocks` subsection_blocks\n        on (\n            ips.subsection_number = subsection_blocks.hierarchy_location\n            and ips.org = subsection_blocks.org\n            and ips.course_key = subsection_blocks.course_key\n            and subsection_blocks.block_id like '%@sequential+block@%'\n        )\n)\n    ),\n    fact_problem_engagement_per_subsection as (\n        select\n            attempts.org as org,\n            attempts.course_key as course_key,\n            problems.section_with_name as section_with_name,\n            problems.subsection_with_name as subsection_with_name,\n            problems.item_count as item_count,\n            attempts.actor_id as actor_id,\n            attempts.problem_id as problem_id,\n            problems.subsection_block_id as subsection_block_id\n        from attempted_subsection_problems attempts\n        join\n            problems_per_subsection problems\n            on (\n                attempts.org = problems.org\n                and attempts.course_key = problems.course_key\n                and attempts.section_number = problems.section_number\n                and attempts.subsection_number = problems.subsection_number\n            )\n    ),\n    subsection_counts as (\n        select\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            count(distinct problem_id) as problems_attempted,\n            case\n                when problems_attempted = 0\n                then 'No problems attempted yet'\n                when problems_attempted = item_count\n                then 'All problems attempted'\n                else 'At least one problem attempted'\n            end as engagement_level,\n            subsection_block_id\n        from fact_problem_engagement_per_subsection\n        group by\n            org,\n            course_key,\n            section_with_name,\n            subsection_with_name,\n            actor_id,\n            item_count,\n            subsection_block_id\n    )\n\nselect org, course_key, actor_id, subsection_block_id, engagement_level\nfrom subsection_counts", "relation_name": "`xapi`.`fact_subsection_problem_engagement`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.658701Z", "completed_at": "2025-08-18T12:22:33.663155Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.663650Z", "completed_at": "2025-08-18T12:22:33.663656Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006082296371459961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.accepted_values_dim_student_status_enrollment_status__registered__unregistered.e175e06448", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        enrollment_status as value_field,\n        count(*) as n_records\n\n    from `xapi`.`dim_student_status`\n    group by enrollment_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'registered','unregistered'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.665871Z", "completed_at": "2025-08-18T12:22:33.671241Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.671713Z", "completed_at": "2025-08-18T12:22:33.671719Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006891965866088867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.accepted_values_fact_video_engagement_content_level__section__subsection.636c5e7005", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        content_level as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_video_engagement`\n    group by content_level\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'section','subsection'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.673939Z", "completed_at": "2025-08-18T12:22:33.684768Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.685355Z", "completed_at": "2025-08-18T12:22:33.685367Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012564420700073242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.accepted_values_fact_video_engagement_section_subsection_video_engagement__No_videos_viewed_yet__At_least_one_video_viewed__All_videos_viewed.91f6ccbf80", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        section_subsection_video_engagement as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_video_engagement`\n    group by section_subsection_video_engagement\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'No videos viewed yet','At least one video viewed','All videos viewed'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.687894Z", "completed_at": "2025-08-18T12:22:33.693243Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.693761Z", "completed_at": "2025-08-18T12:22:33.693769Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006998300552368164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.accepted_values_fact_pageview_engagement_content_level__section__subsection.dd9e9af3ed", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        content_level as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_pageview_engagement`\n    group by content_level\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'section','subsection'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.696025Z", "completed_at": "2025-08-18T12:22:33.701394Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.701853Z", "completed_at": "2025-08-18T12:22:33.701862Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006876707077026367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_problem_responses", "compiled": true, "compiled_code": "\n\nwith\n    final_results as (\n        select\n            first_response.org as org,\n            first_response.course_key as course_key,\n            first_response.emission_time as emission_time,\n            splitByChar('@', blocks.block_id)[3] as block_id_short,\n            replaceRegexpAll(\n                first_response.responses,\n                '<.*?hint.*?<\\/.*?hint>|</div>|<div>|\\[|\\]',\n                ''\n            ) as _response1,\n            replaceRegexpAll(_response1, '\",(\\s|)\"', ',') as _response2,\n            case\n                when first_response.responses like '[%'\n                then arrayJoin(splitByChar(',', replaceAll(_response2, '\"', '')))\n                else _response2\n            end as response,\n            first_response.success as success,\n            first_response.interaction_type as interaction_type,\n            \n    substring(\n        regexpExtract(first_response.object_id, '(@problem\\+block@[\\w\\d][^_\\/]*)(_\\d)?', 2),\n        2\n    ) as _problem_id_number,\n    ifNull(nullIf(_problem_id_number, ''), '1') as _problem_id_or_1,\n    splitByString(' - ', blocks.display_name_with_location) as _problem_with_name,\n    arrayStringConcat(\n        arrayMap(\n            x -> (leftPad(x, 2, char(917768))),\n            splitByString(':', _problem_with_name[1])\n        ),\n        ':'\n    ) as _problem_number,\n    concat(_problem_number, '_', _problem_id_or_1) as problem_number,\n    concat(problem_number, ' - ', _problem_with_name[2]) as problem_name_location\n\n        from `xapi`.`dim_learner_first_response` as first_response\n        left join\n            `xapi`.`dim_course_blocks` blocks\n            on (\n                first_response.course_key = blocks.course_key\n                and first_response.problem_id = blocks.block_id\n            )\n    )\nselect\n    org,\n    course_key,\n    emission_time,\n    block_id_short,\n    response,\n    success,\n    interaction_type,\n    problem_number,\n    problem_name_location,\n    count(1) as response_count\nfrom final_results\ngroup by\n    org,\n    course_key,\n    emission_time,\n    block_id_short,\n    response,\n    success,\n    interaction_type,\n    problem_number,\n    problem_name_location", "relation_name": "`xapi`.`dim_problem_responses`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.704118Z", "completed_at": "2025-08-18T12:22:33.708546Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.708994Z", "completed_at": "2025-08-18T12:22:33.709000Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005873441696166992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_problem_results", "compiled": true, "compiled_code": "\n\nwith\n    final_results as (\n        select\n            events.org as org,\n            events.course_key as course_key,\n            first_success.success as success,\n            first_success.attempt as attempt,\n            first_success.actor_id as actor_id,\n            splitByChar('@', blocks.block_id)[3] as block_id_short,\n            \n    substring(\n        regexpExtract(events.object_id, '(@problem\\+block@[\\w\\d][^_\\/]*)(_\\d)?', 2),\n        2\n    ) as _problem_id_number,\n    ifNull(nullIf(_problem_id_number, ''), '1') as _problem_id_or_1,\n    splitByString(' - ', blocks.display_name_with_location) as _problem_with_name,\n    arrayStringConcat(\n        arrayMap(\n            x -> (leftPad(x, 2, char(917768))),\n            splitByString(':', _problem_with_name[1])\n        ),\n        ':'\n    ) as _problem_number,\n    concat(_problem_number, '_', _problem_id_or_1) as problem_number,\n    concat(problem_number, ' - ', _problem_with_name[2]) as problem_name_location\n\n        from\n            (\n                select distinct org, course_key, object_id, problem_id\n                from `xapi`.`problem_events` events\n            ) events\n        join\n            `xapi`.`dim_course_blocks` as blocks\n            on (\n                events.course_key = blocks.course_key\n                and events.problem_id = blocks.block_id\n            )\n        left join\n            `xapi`.`dim_learner_first_success_response` as first_success\n            on (\n                first_success.org = events.org\n                and first_success.course_key = events.course_key\n                and first_success.object_id = events.object_id\n            )\n    )\nselect\n    org,\n    course_key,\n    success,\n    attempt,\n    actor_id,\n    problem_number,\n    problem_name_location,\n    block_id_short\nfrom final_results", "relation_name": "`xapi`.`dim_problem_results`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.711374Z", "completed_at": "2025-08-18T12:22:33.716055Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.716553Z", "completed_at": "2025-08-18T12:22:33.716561Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00636744499206543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.dim_subsection_problem_results", "compiled": true, "compiled_code": "\n\nwith\n    final_results as (\n        select\n            last_response.org as org,\n            last_response.course_key as course_key,\n            last_response.actor_id as actor_id,\n            splitByChar('@', subsection_blocks.block_id)[3] as block_id_short,\n            problem_blocks.block_id as problem_id,\n            last_response.success as success,\n            last_response.scaled_score as scaled_score,\n            splitByString(\n                ' - ', subsection_blocks.display_name_with_location\n            ) as _subsection_with_name,\n            arrayStringConcat(\n                arrayMap(\n                    x -> (leftPad(x, 2, char(917768))),\n                    splitByString(':', _subsection_with_name[1])\n                ),\n                ':'\n            ) as subsection_number,\n            concat(\n                subsection_number, ' - ', _subsection_with_name[2]\n            ) as subsection_with_name,\n            \n    substring(\n        regexpExtract(last_response.object_id, '(@problem\\+block@[\\w\\d][^_\\/]*)(_\\d)?', 2),\n        2\n    ) as _problem_id_number,\n    ifNull(nullIf(_problem_id_number, ''), '1') as _problem_id_or_1,\n    splitByString(' - ', problem_blocks.display_name_with_location) as _problem_with_name,\n    arrayStringConcat(\n        arrayMap(\n            x -> (leftPad(x, 2, char(917768))),\n            splitByString(':', _problem_with_name[1])\n        ),\n        ':'\n    ) as _problem_number,\n    concat(_problem_number, '_', _problem_id_or_1) as problem_number,\n    concat(problem_number, ' - ', _problem_with_name[2]) as problem_name_location\n\n        from `xapi`.`dim_learner_last_response` last_response\n        join\n            `xapi`.`dim_course_blocks` problem_blocks\n            on problem_blocks.block_id = last_response.problem_id\n            and last_response.course_key = problem_blocks.course_key\n        left join\n            `xapi`.`dim_course_blocks` subsection_blocks\n            on problem_blocks.subsection_number = subsection_blocks.hierarchy_location\n            and last_response.org = subsection_blocks.org\n            and last_response.course_key = subsection_blocks.course_key\n            and (\n                subsection_blocks.block_id like '%@sequential+block@%'\n                or subsection_blocks.block_id like '%@chapter+block@%'\n            )\n        where problem_blocks.graded\n    )\nselect\n    org,\n    course_key,\n    block_id_short,\n    problem_number,\n    problem_name_location,\n    actor_id,\n    success,\n    subsection_number,\n    subsection_with_name,\n    scaled_score\nfrom final_results", "relation_name": "`xapi`.`dim_subsection_problem_results`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.718977Z", "completed_at": "2025-08-18T12:22:33.723607Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.724104Z", "completed_at": "2025-08-18T12:22:33.724112Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006200075149536133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.aspects.fact_learner_response_attempts", "compiled": true, "compiled_code": "-- select one record per (learner, problem, course, org) tuple\n-- contains either the first successful attempt\n-- or the most recent unsuccessful attempt\n-- find the timestamp of the earliest successful response\n-- this will be used to pick the xAPI event corresponding to that submission\nwith\n    full_responses as (\n        select\n            events.emission_time as emission_time,\n            events.org as org,\n            events.course_key as course_key,\n            events.problem_id as problem_id,\n            events.object_id as object_id,\n            events.actor_id as actor_id,\n            events.responses as responses,\n            events.success as success,\n            events.attempts as attempts,\n            events.interaction_type as interaction_type,\n            events.problem_link as problem_link\n        from `xapi`.`problem_events` events\n        join\n            `xapi`.`dim_learner_response_attempt` using (\n                org, course_key, problem_id, actor_id, emission_time\n            )\n    )\n\nselect\n    full_responses.emission_time as emission_time,\n    full_responses.org as org,\n    full_responses.course_key as course_key,\n    blocks.course_name as course_name,\n    blocks.course_run as course_run,\n    full_responses.problem_id as problem_id,\n    blocks.block_name as problem_name,\n    blocks.display_name_with_location as problem_name_with_location,\n    blocks.course_order as course_order,\n    full_responses.problem_link as problem_link,\n    full_responses.actor_id as actor_id,\n    full_responses.responses as responses,\n    full_responses.success as success,\n    full_responses.attempts as attempts,\n    full_responses.interaction_type as interaction_type,\n    blocks.graded\nfrom full_responses\njoin\n    `xapi`.`dim_course_blocks` blocks\n    on (\n        full_responses.course_key = blocks.course_key\n        and full_responses.problem_id = blocks.block_id\n    )", "relation_name": "`xapi`.`fact_learner_response_attempts`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.726465Z", "completed_at": "2025-08-18T12:22:33.732329Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.732823Z", "completed_at": "2025-08-18T12:22:33.732829Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007396697998046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.accepted_values_fact_section_problem_engagement_engagement_level__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted.59b85f0027", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        engagement_level as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_section_problem_engagement`\n    group by engagement_level\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'No problems attempted yet','All problems attempted','At least one problem attempted'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-18T12:22:33.735068Z", "completed_at": "2025-08-18T12:22:33.739070Z"}, {"name": "execute", "started_at": "2025-08-18T12:22:33.739541Z", "completed_at": "2025-08-18T12:22:33.739546Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005481243133544922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.aspects.accepted_values_fact_subsection_problem_engagement_engagement_level__No_problems_attempted_yet__All_problems_attempted__At_least_one_problem_attempted.7f92082eba", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        engagement_level as value_field,\n        count(*) as n_records\n\n    from `xapi`.`fact_subsection_problem_engagement`\n    group by engagement_level\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'No problems attempted yet','All problems attempted','At least one problem attempted'\n)\n\n\n", "relation_name": null}], "elapsed_time": 0.6592662334442139, "args": {"log_format_file": "debug", "static": false, "log_file_max_bytes": 10485760, "macro_debugging": false, "write_json": true, "project_dir": "/home/runner/work/aspects-dbt/aspects-dbt", "populate_cache": true, "exclude": [], "source_freshness_run_project_hooks": false, "strict_mode": false, "log_path": "/home/runner/work/aspects-dbt/aspects-dbt/logs", "cache_selected_only": false, "defer": false, "quiet": false, "partial_parse_file_diff": true, "vars": {}, "profiles_dir": "./.github/", "require_explicit_package_overrides_for_builtin_materializations": true, "log_level": "info", "partial_parse": true, "show_resource_report": false, "introspect": true, "invocation_command": "dbt docs generate", "version_check": true, "warn_error_options": {"include": [], "exclude": []}, "use_colors_file": true, "compile": true, "require_resource_names_without_spaces": false, "use_colors": true, "static_parser": true, "printer_width": 80, "select": [], "print": true, "which": "generate", "favor_state": false, "empty_catalog": false, "log_level_file": "debug", "indirect_selection": "eager", "log_format": "default", "enable_legacy_logger": false, "send_anonymous_usage_stats": true}}